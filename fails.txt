
       _               _
   ___| |__   ___  ___| | _______   __
  / __| '_ \ / _ \/ __| |/ / _ \ \ / /
 | (__| | | |  __/ (__|   < (_) \ V /
  \___|_| |_|\___|\___|_|\_\___/ \_/

By bridgecrew.io | version: 2.0.634

terraform scan results:

Passed checks: 721, Failed checks: 1566, Skipped checks: 1, Parsing errors: 1

Check: CKV_AWS_70: "Ensure S3 bucket does not allow an action with any Principal"
	PASSED for resource: aws_s3_bucket.fail
	File: /terraform/aws/s3/s3.tf:10-38

Check: CKV_AWS_93: "Ensure S3 bucket policy does not lockout all but root user. (Prevent lockouts needing root account fixes)"
	PASSED for resource: aws_s3_bucket.fail
	File: /terraform/aws/s3/s3.tf:10-38

Check: CKV_AWS_72: "Ensure SQS policy does not allow ALL (*) actions."
	PASSED for resource: aws_sqs_queue_policy.fail
	File: /terraform/aws/sqs/sqs_queue_policy.fail.tf:5-19

Check: CKV_AWS_72: "Ensure SQS policy does not allow ALL (*) actions."
	PASSED for resource: aws_sqs_queue_policy.fail
	File: /terraform/aws/sqs/sqs_queue_policy.tf:5-25

Check: CKV_AWS_24: "Ensure no security groups allow ingress from 0.0.0.0:0 to port 22"
	PASSED for resource: aws_security_group_rule.fail
	File: /terraform/aws/vpc/security_group.tf:41-45

Check: CKV_AWS_25: "Ensure no security groups allow ingress from 0.0.0.0:0 to port 3389"
	PASSED for resource: aws_security_group_rule.fail
	File: /terraform/aws/vpc/security_group.tf:41-45

Check: CKV_AWS_24: "Ensure no security groups allow ingress from 0.0.0.0:0 to port 22"
	PASSED for resource: aws_security_group_rule.fail
	File: /terraform/aws/vpc/security_group_rule.tf:9-17

Check: CKV_AWS_25: "Ensure no security groups allow ingress from 0.0.0.0:0 to port 3389"
	PASSED for resource: aws_security_group_rule.fail
	File: /terraform/aws/vpc/security_group_rule.tf:9-17

Check: CKV_AZURE_108: "Ensure that Azure IoT Hub disables public network access"
	PASSED for resource: azurerm_iothub.example
	File: /terraform/azurerm/IoTNoPublicNetworkAccess.tf:2-54

Check: CKV_AZURE_125: "Ensures that Service Fabric use three levels of protection available"
	PASSED for resource: azurerm_service_fabric_cluster.example
	File: /terraform/azurerm/ServiceFabricClusterProtectionLevel.tf:2-27

Check: CKV_AZURE_57: "Ensure that CORS disallows every resource to access app services"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDetailedErrorMessagesEnabled.tf:2-32

Check: CKV_AZURE_82: "Ensure that 'Python version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDetailedErrorMessagesEnabled.tf:2-32

Check: CKV_AZURE_72: "Ensure that remote debugging is not enabled for app services"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDetailedErrorMessagesEnabled.tf:2-32

Check: CKV_AZURE_81: "Ensure that 'PHP version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDetailedErrorMessagesEnabled.tf:2-32

Check: CKV_AZURE_15: "Ensure web app is using the latest version of TLS encryption"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDetailedErrorMessagesEnabled.tf:2-32

Check: CKV_AZURE_83: "Ensure that 'Java version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDetailedErrorMessagesEnabled.tf:2-32

Check: CKV_AZURE_82: "Ensure that 'Python version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDisallowedCORS.tf:2-25

Check: CKV_AZURE_72: "Ensure that remote debugging is not enabled for app services"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDisallowedCORS.tf:2-25

Check: CKV_AZURE_81: "Ensure that 'PHP version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDisallowedCORS.tf:2-25

Check: CKV_AZURE_15: "Ensure web app is using the latest version of TLS encryption"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDisallowedCORS.tf:2-25

Check: CKV_AZURE_83: "Ensure that 'Java version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDisallowedCORS.tf:2-25

Check: CKV_AZURE_57: "Ensure that CORS disallows every resource to access app services"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDotnetFrameworkVersion.tf:2-12

Check: CKV_AZURE_82: "Ensure that 'Python version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDotnetFrameworkVersion.tf:2-12

Check: CKV_AZURE_72: "Ensure that remote debugging is not enabled for app services"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDotnetFrameworkVersion.tf:2-12

Check: CKV_AZURE_81: "Ensure that 'PHP version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDotnetFrameworkVersion.tf:2-12

Check: CKV_AZURE_15: "Ensure web app is using the latest version of TLS encryption"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDotnetFrameworkVersion.tf:2-12

Check: CKV_AZURE_14: "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDotnetFrameworkVersion.tf:2-12

Check: CKV_AZURE_83: "Ensure that 'Java version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDotnetFrameworkVersion.tf:2-12

Check: CKV_AZURE_57: "Ensure that CORS disallows every resource to access app services"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceEnableFailedRequest.tf:2-11

Check: CKV_AZURE_82: "Ensure that 'Python version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceEnableFailedRequest.tf:2-11

Check: CKV_AZURE_72: "Ensure that remote debugging is not enabled for app services"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceEnableFailedRequest.tf:2-11

Check: CKV_AZURE_81: "Ensure that 'PHP version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceEnableFailedRequest.tf:2-11

Check: CKV_AZURE_15: "Ensure web app is using the latest version of TLS encryption"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceEnableFailedRequest.tf:2-11

Check: CKV_AZURE_14: "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceEnableFailedRequest.tf:2-11

Check: CKV_AZURE_83: "Ensure that 'Java version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceEnableFailedRequest.tf:2-11

Check: CKV_AZURE_57: "Ensure that CORS disallows every resource to access app services"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceFTPSState.tf:2-12

Check: CKV_AZURE_82: "Ensure that 'Python version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceFTPSState.tf:2-12

Check: CKV_AZURE_72: "Ensure that remote debugging is not enabled for app services"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceFTPSState.tf:2-12

Check: CKV_AZURE_81: "Ensure that 'PHP version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceFTPSState.tf:2-12

Check: CKV_AZURE_15: "Ensure web app is using the latest version of TLS encryption"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceFTPSState.tf:2-12

Check: CKV_AZURE_14: "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceFTPSState.tf:2-12

Check: CKV_AZURE_83: "Ensure that 'Java version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceFTPSState.tf:2-12

Check: CKV_AZURE_57: "Ensure that CORS disallows every resource to access app services"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHTTPSOnly.tf:2-7

Check: CKV_AZURE_82: "Ensure that 'Python version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHTTPSOnly.tf:2-7

Check: CKV_AZURE_72: "Ensure that remote debugging is not enabled for app services"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHTTPSOnly.tf:2-7

Check: CKV_AZURE_81: "Ensure that 'PHP version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHTTPSOnly.tf:2-7

Check: CKV_AZURE_15: "Ensure web app is using the latest version of TLS encryption"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHTTPSOnly.tf:2-7

Check: CKV_AZURE_83: "Ensure that 'Java version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHTTPSOnly.tf:2-7

Check: CKV_AZURE_57: "Ensure that CORS disallows every resource to access app services"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttpLoggingEnabled.tf:2-32

Check: CKV_AZURE_82: "Ensure that 'Python version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttpLoggingEnabled.tf:2-32

Check: CKV_AZURE_72: "Ensure that remote debugging is not enabled for app services"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttpLoggingEnabled.tf:2-32

Check: CKV_AZURE_81: "Ensure that 'PHP version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttpLoggingEnabled.tf:2-32

Check: CKV_AZURE_15: "Ensure web app is using the latest version of TLS encryption"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttpLoggingEnabled.tf:2-32

Check: CKV_AZURE_83: "Ensure that 'Java version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttpLoggingEnabled.tf:2-32

Check: CKV_AZURE_57: "Ensure that CORS disallows every resource to access app services"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttps20Enabled.tf:2-7

Check: CKV_AZURE_82: "Ensure that 'Python version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttps20Enabled.tf:2-7

Check: CKV_AZURE_72: "Ensure that remote debugging is not enabled for app services"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttps20Enabled.tf:2-7

Check: CKV_AZURE_81: "Ensure that 'PHP version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttps20Enabled.tf:2-7

Check: CKV_AZURE_15: "Ensure web app is using the latest version of TLS encryption"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttps20Enabled.tf:2-7

Check: CKV_AZURE_83: "Ensure that 'Java version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttps20Enabled.tf:2-7

Check: CKV_AZURE_57: "Ensure that CORS disallows every resource to access app services"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentity.tf:2-7

Check: CKV_AZURE_82: "Ensure that 'Python version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentity.tf:2-7

Check: CKV_AZURE_72: "Ensure that remote debugging is not enabled for app services"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentity.tf:2-7

Check: CKV_AZURE_81: "Ensure that 'PHP version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentity.tf:2-7

Check: CKV_AZURE_15: "Ensure web app is using the latest version of TLS encryption"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentity.tf:2-7

Check: CKV_AZURE_83: "Ensure that 'Java version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentity.tf:2-7

Check: CKV_AZURE_57: "Ensure that CORS disallows every resource to access app services"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentityProviderEnabled.tf:2-22

Check: CKV_AZURE_82: "Ensure that 'Python version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentityProviderEnabled.tf:2-22

Check: CKV_AZURE_72: "Ensure that remote debugging is not enabled for app services"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentityProviderEnabled.tf:2-22

Check: CKV_AZURE_81: "Ensure that 'PHP version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentityProviderEnabled.tf:2-22

Check: CKV_AZURE_15: "Ensure web app is using the latest version of TLS encryption"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentityProviderEnabled.tf:2-22

Check: CKV_AZURE_83: "Ensure that 'Java version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentityProviderEnabled.tf:2-22

Check: CKV_AZURE_57: "Ensure that CORS disallows every resource to access app services"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceUsedAzureFiles.tf:2-15

Check: CKV_AZURE_82: "Ensure that 'Python version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceUsedAzureFiles.tf:2-15

Check: CKV_AZURE_72: "Ensure that remote debugging is not enabled for app services"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceUsedAzureFiles.tf:2-15

Check: CKV_AZURE_81: "Ensure that 'PHP version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceUsedAzureFiles.tf:2-15

Check: CKV_AZURE_15: "Ensure web app is using the latest version of TLS encryption"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceUsedAzureFiles.tf:2-15

Check: CKV_AZURE_14: "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceUsedAzureFiles.tf:2-15

Check: CKV_AZURE_83: "Ensure that 'Java version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceUsedAzureFiles.tf:2-15

Check: CKV_AZURE_57: "Ensure that CORS disallows every resource to access app services"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/authentication-enabled.tf:2-7

Check: CKV_AZURE_82: "Ensure that 'Python version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/authentication-enabled.tf:2-7

Check: CKV_AZURE_72: "Ensure that remote debugging is not enabled for app services"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/authentication-enabled.tf:2-7

Check: CKV_AZURE_81: "Ensure that 'PHP version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/authentication-enabled.tf:2-7

Check: CKV_AZURE_15: "Ensure web app is using the latest version of TLS encryption"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/authentication-enabled.tf:2-7

Check: CKV_AZURE_83: "Ensure that 'Java version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/authentication-enabled.tf:2-7

Check: CKV_AZURE_57: "Ensure that CORS disallows every resource to access app services"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/detailed-error-messages-enabled.tf:1-6

Check: CKV_AZURE_82: "Ensure that 'Python version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/detailed-error-messages-enabled.tf:1-6

Check: CKV_AZURE_72: "Ensure that remote debugging is not enabled for app services"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/detailed-error-messages-enabled.tf:1-6

Check: CKV_AZURE_81: "Ensure that 'PHP version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/detailed-error-messages-enabled.tf:1-6

Check: CKV_AZURE_15: "Ensure web app is using the latest version of TLS encryption"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/detailed-error-messages-enabled.tf:1-6

Check: CKV_AZURE_83: "Ensure that 'Java version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/detailed-error-messages-enabled.tf:1-6

Check: CKV_AZURE_57: "Ensure that CORS disallows every resource to access app services"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/dotnet-framework-version.tf:1-6

Check: CKV_AZURE_82: "Ensure that 'Python version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/dotnet-framework-version.tf:1-6

Check: CKV_AZURE_72: "Ensure that remote debugging is not enabled for app services"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/dotnet-framework-version.tf:1-6

Check: CKV_AZURE_81: "Ensure that 'PHP version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/dotnet-framework-version.tf:1-6

Check: CKV_AZURE_15: "Ensure web app is using the latest version of TLS encryption"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/dotnet-framework-version.tf:1-6

Check: CKV_AZURE_83: "Ensure that 'Java version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/dotnet-framework-version.tf:1-6

Check: CKV_AZURE_57: "Ensure that CORS disallows every resource to access app services"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-http2.tf:1-6

Check: CKV_AZURE_82: "Ensure that 'Python version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-http2.tf:1-6

Check: CKV_AZURE_72: "Ensure that remote debugging is not enabled for app services"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-http2.tf:1-6

Check: CKV_AZURE_81: "Ensure that 'PHP version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-http2.tf:1-6

Check: CKV_AZURE_15: "Ensure web app is using the latest version of TLS encryption"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-http2.tf:1-6

Check: CKV_AZURE_83: "Ensure that 'Java version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-http2.tf:1-6

Check: CKV_AZURE_57: "Ensure that CORS disallows every resource to access app services"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-https-only.tf:3-8

Check: CKV_AZURE_82: "Ensure that 'Python version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-https-only.tf:3-8

Check: CKV_AZURE_72: "Ensure that remote debugging is not enabled for app services"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-https-only.tf:3-8

Check: CKV_AZURE_81: "Ensure that 'PHP version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-https-only.tf:3-8

Check: CKV_AZURE_15: "Ensure web app is using the latest version of TLS encryption"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-https-only.tf:3-8

Check: CKV_AZURE_83: "Ensure that 'Java version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-https-only.tf:3-8

Check: CKV_AZURE_62: "Ensure function apps are not accessible from all regions"
	PASSED for resource: azurerm_function_app.fail
	File: /terraform/azurerm/appservice/enforce-https.tf:2-10

Check: CKV_AZURE_57: "Ensure that CORS disallows every resource to access app services"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/failed-request-tracing-enabled.tf:3-8

Check: CKV_AZURE_82: "Ensure that 'Python version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/failed-request-tracing-enabled.tf:3-8

Check: CKV_AZURE_72: "Ensure that remote debugging is not enabled for app services"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/failed-request-tracing-enabled.tf:3-8

Check: CKV_AZURE_81: "Ensure that 'PHP version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/failed-request-tracing-enabled.tf:3-8

Check: CKV_AZURE_15: "Ensure web app is using the latest version of TLS encryption"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/failed-request-tracing-enabled.tf:3-8

Check: CKV_AZURE_83: "Ensure that 'Java version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/failed-request-tracing-enabled.tf:3-8

Check: CKV_AZURE_57: "Ensure that CORS disallows every resource to access app services"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/ftp-deployments-disabled.tf:2-7

Check: CKV_AZURE_82: "Ensure that 'Python version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/ftp-deployments-disabled.tf:2-7

Check: CKV_AZURE_72: "Ensure that remote debugging is not enabled for app services"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/ftp-deployments-disabled.tf:2-7

Check: CKV_AZURE_81: "Ensure that 'PHP version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/ftp-deployments-disabled.tf:2-7

Check: CKV_AZURE_15: "Ensure web app is using the latest version of TLS encryption"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/ftp-deployments-disabled.tf:2-7

Check: CKV_AZURE_83: "Ensure that 'Java version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/ftp-deployments-disabled.tf:2-7

Check: CKV_AZURE_57: "Ensure that CORS disallows every resource to access app services"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/http-logs-enabled.tf:2-7

Check: CKV_AZURE_82: "Ensure that 'Python version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/http-logs-enabled.tf:2-7

Check: CKV_AZURE_72: "Ensure that remote debugging is not enabled for app services"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/http-logs-enabled.tf:2-7

Check: CKV_AZURE_81: "Ensure that 'PHP version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/http-logs-enabled.tf:2-7

Check: CKV_AZURE_15: "Ensure web app is using the latest version of TLS encryption"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/http-logs-enabled.tf:2-7

Check: CKV_AZURE_83: "Ensure that 'Java version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/http-logs-enabled.tf:2-7

Check: CKV_AZURE_57: "Ensure that CORS disallows every resource to access app services"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/require-client-cert.tf:2-7

Check: CKV_AZURE_82: "Ensure that 'Python version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/require-client-cert.tf:2-7

Check: CKV_AZURE_72: "Ensure that remote debugging is not enabled for app services"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/require-client-cert.tf:2-7

Check: CKV_AZURE_81: "Ensure that 'PHP version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/require-client-cert.tf:2-7

Check: CKV_AZURE_15: "Ensure web app is using the latest version of TLS encryption"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/require-client-cert.tf:2-7

Check: CKV_AZURE_83: "Ensure that 'Java version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/require-client-cert.tf:2-7

Check: CKV_AZURE_92: "Ensure that Virtual Machines use managed disks"
	PASSED for resource: azurerm_linux_virtual_machine.bad_linux_example
	File: /terraform/azurerm/compute/azurerm_linux_virtual_machine.tf:3-11

Check: CKV_AZURE_45: "Ensure that no sensitive credentials are exposed in VM custom_data"
	PASSED for resource: azurerm_virtual_machine.fail
	File: /terraform/azurerm/compute/no-secrets-in-custom-data.tf:2-7

Check: CKV_AZURE_1: "Ensure Azure Instance does not use basic authentication(Use SSH Key Instead)"
	PASSED for resource: azurerm_virtual_machine.fail
	File: /terraform/azurerm/compute/no-secrets-in-custom-data.tf:2-7

Check: CKV_AZURE_45: "Ensure that no sensitive credentials are exposed in VM custom_data"
	PASSED for resource: azurerm_virtual_machine.fail
	File: /terraform/azurerm/compute/ssh-authentication.tf:2-6

Check: CKV_AZURE_8: "Ensure Kubernetes Dashboard is disabled"
	PASSED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/configured-network-policy.tf:3-6

Check: CKV_AZURE_8: "Ensure Kubernetes Dashboard is disabled"
	PASSED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/limit-authorized-ips.tf:3-5

Check: CKV_AZURE_8: "Ensure Kubernetes Dashboard is disabled"
	PASSED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/logging.tf:2-4

Check: CKV_AZURE_8: "Ensure Kubernetes Dashboard is disabled"
	PASSED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/use-rbac-permissions.tf:2-6

Check: CKV_AZURE_68: "Ensure that PostgreSQL server disables public network access"
	PASSED for resource: azurerm_postgresql_server.fail
	File: /terraform/azurerm/database/enable-ssl-enforcement.tf:2-8

Check: CKV_AZURE_54: "Ensure MySQL is using the latest version of TLS encryption"
	PASSED for resource: azurerm_mysql_server.fail
	File: /terraform/azurerm/database/mysql-threat-detection-enabled.tf:3-13

Check: CKV_AZURE_62: "Ensure function apps are not accessible from all regions"
	PASSED for resource: azurerm_function_app.example
	File: /terraform/azurerm/functionapp/FunctionAppHttpVersionLatest.tf:2-10

Check: CKV_AZURE_57: "Ensure that CORS disallows every resource to access app services"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/functionapp/FunctionAppsAccessibleOverHttps.tf:2-8

Check: CKV_AZURE_82: "Ensure that 'Python version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/functionapp/FunctionAppsAccessibleOverHttps.tf:2-8

Check: CKV_AZURE_72: "Ensure that remote debugging is not enabled for app services"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/functionapp/FunctionAppsAccessibleOverHttps.tf:2-8

Check: CKV_AZURE_81: "Ensure that 'PHP version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/functionapp/FunctionAppsAccessibleOverHttps.tf:2-8

Check: CKV_AZURE_15: "Ensure web app is using the latest version of TLS encryption"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/functionapp/FunctionAppsAccessibleOverHttps.tf:2-8

Check: CKV_AZURE_83: "Ensure that 'Java version' is the latest, if used to run the web app"
	PASSED for resource: azurerm_app_service.example
	File: /terraform/azurerm/functionapp/FunctionAppsAccessibleOverHttps.tf:2-8

Check: CKV_AZURE_62: "Ensure function apps are not accessible from all regions"
	PASSED for resource: azurerm_function_app.example
	File: /terraform/azurerm/functionapp/FunctionAppsEnableAuthentication.tf:2-9

Check: CKV_AZURE_62: "Ensure function apps are not accessible from all regions"
	PASSED for resource: azurerm_function_app.fail
	File: /terraform/azurerm/functionapp/authentication-enabled.tf:3-8

Check: CKV_AZURE_62: "Ensure function apps are not accessible from all regions"
	PASSED for resource: azurerm_function_app.fail
	File: /terraform/azurerm/functionapp/enable-http2.tf:3-8

Check: CKV_AZURE_111: "Ensure that key vault enables soft delete"
	PASSED for resource: azurerm_key_vault.example
	File: /terraform/azurerm/keyvault/KeyVaultEnablesFirewallRulesSettings.tf:2-29

Check: CKV_AZURE_111: "Ensure that key vault enables soft delete"
	PASSED for resource: azurerm_key_vault.example
	File: /terraform/azurerm/keyvault/KeyVaultEnablesPurgeProtection.tf:2-28

Check: CKV_AZURE_111: "Ensure that key vault enables soft delete"
	PASSED for resource: azurerm_key_vault.example
	File: /terraform/azurerm/keyvault/KeyVaultRecoveryEnabled.tf:2-9

Check: CKV_AZURE_111: "Ensure that key vault enables soft delete"
	PASSED for resource: azurerm_key_vault.fail
	File: /terraform/azurerm/keyvault/no-purge.tf:3-8

Check: CKV_AZURE_111: "Ensure that key vault enables soft delete"
	PASSED for resource: azurerm_key_vault.fail
	File: /terraform/azurerm/keyvault/specify-network-acl.tf:3-9

Check: CKV_AZURE_8: "Ensure Kubernetes Dashboard is disabled"
	PASSED for resource: azurerm_kubernetes_cluster.example
	File: /terraform/azurerm/kubernetes_cluster/kubernetes_cluster.tf:2-21

Check: CKV_AZURE_2: "Ensure Azure managed disk has encryption enabled"
	PASSED for resource: azurerm_managed_disk.source
	File: /terraform/azurerm/managed_disk/ManagedDiskEncryptionSet.tf:2-13

Check: CKV_AZURE_48: "Ensure 'public network access enabled' is set to 'False' for MariaDB servers"
	PASSED for resource: azurerm_mariadb_server.example
	File: /terraform/azurerm/maria/MariaDBSSLEnforcementEnabled.tf:1-16

Check: CKV_AZURE_38: "Ensure audit profile captures all the activities"
	PASSED for resource: azurerm_monitor_log_profile.example
	File: /terraform/azurerm/monitor/MonitorLogProfileRetentionDays.tf:2-17

Check: CKV_AZURE_52: "Ensure MSSQL is using the latest version of TLS encryption"
	PASSED for resource: azurerm_mssql_server.example
	File: /terraform/azurerm/mssql/SQLServerPublicAccessDisabled.tf:2-15

Check: CKV_AZURE_26: "Ensure that 'Send Alerts To' is enabled for MSSQL servers"
	PASSED for resource: azurerm_mssql_server_security_alert_policy.fail
	File: /terraform/azurerm/mssql/threat-alert-email-set.tf:3-14

Check: CKV_AZURE_25: "Ensure that 'Threat Detection types' is set to 'All'"
	PASSED for resource: azurerm_mssql_server_security_alert_policy.fail
	File: /terraform/azurerm/mssql/threat-alert-email-to-owner.tf:3-12

Check: CKV_AZURE_54: "Ensure MySQL is using the latest version of TLS encryption"
	PASSED for resource: azurerm_mysql_server.example
	File: /terraform/azurerm/mysql/MySQLEncryptionEnaled.tf:2-20

Check: CKV_AZURE_28: "Ensure 'Enforce SSL connection' is set to 'ENABLED' for MySQL Database Server"
	PASSED for resource: azurerm_mysql_server.example
	File: /terraform/azurerm/mysql/MySQLEncryptionEnaled.tf:2-20

Check: CKV_AZURE_96: "Ensure that MySQL server enables infrastructure encryption"
	PASSED for resource: azurerm_mysql_server.examplea
	File: /terraform/azurerm/mysql/MySQLServerMinTLSVersion.tf:2-21

Check: CKV_AZURE_94: "Ensure that My SQL server enables geo-redundant backups"
	PASSED for resource: azurerm_mysql_server.examplea
	File: /terraform/azurerm/mysql/MySQLServerMinTLSVersion.tf:2-21

Check: CKV_AZURE_53: "Ensure 'public network access enabled' is set to 'False' for mySQL servers"
	PASSED for resource: azurerm_mysql_server.examplea
	File: /terraform/azurerm/mysql/MySQLServerMinTLSVersion.tf:2-21

Check: CKV_AZURE_54: "Ensure MySQL is using the latest version of TLS encryption"
	PASSED for resource: azurerm_mysql_server.example
	File: /terraform/azurerm/mysql/MySQLServerSSLEnforcementEnabled.tf:2-21

Check: CKV_AZURE_96: "Ensure that MySQL server enables infrastructure encryption"
	PASSED for resource: azurerm_mysql_server.example
	File: /terraform/azurerm/mysql/MySQLServerSSLEnforcementEnabled.tf:2-21

Check: CKV_AZURE_94: "Ensure that My SQL server enables geo-redundant backups"
	PASSED for resource: azurerm_mysql_server.example
	File: /terraform/azurerm/mysql/MySQLServerSSLEnforcementEnabled.tf:2-21

Check: CKV_AZURE_53: "Ensure 'public network access enabled' is set to 'False' for mySQL servers"
	PASSED for resource: azurerm_mysql_server.example
	File: /terraform/azurerm/mysql/MySQLServerSSLEnforcementEnabled.tf:2-21

Check: CKV_AZURE_54: "Ensure MySQL is using the latest version of TLS encryption"
	PASSED for resource: azurerm_mysql_server.example
	File: /terraform/azurerm/mysql/MySQLTreatDetectionEnabled.tf:2-25

Check: CKV_AZURE_96: "Ensure that MySQL server enables infrastructure encryption"
	PASSED for resource: azurerm_mysql_server.example
	File: /terraform/azurerm/mysql/MySQLTreatDetectionEnabled.tf:2-25

Check: CKV_AZURE_94: "Ensure that My SQL server enables geo-redundant backups"
	PASSED for resource: azurerm_mysql_server.example
	File: /terraform/azurerm/mysql/MySQLTreatDetectionEnabled.tf:2-25

Check: CKV_AZURE_53: "Ensure 'public network access enabled' is set to 'False' for mySQL servers"
	PASSED for resource: azurerm_mysql_server.example
	File: /terraform/azurerm/mysql/MySQLTreatDetectionEnabled.tf:2-25

Check: CKV_AZURE_77: "Ensure that UDP Services are restricted from the Internet "
	PASSED for resource: azurerm_network_security_rule.example
	File: /terraform/azurerm/network/NSGRuleRDPAccessRestricted.tf:2-14

Check: CKV_AZURE_9: "Ensure that RDP access is restricted from the internet"
	PASSED for resource: azurerm_network_security_rule.example
	File: /terraform/azurerm/network/NSGRuleRDPAccessRestricted.tf:2-14

Check: CKV_AZURE_77: "Ensure that UDP Services are restricted from the Internet "
	PASSED for resource: azurerm_network_security_rule.example
	File: /terraform/azurerm/network/NSGRuleSSHAccessRestricted.tf:2-14

Check: CKV_AZURE_9: "Ensure that RDP access is restricted from the internet"
	PASSED for resource: azurerm_network_security_rule.example
	File: /terraform/azurerm/network/NSGRuleSSHAccessRestricted.tf:2-14

Check: CKV_AZURE_10: "Ensure that SSH access is restricted from the internet"
	PASSED for resource: azurerm_network_security_group.example
	File: /terraform/azurerm/network/NSGRuleUDPAccessRestricted.tf:2-22

Check: CKV_AZURE_9: "Ensure that RDP access is restricted from the internet"
	PASSED for resource: azurerm_network_security_group.example
	File: /terraform/azurerm/network/NSGRuleUDPAccessRestricted.tf:2-22

Check: CKV_AZURE_77: "Ensure that UDP Services are restricted from the Internet "
	PASSED for resource: azurerm_network_security_rule.fail
	File: /terraform/azurerm/network/disable-rdp-from-internet.tf:3-12

Check: CKV_AZURE_10: "Ensure that SSH access is restricted from the internet"
	PASSED for resource: azurerm_network_security_rule.fail
	File: /terraform/azurerm/network/disable-rdp-from-internet.tf:3-12

Check: CKV_AZURE_77: "Ensure that UDP Services are restricted from the Internet "
	PASSED for resource: azurerm_network_security_group.example
	File: /terraform/azurerm/network/disable-rdp-from-internet.tf:14-25

Check: CKV_AZURE_10: "Ensure that SSH access is restricted from the internet"
	PASSED for resource: azurerm_network_security_group.example
	File: /terraform/azurerm/network/disable-rdp-from-internet.tf:14-25

Check: CKV_AZURE_9: "Ensure that RDP access is restricted from the internet"
	PASSED for resource: azurerm_network_security_group.example
	File: /terraform/azurerm/network/disable-rdp-from-internet.tf:14-25

Check: CKV_AZURE_77: "Ensure that UDP Services are restricted from the Internet "
	PASSED for resource: azurerm_network_security_rule.fail
	File: /terraform/azurerm/network/no-public-egress.tf:2-6

Check: CKV_AZURE_10: "Ensure that SSH access is restricted from the internet"
	PASSED for resource: azurerm_network_security_rule.fail
	File: /terraform/azurerm/network/no-public-egress.tf:2-6

Check: CKV_AZURE_9: "Ensure that RDP access is restricted from the internet"
	PASSED for resource: azurerm_network_security_rule.fail
	File: /terraform/azurerm/network/no-public-egress.tf:2-6

Check: CKV_AZURE_77: "Ensure that UDP Services are restricted from the Internet "
	PASSED for resource: azurerm_network_security_rule.fail
	File: /terraform/azurerm/network/no-public-ingress.tf:2-6

Check: CKV_AZURE_10: "Ensure that SSH access is restricted from the internet"
	PASSED for resource: azurerm_network_security_rule.fail
	File: /terraform/azurerm/network/no-public-ingress.tf:2-6

Check: CKV_AZURE_9: "Ensure that RDP access is restricted from the internet"
	PASSED for resource: azurerm_network_security_rule.fail
	File: /terraform/azurerm/network/no-public-ingress.tf:2-6

Check: CKV_AZURE_77: "Ensure that UDP Services are restricted from the Internet "
	PASSED for resource: azurerm_network_security_rule.fail
	File: /terraform/azurerm/network/ssh-blocked-from-internet.tf:2-11

Check: CKV_AZURE_9: "Ensure that RDP access is restricted from the internet"
	PASSED for resource: azurerm_network_security_rule.fail
	File: /terraform/azurerm/network/ssh-blocked-from-internet.tf:2-11

Check: CKV_AZURE_77: "Ensure that UDP Services are restricted from the Internet "
	PASSED for resource: azurerm_network_security_group.example
	File: /terraform/azurerm/network/ssh-blocked-from-internet.tf:13-24

Check: CKV_AZURE_10: "Ensure that SSH access is restricted from the internet"
	PASSED for resource: azurerm_network_security_group.example
	File: /terraform/azurerm/network/ssh-blocked-from-internet.tf:13-24

Check: CKV_AZURE_9: "Ensure that RDP access is restricted from the internet"
	PASSED for resource: azurerm_network_security_group.example
	File: /terraform/azurerm/network/ssh-blocked-from-internet.tf:13-24

Check: CKV_AZURE_29: "Ensure 'Enforce SSL connection' is set to 'ENABLED' for PostgreSQL Database Server"
	PASSED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/postgreSQL/PostgersSQLEncryptionEnaled.tf:2-20

Check: CKV_AZURE_30: "Ensure server parameter 'log_checkpoints' is set to 'ON' for PostgreSQL Database Server"
	PASSED for resource: azurerm_postgresql_configuration.example
	File: /terraform/azurerm/postgreSQL/PostgreSQLServerConnectionThrottlingEnabled.tf:2-7

Check: CKV_AZURE_31: "Ensure server parameter 'log_connections' is set to 'ON' for PostgreSQL Database Server"
	PASSED for resource: azurerm_postgresql_configuration.example
	File: /terraform/azurerm/postgreSQL/PostgreSQLServerConnectionThrottlingEnabled.tf:2-7

Check: CKV_AZURE_32: "Ensure server parameter 'connection_throttling' is set to 'ON' for PostgreSQL Database Server"
	PASSED for resource: azurerm_postgresql_configuration.example
	File: /terraform/azurerm/postgreSQL/PostgreSQLServerLogCheckpointEnabled.tf:2-7

Check: CKV_AZURE_31: "Ensure server parameter 'log_connections' is set to 'ON' for PostgreSQL Database Server"
	PASSED for resource: azurerm_postgresql_configuration.example
	File: /terraform/azurerm/postgreSQL/PostgreSQLServerLogCheckpointEnabled.tf:2-7

Check: CKV_AZURE_32: "Ensure server parameter 'connection_throttling' is set to 'ON' for PostgreSQL Database Server"
	PASSED for resource: azurerm_postgresql_configuration.example
	File: /terraform/azurerm/postgreSQL/PostgreSQLServerLogConnectionsEnabled.tf:2-7

Check: CKV_AZURE_30: "Ensure server parameter 'log_checkpoints' is set to 'ON' for PostgreSQL Database Server"
	PASSED for resource: azurerm_postgresql_configuration.example
	File: /terraform/azurerm/postgreSQL/PostgreSQLServerLogConnectionsEnabled.tf:2-7

Check: CKV_AZURE_29: "Ensure 'Enforce SSL connection' is set to 'ENABLED' for PostgreSQL Database Server"
	PASSED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/postgreSQL/PostgreSQLServerPublicAccessDisabled.tf:2-21

Check: CKV_AZURE_102: "Ensure that PostgreSQL server enables geo-redundant backups"
	PASSED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/postgreSQL/PostgreSQLServerPublicAccessDisabled.tf:2-21

Check: CKV_AZURE_68: "Ensure that PostgreSQL server disables public network access"
	PASSED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/postgreSQL/PostgreSQLServerSSLEnforcementEnabled.tf:2-21

Check: CKV_AZURE_102: "Ensure that PostgreSQL server enables geo-redundant backups"
	PASSED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/postgreSQL/PostgreSQLServerSSLEnforcementEnabled.tf:2-21

Check: CKV_AZURE_29: "Ensure 'Enforce SSL connection' is set to 'ENABLED' for PostgreSQL Database Server"
	PASSED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/postgreSQL/PostgresSQLGeoBackupEnabled.tf:2-21

Check: CKV_AZURE_68: "Ensure that PostgreSQL server disables public network access"
	PASSED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/postgreSQL/PostgresSQLTreatDetectionEnabled.tf:2-25

Check: CKV_AZURE_130: "Ensure that PostgreSQL server enables infrastructure encryption"
	PASSED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/postgreSQL/PostgresSQLTreatDetectionEnabled.tf:2-25

Check: CKV_AZURE_102: "Ensure that PostgreSQL server enables geo-redundant backups"
	PASSED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/postgreSQL/PostgresSQLTreatDetectionEnabled.tf:2-25

Check: CKV_AZURE_91: "Ensure that only SSL are enabled for Cache for Redis"
	PASSED for resource: azurerm_redis_cache.example
	File: /terraform/azurerm/redis/RedisCachePublicNetworkAccessEnabled.tf:2-14

Check: CKV_AZURE_55: "Ensure that Azure Defender is set to On for Servers"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnAppServices.tf:2-5

Check: CKV_AZURE_69: "Ensure that Azure Defender is set to On for Azure SQL database servers"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnAppServices.tf:2-5

Check: CKV_AZURE_85: "Ensure that Azure Defender is set to On for Kubernetes"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnAppServices.tf:2-5

Check: CKV_AZURE_79: "Ensure that Azure Defender is set to On for SQL servers on machines"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnAppServices.tf:2-5

Check: CKV_AZURE_86: "Ensure that Azure Defender is set to On for Container Registries"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnAppServices.tf:2-5

Check: CKV_AZURE_84: "Ensure that Azure Defender is set to On for Storage"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnAppServices.tf:2-5

Check: CKV_AZURE_87: "Ensure that Azure Defender is set to On for Key Vault"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnAppServices.tf:2-5

Check: CKV_AZURE_55: "Ensure that Azure Defender is set to On for Servers"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnContainerRegistry.tf:2-5

Check: CKV_AZURE_61: "Ensure that Azure Defender is set to On for App Service"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnContainerRegistry.tf:2-5

Check: CKV_AZURE_69: "Ensure that Azure Defender is set to On for Azure SQL database servers"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnContainerRegistry.tf:2-5

Check: CKV_AZURE_85: "Ensure that Azure Defender is set to On for Kubernetes"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnContainerRegistry.tf:2-5

Check: CKV_AZURE_79: "Ensure that Azure Defender is set to On for SQL servers on machines"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnContainerRegistry.tf:2-5

Check: CKV_AZURE_84: "Ensure that Azure Defender is set to On for Storage"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnContainerRegistry.tf:2-5

Check: CKV_AZURE_87: "Ensure that Azure Defender is set to On for Key Vault"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnContainerRegistry.tf:2-5

Check: CKV_AZURE_55: "Ensure that Azure Defender is set to On for Servers"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnKeyVaults.tf:2-5

Check: CKV_AZURE_61: "Ensure that Azure Defender is set to On for App Service"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnKeyVaults.tf:2-5

Check: CKV_AZURE_69: "Ensure that Azure Defender is set to On for Azure SQL database servers"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnKeyVaults.tf:2-5

Check: CKV_AZURE_85: "Ensure that Azure Defender is set to On for Kubernetes"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnKeyVaults.tf:2-5

Check: CKV_AZURE_79: "Ensure that Azure Defender is set to On for SQL servers on machines"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnKeyVaults.tf:2-5

Check: CKV_AZURE_86: "Ensure that Azure Defender is set to On for Container Registries"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnKeyVaults.tf:2-5

Check: CKV_AZURE_84: "Ensure that Azure Defender is set to On for Storage"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnKeyVaults.tf:2-5

Check: CKV_AZURE_55: "Ensure that Azure Defender is set to On for Servers"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnKubernetes.tf:2-5

Check: CKV_AZURE_61: "Ensure that Azure Defender is set to On for App Service"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnKubernetes.tf:2-5

Check: CKV_AZURE_69: "Ensure that Azure Defender is set to On for Azure SQL database servers"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnKubernetes.tf:2-5

Check: CKV_AZURE_79: "Ensure that Azure Defender is set to On for SQL servers on machines"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnKubernetes.tf:2-5

Check: CKV_AZURE_86: "Ensure that Azure Defender is set to On for Container Registries"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnKubernetes.tf:2-5

Check: CKV_AZURE_84: "Ensure that Azure Defender is set to On for Storage"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnKubernetes.tf:2-5

Check: CKV_AZURE_87: "Ensure that Azure Defender is set to On for Key Vault"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnKubernetes.tf:2-5

Check: CKV_AZURE_61: "Ensure that Azure Defender is set to On for App Service"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnServers.tf:2-5

Check: CKV_AZURE_69: "Ensure that Azure Defender is set to On for Azure SQL database servers"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnServers.tf:2-5

Check: CKV_AZURE_85: "Ensure that Azure Defender is set to On for Kubernetes"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnServers.tf:2-5

Check: CKV_AZURE_79: "Ensure that Azure Defender is set to On for SQL servers on machines"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnServers.tf:2-5

Check: CKV_AZURE_86: "Ensure that Azure Defender is set to On for Container Registries"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnServers.tf:2-5

Check: CKV_AZURE_84: "Ensure that Azure Defender is set to On for Storage"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnServers.tf:2-5

Check: CKV_AZURE_87: "Ensure that Azure Defender is set to On for Key Vault"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnServers.tf:2-5

Check: CKV_AZURE_55: "Ensure that Azure Defender is set to On for Servers"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnSqlServers.tf:2-5

Check: CKV_AZURE_61: "Ensure that Azure Defender is set to On for App Service"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnSqlServers.tf:2-5

Check: CKV_AZURE_85: "Ensure that Azure Defender is set to On for Kubernetes"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnSqlServers.tf:2-5

Check: CKV_AZURE_79: "Ensure that Azure Defender is set to On for SQL servers on machines"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnSqlServers.tf:2-5

Check: CKV_AZURE_86: "Ensure that Azure Defender is set to On for Container Registries"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnSqlServers.tf:2-5

Check: CKV_AZURE_84: "Ensure that Azure Defender is set to On for Storage"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnSqlServers.tf:2-5

Check: CKV_AZURE_87: "Ensure that Azure Defender is set to On for Key Vault"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnSqlServers.tf:2-5

Check: CKV_AZURE_55: "Ensure that Azure Defender is set to On for Servers"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnSqlServersVMS.tf:2-5

Check: CKV_AZURE_61: "Ensure that Azure Defender is set to On for App Service"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnSqlServersVMS.tf:2-5

Check: CKV_AZURE_69: "Ensure that Azure Defender is set to On for Azure SQL database servers"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnSqlServersVMS.tf:2-5

Check: CKV_AZURE_85: "Ensure that Azure Defender is set to On for Kubernetes"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnSqlServersVMS.tf:2-5

Check: CKV_AZURE_86: "Ensure that Azure Defender is set to On for Container Registries"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnSqlServersVMS.tf:2-5

Check: CKV_AZURE_84: "Ensure that Azure Defender is set to On for Storage"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnSqlServersVMS.tf:2-5

Check: CKV_AZURE_87: "Ensure that Azure Defender is set to On for Key Vault"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnSqlServersVMS.tf:2-5

Check: CKV_AZURE_55: "Ensure that Azure Defender is set to On for Servers"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnStorage.tf:2-5

Check: CKV_AZURE_61: "Ensure that Azure Defender is set to On for App Service"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnStorage.tf:2-5

Check: CKV_AZURE_69: "Ensure that Azure Defender is set to On for Azure SQL database servers"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnStorage.tf:2-5

Check: CKV_AZURE_85: "Ensure that Azure Defender is set to On for Kubernetes"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnStorage.tf:2-5

Check: CKV_AZURE_79: "Ensure that Azure Defender is set to On for SQL servers on machines"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnStorage.tf:2-5

Check: CKV_AZURE_86: "Ensure that Azure Defender is set to On for Container Registries"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnStorage.tf:2-5

Check: CKV_AZURE_87: "Ensure that Azure Defender is set to On for Key Vault"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnStorage.tf:2-5

Check: CKV_AZURE_20: "Ensure that security contact 'Phone number' is set"
	PASSED for resource: azurerm_security_center_contact.example
	File: /terraform/azurerm/security_center/SecurityCenterContactEmails.tf:2-7

Check: CKV_AZURE_22: "Ensure that 'Send email notification for high severity alerts' is set to 'On'"
	PASSED for resource: azurerm_security_center_contact.example
	File: /terraform/azurerm/security_center/SecurityCenterContactEmails.tf:2-7

Check: CKV_AZURE_21: "Ensure that 'Send email notification for high severity alerts' is set to 'On'"
	PASSED for resource: azurerm_security_center_contact.example
	File: /terraform/azurerm/security_center/SecurityCenterContactEmails.tf:2-7

Check: CKV_AZURE_131: "Ensure that 'Security contact emails' is set"
	PASSED for resource: azurerm_security_center_contact.example
	File: /terraform/azurerm/security_center/SecurityCenterContactPhone.tf:2-4

Check: CKV_AZURE_131: "Ensure that 'Security contact emails' is set"
	PASSED for resource: azurerm_security_center_contact.example
	File: /terraform/azurerm/security_center/SecurityCenterEmailAlert.tf:2-4

Check: CKV_AZURE_131: "Ensure that 'Security contact emails' is set"
	PASSED for resource: azurerm_security_center_contact.example
	File: /terraform/azurerm/security_center/SecurityCenterEmailAlertAdmins.tf:2-5

Check: CKV_AZURE_55: "Ensure that Azure Defender is set to On for Servers"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/SecurityCenterStandardPricing.tf:2-4

Check: CKV_AZURE_61: "Ensure that Azure Defender is set to On for App Service"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/SecurityCenterStandardPricing.tf:2-4

Check: CKV_AZURE_69: "Ensure that Azure Defender is set to On for Azure SQL database servers"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/SecurityCenterStandardPricing.tf:2-4

Check: CKV_AZURE_85: "Ensure that Azure Defender is set to On for Kubernetes"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/SecurityCenterStandardPricing.tf:2-4

Check: CKV_AZURE_79: "Ensure that Azure Defender is set to On for SQL servers on machines"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/SecurityCenterStandardPricing.tf:2-4

Check: CKV_AZURE_86: "Ensure that Azure Defender is set to On for Container Registries"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/SecurityCenterStandardPricing.tf:2-4

Check: CKV_AZURE_84: "Ensure that Azure Defender is set to On for Storage"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/SecurityCenterStandardPricing.tf:2-4

Check: CKV_AZURE_87: "Ensure that Azure Defender is set to On for Key Vault"
	PASSED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/SecurityCenterStandardPricing.tf:2-4

Check: CKV_AZURE_131: "Ensure that 'Security contact emails' is set"
	PASSED for resource: azurerm_security_center_contact.fail
	File: /terraform/azurerm/security_center/alert-on-severe-notifications.tf:3-9

Check: CKV_AZURE_20: "Ensure that security contact 'Phone number' is set"
	PASSED for resource: azurerm_security_center_contact.fail
	File: /terraform/azurerm/security_center/alert-on-severe-notifications.tf:3-9

Check: CKV_AZURE_61: "Ensure that Azure Defender is set to On for App Service"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-appservices.tf:2-5

Check: CKV_AZURE_69: "Ensure that Azure Defender is set to On for Azure SQL database servers"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-appservices.tf:2-5

Check: CKV_AZURE_85: "Ensure that Azure Defender is set to On for Kubernetes"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-appservices.tf:2-5

Check: CKV_AZURE_79: "Ensure that Azure Defender is set to On for SQL servers on machines"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-appservices.tf:2-5

Check: CKV_AZURE_86: "Ensure that Azure Defender is set to On for Container Registries"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-appservices.tf:2-5

Check: CKV_AZURE_84: "Ensure that Azure Defender is set to On for Storage"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-appservices.tf:2-5

Check: CKV_AZURE_87: "Ensure that Azure Defender is set to On for Key Vault"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-appservices.tf:2-5

Check: CKV_AZURE_61: "Ensure that Azure Defender is set to On for App Service"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-container-registry.tf:2-5

Check: CKV_AZURE_69: "Ensure that Azure Defender is set to On for Azure SQL database servers"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-container-registry.tf:2-5

Check: CKV_AZURE_85: "Ensure that Azure Defender is set to On for Kubernetes"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-container-registry.tf:2-5

Check: CKV_AZURE_79: "Ensure that Azure Defender is set to On for SQL servers on machines"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-container-registry.tf:2-5

Check: CKV_AZURE_86: "Ensure that Azure Defender is set to On for Container Registries"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-container-registry.tf:2-5

Check: CKV_AZURE_84: "Ensure that Azure Defender is set to On for Storage"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-container-registry.tf:2-5

Check: CKV_AZURE_87: "Ensure that Azure Defender is set to On for Key Vault"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-container-registry.tf:2-5

Check: CKV_AZURE_61: "Ensure that Azure Defender is set to On for App Service"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-keyvault.tf:3-6

Check: CKV_AZURE_69: "Ensure that Azure Defender is set to On for Azure SQL database servers"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-keyvault.tf:3-6

Check: CKV_AZURE_85: "Ensure that Azure Defender is set to On for Kubernetes"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-keyvault.tf:3-6

Check: CKV_AZURE_79: "Ensure that Azure Defender is set to On for SQL servers on machines"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-keyvault.tf:3-6

Check: CKV_AZURE_86: "Ensure that Azure Defender is set to On for Container Registries"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-keyvault.tf:3-6

Check: CKV_AZURE_84: "Ensure that Azure Defender is set to On for Storage"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-keyvault.tf:3-6

Check: CKV_AZURE_87: "Ensure that Azure Defender is set to On for Key Vault"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-keyvault.tf:3-6

Check: CKV_AZURE_61: "Ensure that Azure Defender is set to On for App Service"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-kubernetes.tf:2-5

Check: CKV_AZURE_69: "Ensure that Azure Defender is set to On for Azure SQL database servers"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-kubernetes.tf:2-5

Check: CKV_AZURE_85: "Ensure that Azure Defender is set to On for Kubernetes"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-kubernetes.tf:2-5

Check: CKV_AZURE_79: "Ensure that Azure Defender is set to On for SQL servers on machines"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-kubernetes.tf:2-5

Check: CKV_AZURE_86: "Ensure that Azure Defender is set to On for Container Registries"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-kubernetes.tf:2-5

Check: CKV_AZURE_84: "Ensure that Azure Defender is set to On for Storage"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-kubernetes.tf:2-5

Check: CKV_AZURE_87: "Ensure that Azure Defender is set to On for Key Vault"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-kubernetes.tf:2-5

Check: CKV_AZURE_55: "Ensure that Azure Defender is set to On for Servers"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-servers.tf:2-5

Check: CKV_AZURE_69: "Ensure that Azure Defender is set to On for Azure SQL database servers"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-servers.tf:2-5

Check: CKV_AZURE_85: "Ensure that Azure Defender is set to On for Kubernetes"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-servers.tf:2-5

Check: CKV_AZURE_79: "Ensure that Azure Defender is set to On for SQL servers on machines"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-servers.tf:2-5

Check: CKV_AZURE_86: "Ensure that Azure Defender is set to On for Container Registries"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-servers.tf:2-5

Check: CKV_AZURE_84: "Ensure that Azure Defender is set to On for Storage"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-servers.tf:2-5

Check: CKV_AZURE_87: "Ensure that Azure Defender is set to On for Key Vault"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-servers.tf:2-5

Check: CKV_AZURE_61: "Ensure that Azure Defender is set to On for App Service"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-sql-servers-vms.tf:3-6

Check: CKV_AZURE_69: "Ensure that Azure Defender is set to On for Azure SQL database servers"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-sql-servers-vms.tf:3-6

Check: CKV_AZURE_85: "Ensure that Azure Defender is set to On for Kubernetes"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-sql-servers-vms.tf:3-6

Check: CKV_AZURE_79: "Ensure that Azure Defender is set to On for SQL servers on machines"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-sql-servers-vms.tf:3-6

Check: CKV_AZURE_86: "Ensure that Azure Defender is set to On for Container Registries"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-sql-servers-vms.tf:3-6

Check: CKV_AZURE_84: "Ensure that Azure Defender is set to On for Storage"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-sql-servers-vms.tf:3-6

Check: CKV_AZURE_87: "Ensure that Azure Defender is set to On for Key Vault"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-sql-servers-vms.tf:3-6

Check: CKV_AZURE_61: "Ensure that Azure Defender is set to On for App Service"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-sql-servers.tf:3-6

Check: CKV_AZURE_69: "Ensure that Azure Defender is set to On for Azure SQL database servers"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-sql-servers.tf:3-6

Check: CKV_AZURE_85: "Ensure that Azure Defender is set to On for Kubernetes"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-sql-servers.tf:3-6

Check: CKV_AZURE_79: "Ensure that Azure Defender is set to On for SQL servers on machines"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-sql-servers.tf:3-6

Check: CKV_AZURE_86: "Ensure that Azure Defender is set to On for Container Registries"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-sql-servers.tf:3-6

Check: CKV_AZURE_84: "Ensure that Azure Defender is set to On for Storage"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-sql-servers.tf:3-6

Check: CKV_AZURE_87: "Ensure that Azure Defender is set to On for Key Vault"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-sql-servers.tf:3-6

Check: CKV_AZURE_61: "Ensure that Azure Defender is set to On for App Service"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-storage.tf:3-6

Check: CKV_AZURE_69: "Ensure that Azure Defender is set to On for Azure SQL database servers"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-storage.tf:3-6

Check: CKV_AZURE_85: "Ensure that Azure Defender is set to On for Kubernetes"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-storage.tf:3-6

Check: CKV_AZURE_79: "Ensure that Azure Defender is set to On for SQL servers on machines"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-storage.tf:3-6

Check: CKV_AZURE_86: "Ensure that Azure Defender is set to On for Container Registries"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-storage.tf:3-6

Check: CKV_AZURE_84: "Ensure that Azure Defender is set to On for Storage"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-storage.tf:3-6

Check: CKV_AZURE_87: "Ensure that Azure Defender is set to On for Key Vault"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-storage.tf:3-6

Check: CKV_AZURE_61: "Ensure that Azure Defender is set to On for App Service"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/enable-standard-subscription.tf:2-5

Check: CKV_AZURE_69: "Ensure that Azure Defender is set to On for Azure SQL database servers"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/enable-standard-subscription.tf:2-5

Check: CKV_AZURE_85: "Ensure that Azure Defender is set to On for Kubernetes"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/enable-standard-subscription.tf:2-5

Check: CKV_AZURE_79: "Ensure that Azure Defender is set to On for SQL servers on machines"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/enable-standard-subscription.tf:2-5

Check: CKV_AZURE_86: "Ensure that Azure Defender is set to On for Container Registries"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/enable-standard-subscription.tf:2-5

Check: CKV_AZURE_84: "Ensure that Azure Defender is set to On for Storage"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/enable-standard-subscription.tf:2-5

Check: CKV_AZURE_87: "Ensure that Azure Defender is set to On for Key Vault"
	PASSED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/enable-standard-subscription.tf:2-5

Check: CKV_AZURE_131: "Ensure that 'Security contact emails' is set"
	PASSED for resource: azurerm_security_center_contact.fail
	File: /terraform/azurerm/security_center/set-required-contact-details.tf:3-9

Check: CKV_AZURE_22: "Ensure that 'Send email notification for high severity alerts' is set to 'On'"
	PASSED for resource: azurerm_security_center_contact.fail
	File: /terraform/azurerm/security_center/set-required-contact-details.tf:3-9

Check: CKV_AZURE_21: "Ensure that 'Send email notification for high severity alerts' is set to 'On'"
	PASSED for resource: azurerm_security_center_contact.fail
	File: /terraform/azurerm/security_center/set-required-contact-details.tf:3-9

Check: CKV_AZURE_35: "Ensure default network access rule for Storage Accounts is set to deny"
	PASSED for resource: azurerm_storage_account_network_rules.test
	File: /terraform/azurerm/storage/StorageAccountAzureServicesAccessEnabled.tf:2-10

Check: CKV_AZURE_59: "Ensure that Storage accounts disallow public access"
	PASSED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountDefaultNetworkAccessDeny.tf:2-8

Check: CKV_AZURE_43: "Ensure Storage Accounts adhere to the naming rules"
	PASSED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountDefaultNetworkAccessDeny.tf:2-8

Check: CKV_AZURE_60: "Ensure that storage account enables secure transfer"
	PASSED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountDefaultNetworkAccessDeny.tf:2-8

Check: CKV_AZURE_36: "Ensure 'Trusted Microsoft Services' is enabled for Storage Account access"
	PASSED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountDefaultNetworkAccessDeny.tf:2-8

Check: CKV_AZURE_43: "Ensure Storage Accounts adhere to the naming rules"
	PASSED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountDisablePublicAccess.tf:2-14

Check: CKV_AZURE_36: "Ensure 'Trusted Microsoft Services' is enabled for Storage Account access"
	PASSED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountDisablePublicAccess.tf:2-14

Check: CKV_AZURE_59: "Ensure that Storage accounts disallow public access"
	PASSED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountEnablesSecureTransfer.tf:2-13

Check: CKV_AZURE_43: "Ensure Storage Accounts adhere to the naming rules"
	PASSED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountEnablesSecureTransfer.tf:2-13

Check: CKV_AZURE_36: "Ensure 'Trusted Microsoft Services' is enabled for Storage Account access"
	PASSED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountEnablesSecureTransfer.tf:2-13

Check: CKV_AZURE_59: "Ensure that Storage accounts disallow public access"
	PASSED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountLoggingQueueServiceEnabled.tf:2-8

Check: CKV_AZURE_43: "Ensure Storage Accounts adhere to the naming rules"
	PASSED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountLoggingQueueServiceEnabled.tf:2-8

Check: CKV_AZURE_60: "Ensure that storage account enables secure transfer"
	PASSED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountLoggingQueueServiceEnabled.tf:2-8

Check: CKV_AZURE_36: "Ensure 'Trusted Microsoft Services' is enabled for Storage Account access"
	PASSED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountLoggingQueueServiceEnabled.tf:2-8

Check: CKV_AZURE_59: "Ensure that Storage accounts disallow public access"
	PASSED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountMinimumTlsVersion.tf:2-13

Check: CKV_AZURE_43: "Ensure Storage Accounts adhere to the naming rules"
	PASSED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountMinimumTlsVersion.tf:2-13

Check: CKV_AZURE_60: "Ensure that storage account enables secure transfer"
	PASSED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountMinimumTlsVersion.tf:2-13

Check: CKV_AZURE_36: "Ensure 'Trusted Microsoft Services' is enabled for Storage Account access"
	PASSED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountMinimumTlsVersion.tf:2-13

Check: CKV_AZURE_59: "Ensure that Storage accounts disallow public access"
	PASSED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountName.tf:2-8

Check: CKV_AZURE_60: "Ensure that storage account enables secure transfer"
	PASSED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountName.tf:2-8

Check: CKV_AZURE_36: "Ensure 'Trusted Microsoft Services' is enabled for Storage Account access"
	PASSED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountName.tf:2-8

Check: CKV_AZURE_59: "Ensure that Storage accounts disallow public access"
	PASSED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/allow-microsoft-service-bypass.tf:3-21

Check: CKV_AZURE_43: "Ensure Storage Accounts adhere to the naming rules"
	PASSED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/allow-microsoft-service-bypass.tf:3-21

Check: CKV_AZURE_60: "Ensure that storage account enables secure transfer"
	PASSED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/allow-microsoft-service-bypass.tf:3-21

Check: CKV_AZURE_35: "Ensure default network access rule for Storage Accounts is set to deny"
	PASSED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/allow-microsoft-service-bypass.tf:3-21

Check: CKV_AZURE_36: "Ensure 'Trusted Microsoft Services' is enabled for Storage Account access"
	PASSED for resource: azurerm_storage_account_network_rules.test
	File: /terraform/azurerm/storage/allow-microsoft-service-bypass.tf:23-31

Check: CKV_AZURE_36: "Ensure 'Trusted Microsoft Services' is enabled for Storage Account access"
	PASSED for resource: azurerm_storage_account_network_rules.fail
	File: /terraform/azurerm/storage/default-action-deny.tf:2-8

Check: CKV_AZURE_59: "Ensure that Storage accounts disallow public access"
	PASSED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/enforce-https.tf:3-10

Check: CKV_AZURE_43: "Ensure Storage Accounts adhere to the naming rules"
	PASSED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/enforce-https.tf:3-10

Check: CKV_AZURE_36: "Ensure 'Trusted Microsoft Services' is enabled for Storage Account access"
	PASSED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/enforce-https.tf:3-10

Check: CKV_AZURE_35: "Ensure default network access rule for Storage Accounts is set to deny"
	PASSED for resource: azurerm_storage_account_network_rules.test
	File: /terraform/azurerm/storage/netrules.tf:1-9

Check: CKV_AZURE_59: "Ensure that Storage accounts disallow public access"
	PASSED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/queue-services-logging-enabled.tf:3-11

Check: CKV_AZURE_43: "Ensure Storage Accounts adhere to the naming rules"
	PASSED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/queue-services-logging-enabled.tf:3-11

Check: CKV_AZURE_60: "Ensure that storage account enables secure transfer"
	PASSED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/queue-services-logging-enabled.tf:3-11

Check: CKV_AZURE_36: "Ensure 'Trusted Microsoft Services' is enabled for Storage Account access"
	PASSED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/queue-services-logging-enabled.tf:3-11

Check: CKV_AZURE_43: "Ensure Storage Accounts adhere to the naming rules"
	PASSED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/storage.tf:1-15

Check: CKV_AZURE_35: "Ensure default network access rule for Storage Accounts is set to deny"
	PASSED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/storage.tf:1-15

Check: CKV_AZURE_59: "Ensure that Storage accounts disallow public access"
	PASSED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/use-secure-tls-policy.tf:3-7

Check: CKV_AZURE_43: "Ensure Storage Accounts adhere to the naming rules"
	PASSED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/use-secure-tls-policy.tf:3-7

Check: CKV_AZURE_60: "Ensure that storage account enables secure transfer"
	PASSED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/use-secure-tls-policy.tf:3-7

Check: CKV_AZURE_36: "Ensure 'Trusted Microsoft Services' is enabled for Storage Account access"
	PASSED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/use-secure-tls-policy.tf:3-7

Check: CKV_AZURE_1: "Ensure Azure Instance does not use basic authentication(Use SSH Key Instead)"
	PASSED for resource: azurerm_virtual_machine.secret
	File: /terraform/azurerm/vms/VMCredsInCustomData.tf:2-11

Check: CKV_AZURE_1: "Ensure Azure Instance does not use basic authentication(Use SSH Key Instead)"
	PASSED for resource: azurerm_linux_virtual_machine.example
	File: /terraform/azurerm/vms/VMStorageOsDisk.tf:2-30

Check: CKV_AZURE_92: "Ensure that Virtual Machines use managed disks"
	PASSED for resource: azurerm_linux_virtual_machine.default
	File: /terraform/azurerm/vms/linux_virtual_machine.tf:4-20

Check: CKV_AZURE_1: "Ensure Azure Instance does not use basic authentication(Use SSH Key Instead)"
	PASSED for resource: azurerm_linux_virtual_machine.default
	File: /terraform/azurerm/vms/linux_virtual_machine.tf:4-20

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.fail-flowlogs
	File: /terraform/google/container_cluster/EnableVPCFlowLogs.tf:11-89

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail-flowlogs
	File: /terraform/google/container_cluster/EnableVPCFlowLogs.tf:11-89

Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	PASSED for resource: google_container_cluster.fail-flowlogs
	File: /terraform/google/container_cluster/EnableVPCFlowLogs.tf:11-89

Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	PASSED for resource: google_container_cluster.fail-flowlogs
	File: /terraform/google/container_cluster/EnableVPCFlowLogs.tf:11-89

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail-flowlogs
	File: /terraform/google/container_cluster/EnableVPCFlowLogs.tf:11-89

Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	PASSED for resource: google_container_cluster.fail-flowlogs
	File: /terraform/google/container_cluster/EnableVPCFlowLogs.tf:11-89

Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	PASSED for resource: google_container_cluster.fail-flowlogs
	File: /terraform/google/container_cluster/EnableVPCFlowLogs.tf:11-89

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail-flowlogs
	File: /terraform/google/container_cluster/EnableVPCFlowLogs.tf:11-89

Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	PASSED for resource: google_container_cluster.fail-flowlogs
	File: /terraform/google/container_cluster/EnableVPCFlowLogs.tf:11-89

Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	PASSED for resource: google_container_cluster.fail-flowlogs
	File: /terraform/google/container_cluster/EnableVPCFlowLogs.tf:11-89

Check: CKV_GCP_68: "Ensure Secure Boot for Shielded GKE Nodes is Enabled"
	PASSED for resource: google_container_cluster.fail-flowlogs
	File: /terraform/google/container_cluster/EnableVPCFlowLogs.tf:11-89

Check: CKV_GCP_72: "Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled"
	PASSED for resource: google_container_cluster.fail-flowlogs
	File: /terraform/google/container_cluster/EnableVPCFlowLogs.tf:11-89

Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	PASSED for resource: google_container_cluster.fail-flowlogs
	File: /terraform/google/container_cluster/EnableVPCFlowLogs.tf:11-89

Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail-flowlogs
	File: /terraform/google/container_cluster/EnableVPCFlowLogs.tf:11-89

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/IntegrityMonitoring.tf:1-78

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/IntegrityMonitoring.tf:1-78

Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/IntegrityMonitoring.tf:1-78

Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/IntegrityMonitoring.tf:1-78

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/IntegrityMonitoring.tf:1-78

Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/IntegrityMonitoring.tf:1-78

Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/IntegrityMonitoring.tf:1-78

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/IntegrityMonitoring.tf:1-78

Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/IntegrityMonitoring.tf:1-78

Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/IntegrityMonitoring.tf:1-78

Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/IntegrityMonitoring.tf:1-78

Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/IntegrityMonitoring.tf:1-78

Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	PASSED for resource: google_container_node_pool.fail
	File: /terraform/google/container_cluster/IntegrityMonitoring.tf:80-108

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/PrivateNodes.tf:2-10

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/PrivateNodes.tf:2-10

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/PrivateNodes.tf:2-10

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/PrivateNodes.tf:2-10

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/RBAC.tf:2-17

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/RBAC.tf:2-17

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/RBAC.tf:2-17

Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/RBAC.tf:2-17

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/RBAC.tf:2-17

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/ReleaseChannel.tf:2-17

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/ReleaseChannel.tf:2-17

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/ReleaseChannel.tf:2-17

Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/ReleaseChannel.tf:2-17

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/ReleaseChannel.tf:2-17

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/ShieldedNodes.tf:2-74

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/ShieldedNodes.tf:2-74

Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/ShieldedNodes.tf:2-74

Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/ShieldedNodes.tf:2-74

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/ShieldedNodes.tf:2-74

Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/ShieldedNodes.tf:2-74

Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/ShieldedNodes.tf:2-74

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/ShieldedNodes.tf:2-74

Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/ShieldedNodes.tf:2-74

Check: CKV_GCP_72: "Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/ShieldedNodes.tf:2-74

Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/ShieldedNodes.tf:2-74

Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/ShieldedNodes.tf:2-74

Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/ShieldedNodes.tf:2-74

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/container_cluster.tf:2-75

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/container_cluster.tf:2-75

Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/container_cluster.tf:2-75

Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/container_cluster.tf:2-75

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/container_cluster.tf:2-75

Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/container_cluster.tf:2-75

Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/container_cluster.tf:2-75

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/container_cluster.tf:2-75

Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/container_cluster.tf:2-75

Check: CKV_GCP_72: "Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/container_cluster.tf:2-75

Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/container_cluster.tf:2-75

Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/container_cluster.tf:2-75

Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/container_cluster.tf:2-75

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/legacy.tf:2-17

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/legacy.tf:2-17

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/legacy.tf:2-17

Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/legacy.tf:2-17

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/legacy.tf:2-17

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/metadata_enabled.tf:2-17

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/metadata_enabled.tf:2-17

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/metadata_enabled.tf:2-17

Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/metadata_enabled.tf:2-17

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/metadata_enabled.tf:2-17

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/shielded.tf:2-74

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/shielded.tf:2-74

Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/shielded.tf:2-74

Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/shielded.tf:2-74

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/shielded.tf:2-74

Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/shielded.tf:2-74

Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/shielded.tf:2-74

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/shielded.tf:2-74

Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/shielded.tf:2-74

Check: CKV_GCP_72: "Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/shielded.tf:2-74

Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/shielded.tf:2-74

Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/shielded.tf:2-74

Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/shielded.tf:2-74

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/GKEAliasIpEnabled.tf:1-3

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/GKEAliasIpEnabled.tf:1-3

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/GKEAliasIpEnabled.tf:1-3

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/GKEAliasIpEnabled.tf:1-3

Check: CKV_GCP_10: "Ensure 'Automatic node upgrade' is enabled for Kubernetes Clusters"
	PASSED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/GKEUseCosImage.tf:2-58

Check: CKV_GCP_68: "Ensure Secure Boot for Shielded GKE Nodes is Enabled"
	PASSED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/GKEUseCosImage.tf:2-58

Check: CKV_GCP_72: "Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled"
	PASSED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/GKEUseCosImage.tf:2-58

Check: CKV_GCP_9: "Ensure 'Automatic node repair' is enabled for Kubernetes Clusters"
	PASSED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/GKEUseCosImage.tf:2-58

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/container_cluster.tf:23-38

Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	PASSED for resource: google_container_cluster.fail-public
	File: /terraform/google/gke/container_cluster_public.tf:21-36

Check: CKV_GCP_72: "Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled"
	PASSED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/container_node_pool.tf:9-27

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-repair.tf:8-17

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-repair.tf:8-17

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-repair.tf:8-17

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-repair.tf:8-17

Check: CKV_GCP_72: "Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled"
	PASSED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/enable-auto-repair.tf:19-37

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-upgrade.tf:7-16

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-upgrade.tf:7-16

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-upgrade.tf:7-16

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-upgrade.tf:7-16

Check: CKV_GCP_72: "Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled"
	PASSED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/enable-auto-upgrade.tf:18-36

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-ip-aliasing.tf:8-17

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-ip-aliasing.tf:8-17

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-ip-aliasing.tf:8-17

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-ip-aliasing.tf:8-17

Check: CKV_GCP_72: "Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled"
	PASSED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-ip-aliasing.tf:19-35

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-master-networks.tf:7-16

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-master-networks.tf:7-16

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-master-networks.tf:7-16

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-master-networks.tf:7-16

Check: CKV_GCP_72: "Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled"
	PASSED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-master-networks.tf:18-34

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-network-policy.tf:8-20

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-network-policy.tf:8-20

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-network-policy.tf:8-20

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-network-policy.tf:8-20

Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-network-policy.tf:8-20

Check: CKV_GCP_72: "Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled"
	PASSED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-network-policy.tf:22-38

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-private-cluster.tf:7-19

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-private-cluster.tf:7-19

Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-private-cluster.tf:7-19

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-private-cluster.tf:7-19

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-private-cluster.tf:7-19

Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-private-cluster.tf:7-19

Check: CKV_GCP_72: "Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled"
	PASSED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-private-cluster.tf:21-37

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-logging.tf:8-18

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-logging.tf:8-18

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-logging.tf:8-18

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-logging.tf:8-18

Check: CKV_GCP_72: "Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled"
	PASSED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-stackdriver-logging.tf:20-36

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-monitoring.tf:8-18

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-monitoring.tf:8-18

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-monitoring.tf:8-18

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-monitoring.tf:8-18

Check: CKV_GCP_72: "Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled"
	PASSED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-stackdriver-monitoring.tf:20-36

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enforce-pod-security-policy.tf:3-7

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enforce-pod-security-policy.tf:3-7

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enforce-pod-security-policy.tf:3-7

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enforce-pod-security-policy.tf:3-7

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/metadata-endpoints-disabled.tf:2-6

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/metadata-endpoints-disabled.tf:2-6

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/metadata-endpoints-disabled.tf:2-6

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/metadata-endpoints-disabled.tf:2-6

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.good_example
	File: /terraform/google/gke/no-legacy-auth.tf:8-22

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.good_example
	File: /terraform/google/gke/no-legacy-auth.tf:8-22

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.good_example
	File: /terraform/google/gke/no-legacy-auth.tf:8-22

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.good_example
	File: /terraform/google/gke/no-legacy-auth.tf:8-22

Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.good_example
	File: /terraform/google/gke/no-legacy-auth.tf:8-22

Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	PASSED for resource: google_container_cluster.good_example
	File: /terraform/google/gke/no-legacy-auth.tf:8-22

Check: CKV_GCP_72: "Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled"
	PASSED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/no-legacy-auth.tf:24-40

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/no-legacy-authentication.tf:2-3

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/no-legacy-authentication.tf:2-3

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/no-legacy-authentication.tf:2-3

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/no-legacy-authentication.tf:2-3

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.gke
	File: /terraform/google/gke/no-legacy-authentication.tf:5-13

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.gke
	File: /terraform/google/gke/no-legacy-authentication.tf:5-13

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.gke
	File: /terraform/google/gke/no-legacy-authentication.tf:5-13

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.gke
	File: /terraform/google/gke/no-legacy-authentication.tf:5-13

Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.gke
	File: /terraform/google/gke/no-legacy-authentication.tf:5-13

Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	PASSED for resource: google_container_cluster.gke
	File: /terraform/google/gke/no-legacy-authentication.tf:5-13

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.primary
	File: /terraform/google/gke/no-public-control-plane.tf:8-23

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.primary
	File: /terraform/google/gke/no-public-control-plane.tf:8-23

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.primary
	File: /terraform/google/gke/no-public-control-plane.tf:8-23

Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	PASSED for resource: google_container_cluster.primary
	File: /terraform/google/gke/no-public-control-plane.tf:8-23

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.primary
	File: /terraform/google/gke/no-public-control-plane.tf:8-23

Check: CKV_GCP_72: "Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled"
	PASSED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/no-public-control-plane.tf:25-41

Check: CKV_GCP_72: "Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled"
	PASSED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/node-metadata-security.tf:3-9

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.primary
	File: /terraform/google/gke/node-pool-uses-cos.tf:7-16

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.primary
	File: /terraform/google/gke/node-pool-uses-cos.tf:7-16

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.primary
	File: /terraform/google/gke/node-pool-uses-cos.tf:7-16

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.primary
	File: /terraform/google/gke/node-pool-uses-cos.tf:7-16

Check: CKV_GCP_72: "Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled"
	PASSED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/node-pool-uses-cos.tf:18-34

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/node-shielding-enabled.tf:3-5

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/node-shielding-enabled.tf:3-5

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/node-shielding-enabled.tf:3-5

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/node-shielding-enabled.tf:3-5

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-cluster-labels.tf:8-17

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-cluster-labels.tf:8-17

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-cluster-labels.tf:8-17

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-cluster-labels.tf:8-17

Check: CKV_GCP_72: "Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled"
	PASSED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/use-cluster-labels.tf:19-35

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-rbac-permissions.tf:3-5

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-rbac-permissions.tf:3-5

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-rbac-permissions.tf:3-5

Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-service-account.tf:3-6

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-service-account.tf:3-6

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-service-account.tf:3-6

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-service-account.tf:3-6

Check: CKV_GCP_72: "Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled"
	PASSED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-service-account.tf:3-6

Check: CKV_GCP_44: "Ensure no roles that enable to impersonate and manage all service accounts are used at a folder level"
	PASSED for resource: google_folder_iam_member.folder-123
	File: /terraform/google/iam/no-folder-level-default-service-account-assignment.tf:2-6

Check: CKV_GCP_48: "Ensure Default Service account is not used at a folder level"
	PASSED for resource: google_folder_iam_binding.folder-123
	File: /terraform/google/iam/no-folder-level-service-account-impersonation.tf:2-5

Check: CKV_GCP_45: "Ensure no roles that enable to impersonate and manage all service accounts are used at an organization level"
	PASSED for resource: google_organization_iam_member.org-123
	File: /terraform/google/iam/no-org-level-default-service-account-assignment.tf:2-6

Check: CKV_GCP_47: "Ensure default service account is not used at an organization level"
	PASSED for resource: google_organization_iam_binding.organization-123
	File: /terraform/google/iam/no-org-level-service-account-impersonation.tf:3-6

Check: CKV_GCP_41: "Ensure that IAM users are not assigned the Service Account User or Service Account Token Creator roles at project level"
	PASSED for resource: google_project_iam_member.project
	File: /terraform/google/iam/no-privileged-service-accounts.tf:7-11

Check: CKV_GCP_42: "Ensure that Service Account has no Admin privileges"
	PASSED for resource: google_project_iam_member.project
	File: /terraform/google/iam/no-privileged-service-accounts.tf:7-11

Check: CKV_GCP_46: "Ensure Default Service account is not used at a project level"
	PASSED for resource: google_project_iam_member.project
	File: /terraform/google/iam/no-privileged-service-accounts.tf:7-11

Check: CKV_GCP_41: "Ensure that IAM users are not assigned the Service Account User or Service Account Token Creator roles at project level"
	PASSED for resource: google_project_iam_member.project-123
	File: /terraform/google/iam/no-project-level-default-service-account-assignment.tf:2-6

Check: CKV_GCP_42: "Ensure that Service Account has no Admin privileges"
	PASSED for resource: google_project_iam_member.project-123
	File: /terraform/google/iam/no-project-level-default-service-account-assignment.tf:2-6

Check: CKV_GCP_49: "Ensure no roles that enable to impersonate and manage all service accounts are used at a project level"
	PASSED for resource: google_project_iam_member.project-123
	File: /terraform/google/iam/no-project-level-default-service-account-assignment.tf:2-6

Check: CKV_GCP_46: "Ensure Default Service account is not used at a project level"
	PASSED for resource: google_project_iam_binding.project-123
	File: /terraform/google/iam/no-project-level-service-account-impersonation.tf:2-5

Check: CKV_GCP_49: "Ensure no roles that enable to impersonate and manage all service accounts are used at a project level"
	PASSED for resource: google_project_iam_binding.fail
	File: /terraform/google/iam/no-user-granted-permissions.tf:2-6

Check: CKV_GCP_46: "Ensure Default Service account is not used at a project level"
	PASSED for resource: google_project_iam_binding.fail
	File: /terraform/google/iam/no-user-granted-permissions.tf:2-6

Check: CKV_GCP_42: "Ensure that Service Account has no Admin privileges"
	PASSED for resource: google_project_iam_member.fail
	File: /terraform/google/iam/no-user-granted-permissions.tf:8-10

Check: CKV_GCP_49: "Ensure no roles that enable to impersonate and manage all service accounts are used at a project level"
	PASSED for resource: google_project_iam_member.fail
	File: /terraform/google/iam/no-user-granted-permissions.tf:8-10

Check: CKV_GCP_46: "Ensure Default Service account is not used at a project level"
	PASSED for resource: google_project_iam_member.fail
	File: /terraform/google/iam/no-user-granted-permissions.tf:8-10

Check: CKV_GCP_41: "Ensure that IAM users are not assigned the Service Account User or Service Account Token Creator roles at project level"
	PASSED for resource: google_project_iam_binding.project
	File: /terraform/google/project/ProjectImpersonationRoles.tf:2-10

Check: CKV_GCP_42: "Ensure that Service Account has no Admin privileges"
	PASSED for resource: google_project_iam_member.project
	File: /terraform/google/project/RoleServiceAccountUser.tf:7-11

Check: CKV_GCP_46: "Ensure Default Service account is not used at a project level"
	PASSED for resource: google_project_iam_member.project
	File: /terraform/google/project/RoleServiceAccountUser.tf:7-11

Check: CKV_GCP_41: "Ensure that IAM users are not assigned the Service Account User or Service Account Token Creator roles at project level"
	PASSED for resource: google_project_iam_binding.fail-service
	File: /terraform/google/project/project_iam_binding.tf:4-12

Check: CKV_GCP_41: "Ensure that IAM users are not assigned the Service Account User or Service Account Token Creator roles at project level"
	PASSED for resource: google_project_iam_member.fail
	File: /terraform/google/project/project_iam_member.tf:8-12

Check: CKV_GCP_46: "Ensure Default Service account is not used at a project level"
	PASSED for resource: google_project_iam_member.fail
	File: /terraform/google/project/project_iam_member.tf:8-12

Check: CKV_GCP_52: "Ensure PostgreSQL database 'log_connections' flag is set to 'on'"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudMySqlLocalInfileOff.tf:15-34

Check: CKV_GCP_58: "Ensure SQL database 'cross db ownership chaining' flag is set to 'off'"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudMySqlLocalInfileOff.tf:15-34

Check: CKV_GCP_56: "Ensure PostgreSQL database 'log_temp_files flag is set to '0'"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudMySqlLocalInfileOff.tf:15-34

Check: CKV_GCP_51: "Ensure PostgreSQL database 'log_checkpoints' flag is set to 'on'"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudMySqlLocalInfileOff.tf:15-34

Check: CKV_GCP_53: "Ensure PostgreSQL database 'log_disconnections' flag is set to 'on'"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudMySqlLocalInfileOff.tf:15-34

Check: CKV_GCP_60: "Ensure SQL database do not have public IP"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudMySqlLocalInfileOff.tf:15-34

Check: CKV_GCP_55: "Ensure PostgreSQL database 'log_min_messages' flag is set to a valid value"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudMySqlLocalInfileOff.tf:15-34

Check: CKV_GCP_59: "Ensure SQL database 'contained database authentication' flag is set to 'off'"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudMySqlLocalInfileOff.tf:15-34

Check: CKV_GCP_57: "Ensure PostgreSQL database 'log_min_duration_statement' flag is set to '-1'"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudMySqlLocalInfileOff.tf:15-34

Check: CKV_GCP_54: "Ensure PostgreSQL database 'log_lock_waits' flag is set to 'on'"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudMySqlLocalInfileOff.tf:15-34

Check: CKV_GCP_11: "Ensure that Cloud SQL database Instances are not open to the world"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudMySqlLocalInfileOff.tf:15-34

Check: CKV_GCP_58: "Ensure SQL database 'cross db ownership chaining' flag is set to 'off'"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudPostgreSql.tf:19-77

Check: CKV_GCP_60: "Ensure SQL database do not have public IP"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudPostgreSql.tf:19-77

Check: CKV_GCP_59: "Ensure SQL database 'contained database authentication' flag is set to 'off'"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudPostgreSql.tf:19-77

Check: CKV_GCP_50: "Ensure MySQL database 'local_infile' flag is set to 'off'"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudPostgreSql.tf:19-77

Check: CKV_GCP_11: "Ensure that Cloud SQL database Instances are not open to the world"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudPostgreSql.tf:19-77

Check: CKV_GCP_52: "Ensure PostgreSQL database 'log_connections' flag is set to 'on'"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerContainedDBAuthentication.tf:2-53

Check: CKV_GCP_56: "Ensure PostgreSQL database 'log_temp_files flag is set to '0'"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerContainedDBAuthentication.tf:2-53

Check: CKV_GCP_51: "Ensure PostgreSQL database 'log_checkpoints' flag is set to 'on'"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerContainedDBAuthentication.tf:2-53

Check: CKV_GCP_53: "Ensure PostgreSQL database 'log_disconnections' flag is set to 'on'"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerContainedDBAuthentication.tf:2-53

Check: CKV_GCP_55: "Ensure PostgreSQL database 'log_min_messages' flag is set to a valid value"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerContainedDBAuthentication.tf:2-53

Check: CKV_GCP_50: "Ensure MySQL database 'local_infile' flag is set to 'off'"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerContainedDBAuthentication.tf:2-53

Check: CKV_GCP_57: "Ensure PostgreSQL database 'log_min_duration_statement' flag is set to '-1'"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerContainedDBAuthentication.tf:2-53

Check: CKV_GCP_54: "Ensure PostgreSQL database 'log_lock_waits' flag is set to 'on'"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerContainedDBAuthentication.tf:2-53

Check: CKV_GCP_14: "Ensure all Cloud SQL database instance have backup configuration enabled"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerContainedDBAuthentication.tf:2-53

Check: CKV_GCP_11: "Ensure that Cloud SQL database Instances are not open to the world"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerContainedDBAuthentication.tf:2-53

Check: CKV_GCP_52: "Ensure PostgreSQL database 'log_connections' flag is set to 'on'"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerCrossDBOwnershipChaining.tf:2-53

Check: CKV_GCP_56: "Ensure PostgreSQL database 'log_temp_files flag is set to '0'"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerCrossDBOwnershipChaining.tf:2-53

Check: CKV_GCP_51: "Ensure PostgreSQL database 'log_checkpoints' flag is set to 'on'"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerCrossDBOwnershipChaining.tf:2-53

Check: CKV_GCP_53: "Ensure PostgreSQL database 'log_disconnections' flag is set to 'on'"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerCrossDBOwnershipChaining.tf:2-53

Check: CKV_GCP_55: "Ensure PostgreSQL database 'log_min_messages' flag is set to a valid value"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerCrossDBOwnershipChaining.tf:2-53

Check: CKV_GCP_59: "Ensure SQL database 'contained database authentication' flag is set to 'off'"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerCrossDBOwnershipChaining.tf:2-53

Check: CKV_GCP_50: "Ensure MySQL database 'local_infile' flag is set to 'off'"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerCrossDBOwnershipChaining.tf:2-53

Check: CKV_GCP_57: "Ensure PostgreSQL database 'log_min_duration_statement' flag is set to '-1'"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerCrossDBOwnershipChaining.tf:2-53

Check: CKV_GCP_54: "Ensure PostgreSQL database 'log_lock_waits' flag is set to 'on'"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerCrossDBOwnershipChaining.tf:2-53

Check: CKV_GCP_14: "Ensure all Cloud SQL database instance have backup configuration enabled"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerCrossDBOwnershipChaining.tf:2-53

Check: CKV_GCP_11: "Ensure that Cloud SQL database Instances are not open to the world"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerCrossDBOwnershipChaining.tf:2-53

Check: CKV_GCP_52: "Ensure PostgreSQL database 'log_connections' flag is set to 'on'"
	PASSED for resource: google_sql_database_instance.tfer--general-002D-sqlserver12
	File: /terraform/google/sql/CloudSqlServerNoPublicIP.tf:2-55

Check: CKV_GCP_56: "Ensure PostgreSQL database 'log_temp_files flag is set to '0'"
	PASSED for resource: google_sql_database_instance.tfer--general-002D-sqlserver12
	File: /terraform/google/sql/CloudSqlServerNoPublicIP.tf:2-55

Check: CKV_GCP_51: "Ensure PostgreSQL database 'log_checkpoints' flag is set to 'on'"
	PASSED for resource: google_sql_database_instance.tfer--general-002D-sqlserver12
	File: /terraform/google/sql/CloudSqlServerNoPublicIP.tf:2-55

Check: CKV_GCP_53: "Ensure PostgreSQL database 'log_disconnections' flag is set to 'on'"
	PASSED for resource: google_sql_database_instance.tfer--general-002D-sqlserver12
	File: /terraform/google/sql/CloudSqlServerNoPublicIP.tf:2-55

Check: CKV_GCP_55: "Ensure PostgreSQL database 'log_min_messages' flag is set to a valid value"
	PASSED for resource: google_sql_database_instance.tfer--general-002D-sqlserver12
	File: /terraform/google/sql/CloudSqlServerNoPublicIP.tf:2-55

Check: CKV_GCP_50: "Ensure MySQL database 'local_infile' flag is set to 'off'"
	PASSED for resource: google_sql_database_instance.tfer--general-002D-sqlserver12
	File: /terraform/google/sql/CloudSqlServerNoPublicIP.tf:2-55

Check: CKV_GCP_57: "Ensure PostgreSQL database 'log_min_duration_statement' flag is set to '-1'"
	PASSED for resource: google_sql_database_instance.tfer--general-002D-sqlserver12
	File: /terraform/google/sql/CloudSqlServerNoPublicIP.tf:2-55

Check: CKV_GCP_54: "Ensure PostgreSQL database 'log_lock_waits' flag is set to 'on'"
	PASSED for resource: google_sql_database_instance.tfer--general-002D-sqlserver12
	File: /terraform/google/sql/CloudSqlServerNoPublicIP.tf:2-55

Check: CKV_GCP_14: "Ensure all Cloud SQL database instance have backup configuration enabled"
	PASSED for resource: google_sql_database_instance.tfer--general-002D-sqlserver12
	File: /terraform/google/sql/CloudSqlServerNoPublicIP.tf:2-55

Check: CKV_GCP_11: "Ensure that Cloud SQL database Instances are not open to the world"
	PASSED for resource: google_sql_database_instance.tfer--general-002D-sqlserver12
	File: /terraform/google/sql/CloudSqlServerNoPublicIP.tf:2-55

Check: CKV_GCP_52: "Ensure PostgreSQL database 'log_connections' flag is set to 'on'"
	PASSED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/SQL-no-cross-db-ownership-chaining.tf:2-6

Check: CKV_GCP_58: "Ensure SQL database 'cross db ownership chaining' flag is set to 'off'"
	PASSED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/SQL-no-cross-db-ownership-chaining.tf:2-6

Check: CKV_GCP_56: "Ensure PostgreSQL database 'log_temp_files flag is set to '0'"
	PASSED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/SQL-no-cross-db-ownership-chaining.tf:2-6

Check: CKV_GCP_51: "Ensure PostgreSQL database 'log_checkpoints' flag is set to 'on'"
	PASSED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/SQL-no-cross-db-ownership-chaining.tf:2-6

Check: CKV_GCP_53: "Ensure PostgreSQL database 'log_disconnections' flag is set to 'on'"
	PASSED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/SQL-no-cross-db-ownership-chaining.tf:2-6

Check: CKV_GCP_60: "Ensure SQL database do not have public IP"
	PASSED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/SQL-no-cross-db-ownership-chaining.tf:2-6

Check: CKV_GCP_55: "Ensure PostgreSQL database 'log_min_messages' flag is set to a valid value"
	PASSED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/SQL-no-cross-db-ownership-chaining.tf:2-6

Check: CKV_GCP_59: "Ensure SQL database 'contained database authentication' flag is set to 'off'"
	PASSED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/SQL-no-cross-db-ownership-chaining.tf:2-6

Check: CKV_GCP_50: "Ensure MySQL database 'local_infile' flag is set to 'off'"
	PASSED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/SQL-no-cross-db-ownership-chaining.tf:2-6

Check: CKV_GCP_57: "Ensure PostgreSQL database 'log_min_duration_statement' flag is set to '-1'"
	PASSED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/SQL-no-cross-db-ownership-chaining.tf:2-6

Check: CKV_GCP_54: "Ensure PostgreSQL database 'log_lock_waits' flag is set to 'on'"
	PASSED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/SQL-no-cross-db-ownership-chaining.tf:2-6

Check: CKV_GCP_11: "Ensure that Cloud SQL database Instances are not open to the world"
	PASSED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/SQL-no-cross-db-ownership-chaining.tf:2-6

Check: CKV_GCP_52: "Ensure PostgreSQL database 'log_connections' flag is set to 'on'"
	PASSED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/mysql-no-local-infile.tf:3-13

Check: CKV_GCP_58: "Ensure SQL database 'cross db ownership chaining' flag is set to 'off'"
	PASSED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/mysql-no-local-infile.tf:3-13

Check: CKV_GCP_56: "Ensure PostgreSQL database 'log_temp_files flag is set to '0'"
	PASSED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/mysql-no-local-infile.tf:3-13

Check: CKV_GCP_51: "Ensure PostgreSQL database 'log_checkpoints' flag is set to 'on'"
	PASSED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/mysql-no-local-infile.tf:3-13

Check: CKV_GCP_53: "Ensure PostgreSQL database 'log_disconnections' flag is set to 'on'"
	PASSED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/mysql-no-local-infile.tf:3-13

Check: CKV_GCP_60: "Ensure SQL database do not have public IP"
	PASSED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/mysql-no-local-infile.tf:3-13

Check: CKV_GCP_55: "Ensure PostgreSQL database 'log_min_messages' flag is set to a valid value"
	PASSED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/mysql-no-local-infile.tf:3-13

Check: CKV_GCP_59: "Ensure SQL database 'contained database authentication' flag is set to 'off'"
	PASSED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/mysql-no-local-infile.tf:3-13

Check: CKV_GCP_57: "Ensure PostgreSQL database 'log_min_duration_statement' flag is set to '-1'"
	PASSED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/mysql-no-local-infile.tf:3-13

Check: CKV_GCP_54: "Ensure PostgreSQL database 'log_lock_waits' flag is set to 'on'"
	PASSED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/mysql-no-local-infile.tf:3-13

Check: CKV_GCP_11: "Ensure that Cloud SQL database Instances are not open to the world"
	PASSED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/mysql-no-local-infile.tf:3-13

Check: CKV_GCP_52: "Ensure PostgreSQL database 'log_connections' flag is set to 'on'"
	PASSED for resource: google_sql_database_instance.instance1-fail
	File: /terraform/google/sql/sql_database_instance.tf:1-24

Check: CKV_GCP_58: "Ensure SQL database 'cross db ownership chaining' flag is set to 'off'"
	PASSED for resource: google_sql_database_instance.instance1-fail
	File: /terraform/google/sql/sql_database_instance.tf:1-24

Check: CKV_GCP_56: "Ensure PostgreSQL database 'log_temp_files flag is set to '0'"
	PASSED for resource: google_sql_database_instance.instance1-fail
	File: /terraform/google/sql/sql_database_instance.tf:1-24

Check: CKV_GCP_51: "Ensure PostgreSQL database 'log_checkpoints' flag is set to 'on'"
	PASSED for resource: google_sql_database_instance.instance1-fail
	File: /terraform/google/sql/sql_database_instance.tf:1-24

Check: CKV_GCP_53: "Ensure PostgreSQL database 'log_disconnections' flag is set to 'on'"
	PASSED for resource: google_sql_database_instance.instance1-fail
	File: /terraform/google/sql/sql_database_instance.tf:1-24

Check: CKV_GCP_60: "Ensure SQL database do not have public IP"
	PASSED for resource: google_sql_database_instance.instance1-fail
	File: /terraform/google/sql/sql_database_instance.tf:1-24

Check: CKV_GCP_55: "Ensure PostgreSQL database 'log_min_messages' flag is set to a valid value"
	PASSED for resource: google_sql_database_instance.instance1-fail
	File: /terraform/google/sql/sql_database_instance.tf:1-24

Check: CKV_GCP_59: "Ensure SQL database 'contained database authentication' flag is set to 'off'"
	PASSED for resource: google_sql_database_instance.instance1-fail
	File: /terraform/google/sql/sql_database_instance.tf:1-24

Check: CKV_GCP_50: "Ensure MySQL database 'local_infile' flag is set to 'off'"
	PASSED for resource: google_sql_database_instance.instance1-fail
	File: /terraform/google/sql/sql_database_instance.tf:1-24

Check: CKV_GCP_57: "Ensure PostgreSQL database 'log_min_duration_statement' flag is set to '-1'"
	PASSED for resource: google_sql_database_instance.instance1-fail
	File: /terraform/google/sql/sql_database_instance.tf:1-24

Check: CKV_GCP_54: "Ensure PostgreSQL database 'log_lock_waits' flag is set to 'on'"
	PASSED for resource: google_sql_database_instance.instance1-fail
	File: /terraform/google/sql/sql_database_instance.tf:1-24

Check: CKV_GCP_62: "Bucket should log access"
	PASSED for resource: google_storage_bucket.static-site
	File: /terraform/google/storage/CloudStorageSelfLogging.tf:2-9

Check: CKV_OCI_16: "Ensure VCN has an inbound security list"
	PASSED for resource: oci_core_security_list.fail
	File: /terraform/oracle/core_security_list/stateless.tf:2-10

Check: CKV2_AZURE_19: "Ensure that Azure Synapse workspaces have no IP firewall rules attached"
	PASSED for resource: azurerm_synapse_workspace.example
	File: /terraform/azurerm/synapse/SynapseWorkspaceEnablesManagedVirtualNetworks.tf:2-19

Check: CKV2_AZURE_19: "Ensure that Azure Synapse workspaces have no IP firewall rules attached"
	PASSED for resource: azurerm_synapse_workspace.fail
	File: /terraform/azurerm/synapse/virtual-network-enabled.tf:2-19

Check: CKV_AZURE_23: "Ensure that 'Auditing' is set to 'On' for SQL servers"
	PASSED for resource: azurerm_sql_server.example
	File: /terraform/azurerm/mssql/SQLServerAuditingRetention90Days.tf:2-15

Check: CKV2_AZURE_14: "Ensure that Unattached disks are encrypted"
	PASSED for resource: azurerm_virtual_machine.fail
	File: /terraform/azurerm/compute/ssh-authentication.tf:2-6

Check: CKV2_AZURE_14: "Ensure that Unattached disks are encrypted"
	PASSED for resource: azurerm_virtual_machine.secret
	File: /terraform/azurerm/vms/VMCredsInCustomData.tf:2-11

Check: CKV2_AZURE_13: "Ensure that sql servers enables data security policy"
	PASSED for resource: azurerm_sql_server.fail
	File: /terraform/azurerm/database/enable-audit.tf:3-10

Check: CKV2_AZURE_13: "Ensure that sql servers enables data security policy"
	PASSED for resource: azurerm_sql_server.example
	File: /terraform/azurerm/mssql/SQLServerAuditingRetention90Days.tf:2-15

Check: CKV_AZURE_119: "Ensure that Network Interfaces don't use public IPs"
	PASSED for resource: azurerm_network_interface.example
	File: /terraform/azurerm/network/NetworkInterfaceEnableIPForwarding.tf:2-13

Check: CKV2_AZURE_6: "Ensure 'Allow access to Azure services' for PostgreSQL Database Server is disabled"
	PASSED for resource: azurerm_sql_server.fail
	File: /terraform/azurerm/database/enable-audit.tf:3-10

Check: CKV2_AZURE_6: "Ensure 'Allow access to Azure services' for PostgreSQL Database Server is disabled"
	PASSED for resource: azurerm_sql_server.example
	File: /terraform/azurerm/mssql/SQLServerAuditingRetention90Days.tf:2-15

Check: CKV2_AZURE_2: "Ensure that Vulnerability Assessment (VA) is enabled on a SQL server by setting a Storage Account"
	PASSED for resource: azurerm_sql_server.example
	File: /terraform/azurerm/mssql/SQLServerAuditingRetention90Days.tf:2-15

Check: CKV2_GCP_7: "Ensure that a MySQL database instance does not allow anyone to connect with administrative privileges"
	PASSED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerCrossDBOwnershipChaining.tf:2-53

Check: CKV2_GCP_7: "Ensure that a MySQL database instance does not allow anyone to connect with administrative privileges"
	PASSED for resource: google_sql_database_instance.tfer--general-002D-sqlserver12
	File: /terraform/google/sql/CloudSqlServerNoPublicIP.tf:2-55

Check: CKV2_GCP_7: "Ensure that a MySQL database instance does not allow anyone to connect with administrative privileges"
	PASSED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/mysql-no-local-infile.tf:3-13

Check: CKV2_GCP_7: "Ensure that a MySQL database instance does not allow anyone to connect with administrative privileges"
	PASSED for resource: google_sql_database_instance.instance1-fail
	File: /terraform/google/sql/sql_database_instance.tf:1-24

Check: CKV2_AWS_20: "Ensure that ALB redirects HTTP requests into HTTPS ones"
	PASSED for resource: aws_alb.fail
	File: /terraform/aws/elb/alb.tf:12-24

Check: CKV2_AWS_20: "Ensure that ALB redirects HTTP requests into HTTPS ones"
	PASSED for resource: aws_alb.disabled
	File: /terraform/aws/lb/lb.tf:12-17

Check: CKV2_AWS_29: "Ensure public API gateway are protected by WAF"
	PASSED for resource: aws_api_gateway_stage.fail
	File: /terraform/aws/api-gateway/api_gateway_stage.tf:13-18

Check: CKV_AWS_59: "Ensure there is no open access to back-end resources through API"
	FAILED for resource: aws_api_gateway_method.fail
	File: /terraform/aws/api-gateway/api_gateway_method.tf:4-9

		4 | resource "aws_api_gateway_method" "fail" {
		5 |   rest_api_id   = aws_api_gateway_rest_api.MyDemoAPI.id
		6 |   resource_id   = aws_api_gateway_resource.MyDemoResource.id
		7 |   http_method   = "GET"
		8 |   authorization = "NONE"
		9 | }


Check: CKV_AWS_120: "Ensure API Gateway caching is enabled"
	FAILED for resource: aws_api_gateway_stage.fail
	File: /terraform/aws/api-gateway/api_gateway_rest_api.tf:13-15

		13 | resource "aws_api_gateway_stage" "fail" {
		14 |   name = "example"
		15 | }


Check: CKV_AWS_73: "Ensure API Gateway has X-Ray Tracing enabled"
	FAILED for resource: aws_api_gateway_stage.fail
	File: /terraform/aws/api-gateway/api_gateway_rest_api.tf:13-15

		13 | resource "aws_api_gateway_stage" "fail" {
		14 |   name = "example"
		15 | }


Check: CKV_AWS_76: "Ensure API Gateway has Access Logging enabled"
	FAILED for resource: aws_api_gateway_stage.fail
	File: /terraform/aws/api-gateway/api_gateway_rest_api.tf:13-15

		13 | resource "aws_api_gateway_stage" "fail" {
		14 |   name = "example"
		15 | }


Check: CKV_AWS_120: "Ensure API Gateway caching is enabled"
	FAILED for resource: aws_api_gateway_stage.fail
	File: /terraform/aws/api-gateway/api_gateway_stage.tf:13-18

		13 | resource "aws_api_gateway_stage" "fail" {
		14 |   deployment_id        = aws_api_gateway_deployment.example.id
		15 |   rest_api_id          = aws_api_gateway_rest_api.example.id
		16 |   stage_name           = "example"
		17 |   xray_tracing_enabled = false
		18 | }


Check: CKV_AWS_73: "Ensure API Gateway has X-Ray Tracing enabled"
	FAILED for resource: aws_api_gateway_stage.fail
	File: /terraform/aws/api-gateway/api_gateway_stage.tf:13-18

		13 | resource "aws_api_gateway_stage" "fail" {
		14 |   deployment_id        = aws_api_gateway_deployment.example.id
		15 |   rest_api_id          = aws_api_gateway_rest_api.example.id
		16 |   stage_name           = "example"
		17 |   xray_tracing_enabled = false
		18 | }


Check: CKV_AWS_76: "Ensure API Gateway has Access Logging enabled"
	FAILED for resource: aws_api_gateway_stage.fail
	File: /terraform/aws/api-gateway/api_gateway_stage.tf:13-18

		13 | resource "aws_api_gateway_stage" "fail" {
		14 |   deployment_id        = aws_api_gateway_deployment.example.id
		15 |   rest_api_id          = aws_api_gateway_rest_api.example.id
		16 |   stage_name           = "example"
		17 |   xray_tracing_enabled = false
		18 | }


Check: CKV_AWS_76: "Ensure API Gateway has Access Logging enabled"
	FAILED for resource: aws_apigatewayv2_stage.fail
	File: /terraform/aws/api-gateway/apigatewayv2_stage.tf:7-10

		7  | resource "aws_apigatewayv2_stage" "fail" {
		8  |   api_id = aws_apigatewayv2_api.example.id
		9  |   name   = "example-stage"
		10 | }


Check: CKV_AWS_77: "Ensure Athena Database is encrypted at rest (default is unencrypted)"
	FAILED for resource: aws_athena_database.fail
	File: /terraform/aws/athena/athena-database.tf:7-9

		7 | resource "aws_athena_database" "fail" {
		8 |   name = "wg-non-encrypted"
		9 | }


Check: CKV_AWS_82: "Ensure Athena Workgroup should enforce configuration to prevent client disabling encryption"
	FAILED for resource: aws_athena_workgroup.fail
	File: /terraform/aws/athena/athena-workgroup.tf:9-20

		9  | resource "aws_athena_workgroup" "fail" {
		10 |   name = "wg-non-encrypted"
		11 |
		12 |   configuration {
		13 |     enforce_workgroup_configuration    = false
		14 |     publish_cloudwatch_metrics_enabled = false
		15 |
		16 |     result_configuration {
		17 |       output_location = "s3://mys3bucket"
		18 |     }
		19 |   }
		20 | }


Check: CKV_AWS_159: "Ensure that Athena Workgroup is encrypted"
	FAILED for resource: aws_athena_workgroup.fail
	File: /terraform/aws/athena/athena-workgroup.tf:9-20

		9  | resource "aws_athena_workgroup" "fail" {
		10 |   name = "wg-non-encrypted"
		11 |
		12 |   configuration {
		13 |     enforce_workgroup_configuration    = false
		14 |     publish_cloudwatch_metrics_enabled = false
		15 |
		16 |     result_configuration {
		17 |       output_location = "s3://mys3bucket"
		18 |     }
		19 |   }
		20 | }


Check: CKV_AWS_82: "Ensure Athena Workgroup should enforce configuration to prevent client disabling encryption"
	FAILED for resource: aws_athena_workgroup.fail
	File: /terraform/aws/athena/no-encryption-override.tf:7-25

		7  | resource "aws_athena_workgroup" "fail" {
		8  |   name = "example"
		9  |
		10 |   configuration {
		11 |     //enforce_workgroup_configuration    = true
		12 |     enforce_workgroup_configuration    = false
		13 |     publish_cloudwatch_metrics_enabled = true
		14 |
		15 |     result_configuration {
		16 |       output_location = "s3://${aws_s3_bucket.example.bucket}/output/"
		17 |
		18 |       # encryption_configuration {
		19 |       #   encryption_option = "SSE_KMS"
		20 |       #   kms_key_arn       = aws_kms_key.example.arn
		21 |       # }
		22 |     }
		23 |
		24 |   }
		25 | }


Check: CKV_AWS_159: "Ensure that Athena Workgroup is encrypted"
	FAILED for resource: aws_athena_workgroup.fail
	File: /terraform/aws/athena/no-encryption-override.tf:7-25

		7  | resource "aws_athena_workgroup" "fail" {
		8  |   name = "example"
		9  |
		10 |   configuration {
		11 |     //enforce_workgroup_configuration    = true
		12 |     enforce_workgroup_configuration    = false
		13 |     publish_cloudwatch_metrics_enabled = true
		14 |
		15 |     result_configuration {
		16 |       output_location = "s3://${aws_s3_bucket.example.bucket}/output/"
		17 |
		18 |       # encryption_configuration {
		19 |       #   encryption_option = "SSE_KMS"
		20 |       #   kms_key_arn       = aws_kms_key.example.arn
		21 |       # }
		22 |     }
		23 |
		24 |   }
		25 | }


Check: CKV_AWS_153: "Autoscaling groups should supply tags to launch configurations"
	FAILED for resource: aws_autoscaling_group.fail
	File: /terraform/aws/autoscaling/autoscaling.tf:4-10

		4  | resource "aws_autoscaling_group" "fail" {
		5  |   name                 = "foobar3-terraform-test"
		6  |   max_size             = 5
		7  |   min_size             = 2
		8  |   launch_configuration = aws_launch_configuration.foobar.name
		9  |   vpc_zone_identifier  = [aws_subnet.example1.id, aws_subnet.example2.id]
		10 | }


Check: CKV_AWS_8: "Ensure all data stored in the Launch configuration EBS is securely encrypted"
	FAILED for resource: aws_launch_configuration.fail
	File: /terraform/aws/autoscaling/launch_configuration.tf:8-13

		8  | resource "aws_launch_configuration" "fail" {
		9  |   root_block_device {
		10 |     encrypted = false
		11 |   }
		12 |   associate_public_ip_address = true
		13 | }


Check: CKV_AWS_166: "Ensure Backup Vault is encrypted at rest using KMS CMK"
	FAILED for resource: aws_backup_vault.backup
	File: /terraform/aws/backup_vault/backup_vault.tf:4-6

		4 | resource "aws_backup_vault" "backup" {
		5 |   name = "example_backup_vault"
		6 | }


Check: CKV_AWS_124: "Ensure that CloudFormation stacks are sending event notifications to an SNS topic"
	FAILED for resource: aws_cloudformation_stack.default
	File: /terraform/aws/cloudformation_stack/cloudformation_stack.tf:4-10

		4  | resource "aws_cloudformation_stack" "default" {
		5  |   name = "networking-stack"
		6  |
		7  |   parameters = {
		8  |     VPCCidr = "10.0.0.0/16"
		9  |   }
		10 | }


Check: CKV_AWS_34: "Ensure cloudfront distribution ViewerProtocolPolicy is set to HTTPS"
	FAILED for resource: aws_cloudfront_distribution.s3_distribution
	File: /terraform/aws/cloudfront/cloudfront.tf:12-87

		12 | resource "aws_cloudfront_distribution" "s3_distribution" {
		13 |   dynamic "origin" {
		14 |     for_each = local.origins
		15 |     content {
		16 |       domain_name = origin.value["domain_name"]
		17 |       origin_id   = origin.value["origin_id"]
		18 |
		19 |       s3_origin_config {
		20 |         origin_access_identity = origin.value["origin_access_identity"]
		21 |       }
		22 |     }
		23 |   }
		24 |
		25 |   enabled             = true
		26 |   is_ipv6_enabled     = true
		27 |   default_root_object = "index.html"
		28 |
		29 |   default_cache_behavior {
		30 |     allowed_methods  = var.default_behaviour.allowed_methods
		31 |     cached_methods   = var.default_behaviour.cached_methods
		32 |     target_origin_id = var.default_behaviour.origin_id
		33 |
		34 |     forwarded_values {
		35 |       query_string = var.default_behaviour.query_string
		36 |
		37 |       cookies {
		38 |         forward = var.default_behaviour.forward
		39 |       }
		40 |     }
		41 |
		42 |     viewer_protocol_policy = "allow-all"
		43 |     min_ttl                = var.default_behaviour.min_ttl
		44 |     default_ttl            = var.default_behaviour.default_ttl
		45 |     max_ttl                = var.default_behaviour.max_ttl
		46 |   }
		47 |
		48 |   dynamic "ordered_cache_behavior" {
		49 |     for_each = var.behaviours
		50 |     content {
		51 |       path_pattern     = ordered_cache_behavior.value["path_pattern"]
		52 |       allowed_methods  = ordered_cache_behavior.value["allowed_methods"]
		53 |       cached_methods   = ordered_cache_behavior.value["cached_methods"]
		54 |       target_origin_id = ordered_cache_behavior.value["origin_id"]
		55 |       forwarded_values {
		56 |         headers      = ordered_cache_behavior.value["headers"]
		57 |         query_string = ordered_cache_behavior.value["query_string"]
		58 |         cookies {
		59 |           forward = ordered_cache_behavior.value["forward"]
		60 |         }
		61 |       }
		62 |       min_ttl                = ordered_cache_behavior.value["min_ttl"]
		63 |       default_ttl            = ordered_cache_behavior.value["default_ttl"]
		64 |       max_ttl                = ordered_cache_behavior.value["max_ttl"]
		65 |       compress               = ordered_cache_behavior.value["compress"]
		66 |       viewer_protocol_policy = "allow-all"
		67 |     }
		68 |   }
		69 |
		70 |   price_class = "PriceClass_200"
		71 |
		72 |   restrictions {
		73 |     geo_restriction {
		74 |       restriction_type = var.geo_restrictions["restriction_type"]
		75 |       locations        = var.geo_restrictions["locations"]
		76 |     }
		77 |   }
		78 |
		79 |   viewer_certificate {
		80 |     cloudfront_default_certificate = var.viewer_certificate["cloudfront_default_certificate"]
		81 |     minimum_protocol_version       = var.viewer_certificate["minimum_protocol_version"]
		82 |   }
		83 |
		84 |   lifecycle {
		85 |     ignore_changes = [tags]
		86 |   }
		87 | }


Check: CKV_AWS_86: "Ensure Cloudfront distribution has Access Logging enabled"
	FAILED for resource: aws_cloudfront_distribution.s3_distribution
	File: /terraform/aws/cloudfront/cloudfront.tf:12-87

		12 | resource "aws_cloudfront_distribution" "s3_distribution" {
		13 |   dynamic "origin" {
		14 |     for_each = local.origins
		15 |     content {
		16 |       domain_name = origin.value["domain_name"]
		17 |       origin_id   = origin.value["origin_id"]
		18 |
		19 |       s3_origin_config {
		20 |         origin_access_identity = origin.value["origin_access_identity"]
		21 |       }
		22 |     }
		23 |   }
		24 |
		25 |   enabled             = true
		26 |   is_ipv6_enabled     = true
		27 |   default_root_object = "index.html"
		28 |
		29 |   default_cache_behavior {
		30 |     allowed_methods  = var.default_behaviour.allowed_methods
		31 |     cached_methods   = var.default_behaviour.cached_methods
		32 |     target_origin_id = var.default_behaviour.origin_id
		33 |
		34 |     forwarded_values {
		35 |       query_string = var.default_behaviour.query_string
		36 |
		37 |       cookies {
		38 |         forward = var.default_behaviour.forward
		39 |       }
		40 |     }
		41 |
		42 |     viewer_protocol_policy = "allow-all"
		43 |     min_ttl                = var.default_behaviour.min_ttl
		44 |     default_ttl            = var.default_behaviour.default_ttl
		45 |     max_ttl                = var.default_behaviour.max_ttl
		46 |   }
		47 |
		48 |   dynamic "ordered_cache_behavior" {
		49 |     for_each = var.behaviours
		50 |     content {
		51 |       path_pattern     = ordered_cache_behavior.value["path_pattern"]
		52 |       allowed_methods  = ordered_cache_behavior.value["allowed_methods"]
		53 |       cached_methods   = ordered_cache_behavior.value["cached_methods"]
		54 |       target_origin_id = ordered_cache_behavior.value["origin_id"]
		55 |       forwarded_values {
		56 |         headers      = ordered_cache_behavior.value["headers"]
		57 |         query_string = ordered_cache_behavior.value["query_string"]
		58 |         cookies {
		59 |           forward = ordered_cache_behavior.value["forward"]
		60 |         }
		61 |       }
		62 |       min_ttl                = ordered_cache_behavior.value["min_ttl"]
		63 |       default_ttl            = ordered_cache_behavior.value["default_ttl"]
		64 |       max_ttl                = ordered_cache_behavior.value["max_ttl"]
		65 |       compress               = ordered_cache_behavior.value["compress"]
		66 |       viewer_protocol_policy = "allow-all"
		67 |     }
		68 |   }
		69 |
		70 |   price_class = "PriceClass_200"
		71 |
		72 |   restrictions {
		73 |     geo_restriction {
		74 |       restriction_type = var.geo_restrictions["restriction_type"]
		75 |       locations        = var.geo_restrictions["locations"]
		76 |     }
		77 |   }
		78 |
		79 |   viewer_certificate {
		80 |     cloudfront_default_certificate = var.viewer_certificate["cloudfront_default_certificate"]
		81 |     minimum_protocol_version       = var.viewer_certificate["minimum_protocol_version"]
		82 |   }
		83 |
		84 |   lifecycle {
		85 |     ignore_changes = [tags]
		86 |   }
		87 | }


Check: CKV_AWS_174: "Verify CloudFront Distribution Viewer Certificate is using TLS v1.2"
	FAILED for resource: aws_cloudfront_distribution.s3_distribution
	File: /terraform/aws/cloudfront/cloudfront.tf:12-87

		12 | resource "aws_cloudfront_distribution" "s3_distribution" {
		13 |   dynamic "origin" {
		14 |     for_each = local.origins
		15 |     content {
		16 |       domain_name = origin.value["domain_name"]
		17 |       origin_id   = origin.value["origin_id"]
		18 |
		19 |       s3_origin_config {
		20 |         origin_access_identity = origin.value["origin_access_identity"]
		21 |       }
		22 |     }
		23 |   }
		24 |
		25 |   enabled             = true
		26 |   is_ipv6_enabled     = true
		27 |   default_root_object = "index.html"
		28 |
		29 |   default_cache_behavior {
		30 |     allowed_methods  = var.default_behaviour.allowed_methods
		31 |     cached_methods   = var.default_behaviour.cached_methods
		32 |     target_origin_id = var.default_behaviour.origin_id
		33 |
		34 |     forwarded_values {
		35 |       query_string = var.default_behaviour.query_string
		36 |
		37 |       cookies {
		38 |         forward = var.default_behaviour.forward
		39 |       }
		40 |     }
		41 |
		42 |     viewer_protocol_policy = "allow-all"
		43 |     min_ttl                = var.default_behaviour.min_ttl
		44 |     default_ttl            = var.default_behaviour.default_ttl
		45 |     max_ttl                = var.default_behaviour.max_ttl
		46 |   }
		47 |
		48 |   dynamic "ordered_cache_behavior" {
		49 |     for_each = var.behaviours
		50 |     content {
		51 |       path_pattern     = ordered_cache_behavior.value["path_pattern"]
		52 |       allowed_methods  = ordered_cache_behavior.value["allowed_methods"]
		53 |       cached_methods   = ordered_cache_behavior.value["cached_methods"]
		54 |       target_origin_id = ordered_cache_behavior.value["origin_id"]
		55 |       forwarded_values {
		56 |         headers      = ordered_cache_behavior.value["headers"]
		57 |         query_string = ordered_cache_behavior.value["query_string"]
		58 |         cookies {
		59 |           forward = ordered_cache_behavior.value["forward"]
		60 |         }
		61 |       }
		62 |       min_ttl                = ordered_cache_behavior.value["min_ttl"]
		63 |       default_ttl            = ordered_cache_behavior.value["default_ttl"]
		64 |       max_ttl                = ordered_cache_behavior.value["max_ttl"]
		65 |       compress               = ordered_cache_behavior.value["compress"]
		66 |       viewer_protocol_policy = "allow-all"
		67 |     }
		68 |   }
		69 |
		70 |   price_class = "PriceClass_200"
		71 |
		72 |   restrictions {
		73 |     geo_restriction {
		74 |       restriction_type = var.geo_restrictions["restriction_type"]
		75 |       locations        = var.geo_restrictions["locations"]
		76 |     }
		77 |   }
		78 |
		79 |   viewer_certificate {
		80 |     cloudfront_default_certificate = var.viewer_certificate["cloudfront_default_certificate"]
		81 |     minimum_protocol_version       = var.viewer_certificate["minimum_protocol_version"]
		82 |   }
		83 |
		84 |   lifecycle {
		85 |     ignore_changes = [tags]
		86 |   }
		87 | }


Check: CKV_AWS_68: "CloudFront Distribution should have WAF enabled"
	FAILED for resource: aws_cloudfront_distribution.s3_distribution
	File: /terraform/aws/cloudfront/cloudfront.tf:12-87

		12 | resource "aws_cloudfront_distribution" "s3_distribution" {
		13 |   dynamic "origin" {
		14 |     for_each = local.origins
		15 |     content {
		16 |       domain_name = origin.value["domain_name"]
		17 |       origin_id   = origin.value["origin_id"]
		18 |
		19 |       s3_origin_config {
		20 |         origin_access_identity = origin.value["origin_access_identity"]
		21 |       }
		22 |     }
		23 |   }
		24 |
		25 |   enabled             = true
		26 |   is_ipv6_enabled     = true
		27 |   default_root_object = "index.html"
		28 |
		29 |   default_cache_behavior {
		30 |     allowed_methods  = var.default_behaviour.allowed_methods
		31 |     cached_methods   = var.default_behaviour.cached_methods
		32 |     target_origin_id = var.default_behaviour.origin_id
		33 |
		34 |     forwarded_values {
		35 |       query_string = var.default_behaviour.query_string
		36 |
		37 |       cookies {
		38 |         forward = var.default_behaviour.forward
		39 |       }
		40 |     }
		41 |
		42 |     viewer_protocol_policy = "allow-all"
		43 |     min_ttl                = var.default_behaviour.min_ttl
		44 |     default_ttl            = var.default_behaviour.default_ttl
		45 |     max_ttl                = var.default_behaviour.max_ttl
		46 |   }
		47 |
		48 |   dynamic "ordered_cache_behavior" {
		49 |     for_each = var.behaviours
		50 |     content {
		51 |       path_pattern     = ordered_cache_behavior.value["path_pattern"]
		52 |       allowed_methods  = ordered_cache_behavior.value["allowed_methods"]
		53 |       cached_methods   = ordered_cache_behavior.value["cached_methods"]
		54 |       target_origin_id = ordered_cache_behavior.value["origin_id"]
		55 |       forwarded_values {
		56 |         headers      = ordered_cache_behavior.value["headers"]
		57 |         query_string = ordered_cache_behavior.value["query_string"]
		58 |         cookies {
		59 |           forward = ordered_cache_behavior.value["forward"]
		60 |         }
		61 |       }
		62 |       min_ttl                = ordered_cache_behavior.value["min_ttl"]
		63 |       default_ttl            = ordered_cache_behavior.value["default_ttl"]
		64 |       max_ttl                = ordered_cache_behavior.value["max_ttl"]
		65 |       compress               = ordered_cache_behavior.value["compress"]
		66 |       viewer_protocol_policy = "allow-all"
		67 |     }
		68 |   }
		69 |
		70 |   price_class = "PriceClass_200"
		71 |
		72 |   restrictions {
		73 |     geo_restriction {
		74 |       restriction_type = var.geo_restrictions["restriction_type"]
		75 |       locations        = var.geo_restrictions["locations"]
		76 |     }
		77 |   }
		78 |
		79 |   viewer_certificate {
		80 |     cloudfront_default_certificate = var.viewer_certificate["cloudfront_default_certificate"]
		81 |     minimum_protocol_version       = var.viewer_certificate["minimum_protocol_version"]
		82 |   }
		83 |
		84 |   lifecycle {
		85 |     ignore_changes = [tags]
		86 |   }
		87 | }


Check: CKV_AWS_36: "Ensure CloudTrail log file validation is enabled"
	FAILED for resource: aws_cloudtrail.fail
	File: /terraform/aws/cloudtrail/cloudtrail.tf:12-16

		12 | resource "aws_cloudtrail" "fail" {
		13 |   name                          = "TRAIL"
		14 |   s3_bucket_name                = aws_s3_bucket.test.id
		15 |   include_global_service_events = true
		16 | }


Check: CKV_AWS_67: "Ensure CloudTrail is enabled in all Regions"
	FAILED for resource: aws_cloudtrail.fail
	File: /terraform/aws/cloudtrail/cloudtrail.tf:12-16

		12 | resource "aws_cloudtrail" "fail" {
		13 |   name                          = "TRAIL"
		14 |   s3_bucket_name                = aws_s3_bucket.test.id
		15 |   include_global_service_events = true
		16 | }


Check: CKV_AWS_35: "Ensure CloudTrail logs are encrypted at rest using KMS CMKs"
	FAILED for resource: aws_cloudtrail.fail
	File: /terraform/aws/cloudtrail/cloudtrail.tf:12-16

		12 | resource "aws_cloudtrail" "fail" {
		13 |   name                          = "TRAIL"
		14 |   s3_bucket_name                = aws_s3_bucket.test.id
		15 |   include_global_service_events = true
		16 | }


Check: CKV_AWS_66: "Ensure that CloudWatch Log Group specifies retention days"
	FAILED for resource: aws_cloudwatch_log_group.logs
	File: /terraform/aws/cloudwatch/cloudwatch.tf:8-10

		8  | resource "aws_cloudwatch_log_group" "logs" {
		9  |   name = var.log_group_name
		10 | }


Check: CKV_AWS_158: "Ensure that CloudWatch Log Group is encrypted by KMS"
	FAILED for resource: aws_cloudwatch_log_group.logs
	File: /terraform/aws/cloudwatch/cloudwatch.tf:8-10

		8  | resource "aws_cloudwatch_log_group" "logs" {
		9  |   name = var.log_group_name
		10 | }


Check: CKV_AWS_78: "Ensure that CodeBuild Project encryption is not disabled"
	FAILED for resource: aws_codebuild_project.default
	File: /terraform/aws/codebuild/codebuild.tf:8-29

		8  | resource "aws_codebuild_project" "default" {
		9  |   name         = "example"
		10 |   service_role = "aws_iam_role.example.arn"
		11 |
		12 |   artifacts {
		13 |     type                = "S3"
		14 |     encryption_disabled = true
		15 |   }
		16 |   environment {
		17 |     compute_type = "BUILD_GENERAL1_SMALL"
		18 |     image        = "docker:dind"
		19 |     type         = "LINUX_CONTAINER"
		20 |   }
		21 |   source {
		22 |     type = "NO_SOURCE"
		23 |   }
		24 |
		25 |   secondary_artifacts {
		26 |     encryption_disabled = false
		27 |   }
		28 |
		29 | }


Check: CKV_AWS_147: "Ensure that CodeBuild projects are encrypted"
	FAILED for resource: aws_codebuild_project.default
	File: /terraform/aws/codebuild/codebuild.tf:8-29

		8  | resource "aws_codebuild_project" "default" {
		9  |   name         = "example"
		10 |   service_role = "aws_iam_role.example.arn"
		11 |
		12 |   artifacts {
		13 |     type                = "S3"
		14 |     encryption_disabled = true
		15 |   }
		16 |   environment {
		17 |     compute_type = "BUILD_GENERAL1_SMALL"
		18 |     image        = "docker:dind"
		19 |     type         = "LINUX_CONTAINER"
		20 |   }
		21 |   source {
		22 |     type = "NO_SOURCE"
		23 |   }
		24 |
		25 |   secondary_artifacts {
		26 |     encryption_disabled = false
		27 |   }
		28 |
		29 | }


Check: CKV_AWS_121: "Ensure AWS Config is enabled in all regions"
	FAILED for resource: aws_config_configuration_aggregator.organization
	File: /terraform/aws/config/config_configuration_aggregator.tf:7-15

		7  | resource "aws_config_configuration_aggregator" "organization" {
		8  |
		9  |   name = "example"
		10 |
		11 |   account_aggregation_source {
		12 |     account_ids = ["123456789012"]
		13 |     regions     = ["us-east-2", "us-east-1", "us-west-1", "us-west-2"]
		14 |   }
		15 | }


Check: CKV_AWS_108: "Ensure IAM policies does not allow data exfiltration"
	FAILED for resource: aws_iam_policy_document.fail
	File: /terraform/aws/data/data.iam_policy_document.tf:10-22

		10 | data "aws_iam_policy_document" "fail" {
		11 |   version = "2012-10-17"
		12 |
		13 |   statement {
		14 |     effect = "Allow"
		15 |     actions = [
		16 |       "*"
		17 |     ]
		18 |     resources = [
		19 |       "*",
		20 |     ]
		21 |   }
		22 | }


Check: CKV_AWS_111: "Ensure IAM policies does not allow write access without constraints"
	FAILED for resource: aws_iam_policy_document.fail
	File: /terraform/aws/data/data.iam_policy_document.tf:10-22

		10 | data "aws_iam_policy_document" "fail" {
		11 |   version = "2012-10-17"
		12 |
		13 |   statement {
		14 |     effect = "Allow"
		15 |     actions = [
		16 |       "*"
		17 |     ]
		18 |     resources = [
		19 |       "*",
		20 |     ]
		21 |   }
		22 | }


Check: CKV_AWS_49: "Ensure no IAM policies documents allow "*" as a statement's actions"
	FAILED for resource: aws_iam_policy_document.fail
	File: /terraform/aws/data/data.iam_policy_document.tf:10-22

		10 | data "aws_iam_policy_document" "fail" {
		11 |   version = "2012-10-17"
		12 |
		13 |   statement {
		14 |     effect = "Allow"
		15 |     actions = [
		16 |       "*"
		17 |     ]
		18 |     resources = [
		19 |       "*",
		20 |     ]
		21 |   }
		22 | }


Check: CKV_AWS_107: "Ensure IAM policies does not allow credentials exposure"
	FAILED for resource: aws_iam_policy_document.fail
	File: /terraform/aws/data/data.iam_policy_document.tf:10-22

		10 | data "aws_iam_policy_document" "fail" {
		11 |   version = "2012-10-17"
		12 |
		13 |   statement {
		14 |     effect = "Allow"
		15 |     actions = [
		16 |       "*"
		17 |     ]
		18 |     resources = [
		19 |       "*",
		20 |     ]
		21 |   }
		22 | }


Check: CKV_AWS_109: "Ensure IAM policies does not allow permissions management / resource exposure without constraints"
	FAILED for resource: aws_iam_policy_document.fail
	File: /terraform/aws/data/data.iam_policy_document.tf:10-22

		10 | data "aws_iam_policy_document" "fail" {
		11 |   version = "2012-10-17"
		12 |
		13 |   statement {
		14 |     effect = "Allow"
		15 |     actions = [
		16 |       "*"
		17 |     ]
		18 |     resources = [
		19 |       "*",
		20 |     ]
		21 |   }
		22 | }


Check: CKV_AWS_1: "Ensure IAM policies that allow full "*-*" administrative privileges are not created"
	FAILED for resource: aws_iam_policy_document.fail
	File: /terraform/aws/data/data.iam_policy_document.tf:10-22

		10 | data "aws_iam_policy_document" "fail" {
		11 |   version = "2012-10-17"
		12 |
		13 |   statement {
		14 |     effect = "Allow"
		15 |     actions = [
		16 |       "*"
		17 |     ]
		18 |     resources = [
		19 |       "*",
		20 |     ]
		21 |   }
		22 | }


Check: CKV_AWS_110: "Ensure IAM policies does not allow privilege escalation"
	FAILED for resource: aws_iam_policy_document.fail
	File: /terraform/aws/data/data.iam_policy_document.tf:10-22

		10 | data "aws_iam_policy_document" "fail" {
		11 |   version = "2012-10-17"
		12 |
		13 |   statement {
		14 |     effect = "Allow"
		15 |     actions = [
		16 |       "*"
		17 |     ]
		18 |     resources = [
		19 |       "*",
		20 |     ]
		21 |   }
		22 | }


Check: CKV_AWS_161: "Ensure RDS database has IAM authentication enabled"
	FAILED for resource: aws_db_instance.default
	File: /terraform/aws/db_instance/db_instance.tf:15-36

		15 | resource "aws_db_instance" "default" {
		16 |   name                   = var.dbname
		17 |   engine                 = "mysql"
		18 |   option_group_name      = aws_db_option_group.default.name
		19 |   parameter_group_name   = aws_db_parameter_group.default.name
		20 |   db_subnet_group_name   = aws_db_subnet_group.default.name
		21 |   vpc_security_group_ids = [aws_security_group.default.id]
		22 |
		23 |   identifier              = "rds-${local.resource_prefix.value}"
		24 |   engine_version          = "8.0" # Latest major version
		25 |   instance_class          = "db.t3.micro"
		26 |   allocated_storage       = "20"
		27 |   username                = "admin"
		28 |   password                = var.password
		29 |   apply_immediately       = true
		30 |   multi_az                = false
		31 |   backup_retention_period = 0
		32 |   storage_encrypted       = false
		33 |   skip_final_snapshot     = true
		34 |   monitoring_interval     = 0
		35 |   publicly_accessible     = true
		36 | }


Check: CKV_AWS_157: "Ensure that RDS instances have Multi-AZ enabled"
	FAILED for resource: aws_db_instance.default
	File: /terraform/aws/db_instance/db_instance.tf:15-36

		15 | resource "aws_db_instance" "default" {
		16 |   name                   = var.dbname
		17 |   engine                 = "mysql"
		18 |   option_group_name      = aws_db_option_group.default.name
		19 |   parameter_group_name   = aws_db_parameter_group.default.name
		20 |   db_subnet_group_name   = aws_db_subnet_group.default.name
		21 |   vpc_security_group_ids = [aws_security_group.default.id]
		22 |
		23 |   identifier              = "rds-${local.resource_prefix.value}"
		24 |   engine_version          = "8.0" # Latest major version
		25 |   instance_class          = "db.t3.micro"
		26 |   allocated_storage       = "20"
		27 |   username                = "admin"
		28 |   password                = var.password
		29 |   apply_immediately       = true
		30 |   multi_az                = false
		31 |   backup_retention_period = 0
		32 |   storage_encrypted       = false
		33 |   skip_final_snapshot     = true
		34 |   monitoring_interval     = 0
		35 |   publicly_accessible     = true
		36 | }


Check: CKV_AWS_129: "Ensure that respective logs of Amazon Relational Database Service (Amazon RDS) are enabled"
	FAILED for resource: aws_db_instance.default
	File: /terraform/aws/db_instance/db_instance.tf:15-36

		15 | resource "aws_db_instance" "default" {
		16 |   name                   = var.dbname
		17 |   engine                 = "mysql"
		18 |   option_group_name      = aws_db_option_group.default.name
		19 |   parameter_group_name   = aws_db_parameter_group.default.name
		20 |   db_subnet_group_name   = aws_db_subnet_group.default.name
		21 |   vpc_security_group_ids = [aws_security_group.default.id]
		22 |
		23 |   identifier              = "rds-${local.resource_prefix.value}"
		24 |   engine_version          = "8.0" # Latest major version
		25 |   instance_class          = "db.t3.micro"
		26 |   allocated_storage       = "20"
		27 |   username                = "admin"
		28 |   password                = var.password
		29 |   apply_immediately       = true
		30 |   multi_az                = false
		31 |   backup_retention_period = 0
		32 |   storage_encrypted       = false
		33 |   skip_final_snapshot     = true
		34 |   monitoring_interval     = 0
		35 |   publicly_accessible     = true
		36 | }


Check: CKV_AWS_133: "Ensure that RDS instances has backup policy"
	FAILED for resource: aws_db_instance.default
	File: /terraform/aws/db_instance/db_instance.tf:15-36

		15 | resource "aws_db_instance" "default" {
		16 |   name                   = var.dbname
		17 |   engine                 = "mysql"
		18 |   option_group_name      = aws_db_option_group.default.name
		19 |   parameter_group_name   = aws_db_parameter_group.default.name
		20 |   db_subnet_group_name   = aws_db_subnet_group.default.name
		21 |   vpc_security_group_ids = [aws_security_group.default.id]
		22 |
		23 |   identifier              = "rds-${local.resource_prefix.value}"
		24 |   engine_version          = "8.0" # Latest major version
		25 |   instance_class          = "db.t3.micro"
		26 |   allocated_storage       = "20"
		27 |   username                = "admin"
		28 |   password                = var.password
		29 |   apply_immediately       = true
		30 |   multi_az                = false
		31 |   backup_retention_period = 0
		32 |   storage_encrypted       = false
		33 |   skip_final_snapshot     = true
		34 |   monitoring_interval     = 0
		35 |   publicly_accessible     = true
		36 | }


Check: CKV_AWS_17: "Ensure all data stored in RDS is not publicly accessible"
	FAILED for resource: aws_db_instance.default
	File: /terraform/aws/db_instance/db_instance.tf:15-36

		15 | resource "aws_db_instance" "default" {
		16 |   name                   = var.dbname
		17 |   engine                 = "mysql"
		18 |   option_group_name      = aws_db_option_group.default.name
		19 |   parameter_group_name   = aws_db_parameter_group.default.name
		20 |   db_subnet_group_name   = aws_db_subnet_group.default.name
		21 |   vpc_security_group_ids = [aws_security_group.default.id]
		22 |
		23 |   identifier              = "rds-${local.resource_prefix.value}"
		24 |   engine_version          = "8.0" # Latest major version
		25 |   instance_class          = "db.t3.micro"
		26 |   allocated_storage       = "20"
		27 |   username                = "admin"
		28 |   password                = var.password
		29 |   apply_immediately       = true
		30 |   multi_az                = false
		31 |   backup_retention_period = 0
		32 |   storage_encrypted       = false
		33 |   skip_final_snapshot     = true
		34 |   monitoring_interval     = 0
		35 |   publicly_accessible     = true
		36 | }


Check: CKV_AWS_118: "Ensure that enhanced monitoring is enabled for Amazon RDS instances"
	FAILED for resource: aws_db_instance.default
	File: /terraform/aws/db_instance/db_instance.tf:15-36

		15 | resource "aws_db_instance" "default" {
		16 |   name                   = var.dbname
		17 |   engine                 = "mysql"
		18 |   option_group_name      = aws_db_option_group.default.name
		19 |   parameter_group_name   = aws_db_parameter_group.default.name
		20 |   db_subnet_group_name   = aws_db_subnet_group.default.name
		21 |   vpc_security_group_ids = [aws_security_group.default.id]
		22 |
		23 |   identifier              = "rds-${local.resource_prefix.value}"
		24 |   engine_version          = "8.0" # Latest major version
		25 |   instance_class          = "db.t3.micro"
		26 |   allocated_storage       = "20"
		27 |   username                = "admin"
		28 |   password                = var.password
		29 |   apply_immediately       = true
		30 |   multi_az                = false
		31 |   backup_retention_period = 0
		32 |   storage_encrypted       = false
		33 |   skip_final_snapshot     = true
		34 |   monitoring_interval     = 0
		35 |   publicly_accessible     = true
		36 | }


Check: CKV_AWS_16: "Ensure all data stored in the RDS is securely encrypted at rest"
	FAILED for resource: aws_db_instance.default
	File: /terraform/aws/db_instance/db_instance.tf:15-36

		15 | resource "aws_db_instance" "default" {
		16 |   name                   = var.dbname
		17 |   engine                 = "mysql"
		18 |   option_group_name      = aws_db_option_group.default.name
		19 |   parameter_group_name   = aws_db_parameter_group.default.name
		20 |   db_subnet_group_name   = aws_db_subnet_group.default.name
		21 |   vpc_security_group_ids = [aws_security_group.default.id]
		22 |
		23 |   identifier              = "rds-${local.resource_prefix.value}"
		24 |   engine_version          = "8.0" # Latest major version
		25 |   instance_class          = "db.t3.micro"
		26 |   allocated_storage       = "20"
		27 |   username                = "admin"
		28 |   password                = var.password
		29 |   apply_immediately       = true
		30 |   multi_az                = false
		31 |   backup_retention_period = 0
		32 |   storage_encrypted       = false
		33 |   skip_final_snapshot     = true
		34 |   monitoring_interval     = 0
		35 |   publicly_accessible     = true
		36 | }


Check: CKV_AWS_89: "DMS replication instance should not be publicly accessible"
	FAILED for resource: aws_dms_replication_instance.public
	File: /terraform/aws/dms/dms.tf:6-12

		6  | resource "aws_dms_replication_instance" "public" {
		7  |   engine_version             = "3.1.4"
		8  |   multi_az                   = false
		9  |   publicly_accessible        = true
		10 |   replication_instance_class = "dms.t2.micro"
		11 |   replication_instance_id    = "test-dms-replication-instance-tf"
		12 | }


Check: CKV_AWS_74: "Ensure DocDB is encrypted at rest (default is unencrypted)"
	FAILED for resource: aws_docdb_cluster.examplea
	File: /terraform/aws/documentdb/docdb_cluster.tf:13-31

		13 | resource "aws_docdb_cluster" "examplea" {
		14 |   cluster_identifier = var.cluster_identifier
		15 |   engine             = "docdb"
		16 |   engine_version     = ""
		17 |   apply_immediately  = var.apply_immediately
		18 |   availability_zones = data.aws_availability_zones.available.names
		19 |
		20 |   db_subnet_group_name            = aws_docdb_subnet_group.examplea.name
		21 |   db_cluster_parameter_group_name = aws_docdb_cluster_parameter_group.examplea.name
		22 |   deletion_protection             = var.deletion_protection
		23 |   master_username                 = var.master_username
		24 |   master_password                 = var.master_password
		25 |   backup_retention_period         = var.backup_retention_period
		26 |   preferred_backup_window         = "07:00-09:00"
		27 |   preferred_maintenance_window    = "sat:05:00-sat:07:00"
		28 |   skip_final_snapshot             = true
		29 |   vpc_security_group_ids          = []
		30 |   enabled_cloudwatch_logs_exports = "something"
		31 | }


Check: CKV_AWS_85: "Ensure DocDB Logging is enabled"
	FAILED for resource: aws_docdb_cluster.examplea
	File: /terraform/aws/documentdb/docdb_cluster.tf:13-31

		13 | resource "aws_docdb_cluster" "examplea" {
		14 |   cluster_identifier = var.cluster_identifier
		15 |   engine             = "docdb"
		16 |   engine_version     = ""
		17 |   apply_immediately  = var.apply_immediately
		18 |   availability_zones = data.aws_availability_zones.available.names
		19 |
		20 |   db_subnet_group_name            = aws_docdb_subnet_group.examplea.name
		21 |   db_cluster_parameter_group_name = aws_docdb_cluster_parameter_group.examplea.name
		22 |   deletion_protection             = var.deletion_protection
		23 |   master_username                 = var.master_username
		24 |   master_password                 = var.master_password
		25 |   backup_retention_period         = var.backup_retention_period
		26 |   preferred_backup_window         = "07:00-09:00"
		27 |   preferred_maintenance_window    = "sat:05:00-sat:07:00"
		28 |   skip_final_snapshot             = true
		29 |   vpc_security_group_ids          = []
		30 |   enabled_cloudwatch_logs_exports = "something"
		31 | }


Check: CKV_AWS_182: "Ensure Doc DB is encrypted by KMS using a customer managed Key (CMK)"
	FAILED for resource: aws_docdb_cluster.examplea
	File: /terraform/aws/documentdb/docdb_cluster.tf:13-31

		13 | resource "aws_docdb_cluster" "examplea" {
		14 |   cluster_identifier = var.cluster_identifier
		15 |   engine             = "docdb"
		16 |   engine_version     = ""
		17 |   apply_immediately  = var.apply_immediately
		18 |   availability_zones = data.aws_availability_zones.available.names
		19 |
		20 |   db_subnet_group_name            = aws_docdb_subnet_group.examplea.name
		21 |   db_cluster_parameter_group_name = aws_docdb_cluster_parameter_group.examplea.name
		22 |   deletion_protection             = var.deletion_protection
		23 |   master_username                 = var.master_username
		24 |   master_password                 = var.master_password
		25 |   backup_retention_period         = var.backup_retention_period
		26 |   preferred_backup_window         = "07:00-09:00"
		27 |   preferred_maintenance_window    = "sat:05:00-sat:07:00"
		28 |   skip_final_snapshot             = true
		29 |   vpc_security_group_ids          = []
		30 |   enabled_cloudwatch_logs_exports = "something"
		31 | }


Check: CKV_AWS_90: "Ensure DocDB TLS is not disabled"
	FAILED for resource: aws_docdb_cluster_parameter_group.examplea
	File: /terraform/aws/documentdb/docdb_cluster.tf:33-72

		33 | resource "aws_docdb_cluster_parameter_group" "examplea" {
		34 |   family      = var.family
		35 |   name        = var.param_group_name
		36 |   description = "docdb cluster parameter group"
		37 |
		38 |   parameter {
		39 |     name  = "tls"
		40 |     value = "disabled"
		41 |   }
		42 |
		43 |   parameter {
		44 |     name  = "audit_logs"
		45 |     value = "disabled"
		46 |   }
		47 |
		48 |   parameter {
		49 |     name  = "change_stream_log_retention_duration"
		50 |     value = var.change_stream_log_retention_duration
		51 |   }
		52 |
		53 |   parameter {
		54 |     name  = "profiler"
		55 |     value = var.profiler
		56 |   }
		57 |
		58 |   parameter {
		59 |     name  = "profiler_sampling_rate"
		60 |     value = var.profiler_sampling_rate
		61 |   }
		62 |
		63 |   parameter {
		64 |     name  = "profiler_threshold_ms"
		65 |     value = var.profiler_threshold_ms
		66 |   }
		67 |
		68 |   parameter {
		69 |     name  = "ttl_monitor"
		70 |     value = var.ttl_monitor
		71 |   }
		72 | }


Check: CKV_AWS_104: "Ensure DocDB has audit logs enabled"
	FAILED for resource: aws_docdb_cluster_parameter_group.examplea
	File: /terraform/aws/documentdb/docdb_cluster.tf:33-72

		33 | resource "aws_docdb_cluster_parameter_group" "examplea" {
		34 |   family      = var.family
		35 |   name        = var.param_group_name
		36 |   description = "docdb cluster parameter group"
		37 |
		38 |   parameter {
		39 |     name  = "tls"
		40 |     value = "disabled"
		41 |   }
		42 |
		43 |   parameter {
		44 |     name  = "audit_logs"
		45 |     value = "disabled"
		46 |   }
		47 |
		48 |   parameter {
		49 |     name  = "change_stream_log_retention_duration"
		50 |     value = var.change_stream_log_retention_duration
		51 |   }
		52 |
		53 |   parameter {
		54 |     name  = "profiler"
		55 |     value = var.profiler
		56 |   }
		57 |
		58 |   parameter {
		59 |     name  = "profiler_sampling_rate"
		60 |     value = var.profiler_sampling_rate
		61 |   }
		62 |
		63 |   parameter {
		64 |     name  = "profiler_threshold_ms"
		65 |     value = var.profiler_threshold_ms
		66 |   }
		67 |
		68 |   parameter {
		69 |     name  = "ttl_monitor"
		70 |     value = var.ttl_monitor
		71 |   }
		72 | }


Check: CKV_AWS_47: "Ensure DAX is encrypted at rest (default is unencrypted)"
	FAILED for resource: aws_dax_cluster.name
	File: /terraform/aws/dynamodb/dax_cluster.tf:7-13

		7  | resource "aws_dax_cluster" "name" {
		8  |   cluster_name         = var.cluster_name
		9  |   iam_role_arn         = var.iam_role_arn
		10 |   parameter_group_name = aws_dax_parameter_group.example.name
		11 |   subnet_group_name    = aws_dax_subnet_group.example.name
		12 |   tags                 = var.common_tags
		13 | }


Check: CKV_AWS_28: "Ensure Dynamodb point in time recovery (backup) is enabled"
	FAILED for resource: aws_dynamodb_table.default
	File: /terraform/aws/dynamodb/dynamodb_table.tf:10-35

		10 | resource "aws_dynamodb_table" "default" {
		11 |   name           = "GameScores"
		12 |   billing_mode   = "PROVISIONED"
		13 |   read_capacity  = 20
		14 |   write_capacity = 20
		15 |   hash_key       = "UserId"
		16 |   range_key      = "UserId"
		17 |
		18 |   attribute {
		19 |     name = "UserId"
		20 |     type = "S"
		21 |   }
		22 |
		23 |   replica {
		24 |     region_name = "us-east-2"
		25 |   }
		26 |
		27 |   replica {
		28 |     region_name = "us-west-2"
		29 |   }
		30 |
		31 |   # server_side_encryption {
		32 |   # 	enabled     = true
		33 |   # 	kms_key_arn = aws_kms_key.dynamo_db_kms.key_id
		34 |   # }
		35 | }


Check: CKV_AWS_119: "Ensure DynamoDB Tables are encrypted using a KMS Customer Managed CMK"
	FAILED for resource: aws_dynamodb_table.default
	File: /terraform/aws/dynamodb/dynamodb_table.tf:10-35

		10 | resource "aws_dynamodb_table" "default" {
		11 |   name           = "GameScores"
		12 |   billing_mode   = "PROVISIONED"
		13 |   read_capacity  = 20
		14 |   write_capacity = 20
		15 |   hash_key       = "UserId"
		16 |   range_key      = "UserId"
		17 |
		18 |   attribute {
		19 |     name = "UserId"
		20 |     type = "S"
		21 |   }
		22 |
		23 |   replica {
		24 |     region_name = "us-east-2"
		25 |   }
		26 |
		27 |   replica {
		28 |     region_name = "us-west-2"
		29 |   }
		30 |
		31 |   # server_side_encryption {
		32 |   # 	enabled     = true
		33 |   # 	kms_key_arn = aws_kms_key.dynamo_db_kms.key_id
		34 |   # }
		35 | }


Check: CKV_AWS_106: "Ensure EBS default encryption is enabled"
	FAILED for resource: aws_ebs_encryption_by_default.disabled
	File: /terraform/aws/ebs/ebs_encryption_defaults.tf:3-5

		3 | resource "aws_ebs_encryption_by_default" "disabled" {
		4 |   enabled = false
		5 | }


Check: CKV_AWS_183: "Ensure EBS Snapshot Copy is encrypted by KMS using a customer managed Key (CMK)"
	FAILED for resource: aws_ebs_snapshot_copy.fail
	File: /terraform/aws/ebs/ebs_snapshot_copy.tf:5-13

		5  | resource "aws_ebs_snapshot_copy" "fail" {
		6  |   source_snapshot_id = aws_ebs_snapshot.test.id
		7  |   source_region      = data.aws_region.current.name
		8  |   encrypted          = true
		9  |
		10 |   tags = {
		11 |     Name = "testAccEBSSnapshotCopyWithKMSConfig"
		12 |   }
		13 | }


Check: CKV_AWS_189: "Ensure EBS Volume is encrypted by KMS using a customer managed Key (CMK)"
	FAILED for resource: aws_ebs_volume.fail
	File: /terraform/aws/ebs/ebs_volume.tf:12-15

		12 | resource "aws_ebs_volume" "fail" {
		13 |   availability_zone = "eu-west-1a"
		14 |   size              = 1
		15 | }


Check: CKV_AWS_3: "Ensure all data stored in the EBS is securely encrypted"
	FAILED for resource: aws_ebs_volume.fail
	File: /terraform/aws/ebs/ebs_volume.tf:12-15

		12 | resource "aws_ebs_volume" "fail" {
		13 |   availability_zone = "eu-west-1a"
		14 |   size              = 1
		15 | }


Check: CKV_AWS_163: "Ensure ECR image scanning on push is enabled"
	FAILED for resource: aws_ecr_repository.name
	File: /terraform/aws/ecr/ecr.tf:10-13

		10 | resource "aws_ecr_repository" "name" {
		11 |   name                 = "bar"
		12 |   image_tag_mutability = "MUTABLE"
		13 | }


Check: CKV_AWS_136: "Ensure that ECR repositories are encrypted using KMS"
	FAILED for resource: aws_ecr_repository.name
	File: /terraform/aws/ecr/ecr.tf:10-13

		10 | resource "aws_ecr_repository" "name" {
		11 |   name                 = "bar"
		12 |   image_tag_mutability = "MUTABLE"
		13 | }


Check: CKV_AWS_51: "Ensure ECR Image Tags are immutable"
	FAILED for resource: aws_ecr_repository.name
	File: /terraform/aws/ecr/ecr.tf:10-13

		10 | resource "aws_ecr_repository" "name" {
		11 |   name                 = "bar"
		12 |   image_tag_mutability = "MUTABLE"
		13 | }


Check: CKV_AWS_65: "Ensure container insights are enabled on ECS cluster"
	FAILED for resource: aws_ecs_cluster.my_cluster
	File: /terraform/aws/ecs/ecs_cluster.tf:7-9

		7 | resource "aws_ecs_cluster" "my_cluster" {
		8 |   name = "white-hart"
		9 | }


Check: CKV_AWS_97: "Ensure Encryption in transit is enabled for EFS volumes in ECS Task definitions"
	FAILED for resource: aws_ecs_task_definition.fail
	File: /terraform/aws/ecs/ecs_task_definition.tf:7-34

		7  | resource "aws_ecs_task_definition" "fail" {
		8  |   container_definitions = <<EOF
		9  | [
		10 |   {
		11 |     "name": "my_service",
		12 |     "essential": true,
		13 |     "memory": 256,
		14 |     "environment": [
		15 |       { "name": "ENVIRONMENT", "value": "development" },
		16 |       { "name": "DATABASE_PASSWORD", "value": "oh no D:"}
		17 |     ]
		18 |   }
		19 | ]
		20 | EOF
		21 |
		22 |   volume {
		23 |     name = "service-storage"
		24 |
		25 |     efs_volume_configuration {
		26 |       file_system_id = aws_efs_file_system.fs.id
		27 |       root_directory = "/opt/data"
		28 |       authorization_config {
		29 |         access_point_id = aws_efs_access_point.test.id
		30 |         iam             = "ENABLED"
		31 |       }
		32 |     }
		33 |   }
		34 | }


Check: CKV_AWS_184: "Ensure resource is encrypted by KMS using a customer managed Key (CMK)"
	FAILED for resource: aws_efs_file_system.sharedstore
	File: /terraform/aws/efs/efs.tf:8-23

		8  | resource "aws_efs_file_system" "sharedstore" {
		9  |
		10 |   creation_token = var.efs["creation_token"]
		11 |
		12 |   lifecycle_policy {
		13 |     transition_to_ia = var.efs["transition_to_ia"]
		14 |   }
		15 |
		16 |   kms_key_id                      = ""
		17 |   encrypted                       = false
		18 |   performance_mode                = var.efs["performance_mode"]
		19 |   provisioned_throughput_in_mibps = var.efs["provisioned_throughput_in_mibps"]
		20 |   throughput_mode                 = var.efs["throughput_mode"]
		21 |   tags                            = var.common_tags
		22 |
		23 | }


Check: CKV_AWS_42: "Ensure EFS is securely encrypted"
	FAILED for resource: aws_efs_file_system.sharedstore
	File: /terraform/aws/efs/efs.tf:8-23

		8  | resource "aws_efs_file_system" "sharedstore" {
		9  |
		10 |   creation_token = var.efs["creation_token"]
		11 |
		12 |   lifecycle_policy {
		13 |     transition_to_ia = var.efs["transition_to_ia"]
		14 |   }
		15 |
		16 |   kms_key_id                      = ""
		17 |   encrypted                       = false
		18 |   performance_mode                = var.efs["performance_mode"]
		19 |   provisioned_throughput_in_mibps = var.efs["provisioned_throughput_in_mibps"]
		20 |   throughput_mode                 = var.efs["throughput_mode"]
		21 |   tags                            = var.common_tags
		22 |
		23 | }


Check: CKV_AWS_39: "Ensure Amazon EKS public endpoint disabled"
	FAILED for resource: aws_eks_cluster.fail
	File: /terraform/aws/eks/eks_cluster.tf:13-20

		13 | resource "aws_eks_cluster" "fail" {
		14 |   name     = "fail_cluster"
		15 |   role_arn = var.cluster_arn
		16 |   vpc_config {
		17 |     endpoint_public_access = true
		18 |     public_access_cidrs    = ["0.0.0.0/0"]
		19 |   }
		20 | }


Check: CKV_AWS_58: "Ensure EKS Cluster has Secrets Encryption Enabled"
	FAILED for resource: aws_eks_cluster.fail
	File: /terraform/aws/eks/eks_cluster.tf:13-20

		13 | resource "aws_eks_cluster" "fail" {
		14 |   name     = "fail_cluster"
		15 |   role_arn = var.cluster_arn
		16 |   vpc_config {
		17 |     endpoint_public_access = true
		18 |     public_access_cidrs    = ["0.0.0.0/0"]
		19 |   }
		20 | }


Check: CKV_AWS_38: "Ensure Amazon EKS public endpoint not accessible to 0.0.0.0/0"
	FAILED for resource: aws_eks_cluster.fail
	File: /terraform/aws/eks/eks_cluster.tf:13-20

		13 | resource "aws_eks_cluster" "fail" {
		14 |   name     = "fail_cluster"
		15 |   role_arn = var.cluster_arn
		16 |   vpc_config {
		17 |     endpoint_public_access = true
		18 |     public_access_cidrs    = ["0.0.0.0/0"]
		19 |   }
		20 | }


Check: CKV_AWS_37: "Ensure Amazon EKS control plane logging enabled for all log types"
	FAILED for resource: aws_eks_cluster.fail
	File: /terraform/aws/eks/eks_cluster.tf:13-20

		13 | resource "aws_eks_cluster" "fail" {
		14 |   name     = "fail_cluster"
		15 |   role_arn = var.cluster_arn
		16 |   vpc_config {
		17 |     endpoint_public_access = true
		18 |     public_access_cidrs    = ["0.0.0.0/0"]
		19 |   }
		20 | }


Check: CKV_AWS_134: "Ensure that Amazon ElastiCache Redis clusters have automatic backup turned on"
	FAILED for resource: aws_elasticache_cluster.default
	File: /terraform/aws/elasticache/elasticache_cluster.tf:6-12

		6  | resource "aws_elasticache_cluster" "default" {
		7  |   cluster_id           = "cluster"
		8  |   engine               = "redis"
		9  |   node_type            = "cache.m5.large"
		10 |   num_cache_nodes      = 1
		11 |   parameter_group_name = "default.redis6.x"
		12 | }


Check: CKV_AWS_31: "Ensure all data stored in the Elasticache Replication Group is securely encrypted at transit and has auth token"
	FAILED for resource: aws_elasticache_replication_group.fail
	File: /terraform/aws/elasticache/elasticache_replication_group.tf:10-22

		10 | resource "aws_elasticache_replication_group" "fail" {
		11 |   replication_group_id          = "tf-%s"
		12 |   replication_group_description = "test description"
		13 |   node_type                     = "cache.t2.micro"
		14 |   number_cache_clusters         = "1"
		15 |   port                          = 6379
		16 |   subnet_group_name             = aws_elasticache_subnet_group.bar.name
		17 |   security_group_ids            = [aws_security_group.bar.id]
		18 |   parameter_group_name          = "default.redis3.2"
		19 |   availability_zones            = [data.aws_availability_zones.available.names[0]]
		20 |   engine_version                = "3.2.6"
		21 |   transit_encryption_enabled    = false
		22 | }


Check: CKV_AWS_29: "Ensure all data stored in the Elasticache Replication Group is securely encrypted at rest"
	FAILED for resource: aws_elasticache_replication_group.fail
	File: /terraform/aws/elasticache/elasticache_replication_group.tf:10-22

		10 | resource "aws_elasticache_replication_group" "fail" {
		11 |   replication_group_id          = "tf-%s"
		12 |   replication_group_description = "test description"
		13 |   node_type                     = "cache.t2.micro"
		14 |   number_cache_clusters         = "1"
		15 |   port                          = 6379
		16 |   subnet_group_name             = aws_elasticache_subnet_group.bar.name
		17 |   security_group_ids            = [aws_security_group.bar.id]
		18 |   parameter_group_name          = "default.redis3.2"
		19 |   availability_zones            = [data.aws_availability_zones.available.names[0]]
		20 |   engine_version                = "3.2.6"
		21 |   transit_encryption_enabled    = false
		22 | }


Check: CKV_AWS_191: "Ensure Elasticache replication group is encrypted by KMS using a customer managed Key (CMK)"
	FAILED for resource: aws_elasticache_replication_group.fail
	File: /terraform/aws/elasticache/elasticache_replication_group.tf:10-22

		10 | resource "aws_elasticache_replication_group" "fail" {
		11 |   replication_group_id          = "tf-%s"
		12 |   replication_group_description = "test description"
		13 |   node_type                     = "cache.t2.micro"
		14 |   number_cache_clusters         = "1"
		15 |   port                          = 6379
		16 |   subnet_group_name             = aws_elasticache_subnet_group.bar.name
		17 |   security_group_ids            = [aws_security_group.bar.id]
		18 |   parameter_group_name          = "default.redis3.2"
		19 |   availability_zones            = [data.aws_availability_zones.available.names[0]]
		20 |   engine_version                = "3.2.6"
		21 |   transit_encryption_enabled    = false
		22 | }


Check: CKV_AWS_30: "Ensure all data stored in the Elasticache Replication Group is securely encrypted at transit"
	FAILED for resource: aws_elasticache_replication_group.fail
	File: /terraform/aws/elasticache/elasticache_replication_group.tf:10-22

		10 | resource "aws_elasticache_replication_group" "fail" {
		11 |   replication_group_id          = "tf-%s"
		12 |   replication_group_description = "test description"
		13 |   node_type                     = "cache.t2.micro"
		14 |   number_cache_clusters         = "1"
		15 |   port                          = 6379
		16 |   subnet_group_name             = aws_elasticache_subnet_group.bar.name
		17 |   security_group_ids            = [aws_security_group.bar.id]
		18 |   parameter_group_name          = "default.redis3.2"
		19 |   availability_zones            = [data.aws_availability_zones.available.names[0]]
		20 |   engine_version                = "3.2.6"
		21 |   transit_encryption_enabled    = false
		22 | }


Check: CKV_AWS_23: "Ensure every security groups rule has a description"
	FAILED for resource: aws_elasticache_security_group.bar
	File: /terraform/aws/elasticache/elasticache_security_group.tf:7-10

		7  | resource "aws_elasticache_security_group" "bar" {
		8  |   name                 = "elasticache-security-group"
		9  |   security_group_names = [aws_security_group.bar.name]
		10 | }


Check: CKV_AWS_31: "Ensure all data stored in the Elasticache Replication Group is securely encrypted at transit and has auth token"
	FAILED for resource: aws_elasticache_replication_group.fail
	File: /terraform/aws/elasticsearch/elasticache_replication_group.tf:10-15

		10 | resource "aws_elasticache_replication_group" "fail" {
		11 |   replication_group_id          = "foo"
		12 |   replication_group_description = "my foo cluster"
		13 |
		14 |   at_rest_encryption_enabled = false
		15 | }


Check: CKV_AWS_29: "Ensure all data stored in the Elasticache Replication Group is securely encrypted at rest"
	FAILED for resource: aws_elasticache_replication_group.fail
	File: /terraform/aws/elasticsearch/elasticache_replication_group.tf:10-15

		10 | resource "aws_elasticache_replication_group" "fail" {
		11 |   replication_group_id          = "foo"
		12 |   replication_group_description = "my foo cluster"
		13 |
		14 |   at_rest_encryption_enabled = false
		15 | }


Check: CKV_AWS_191: "Ensure Elasticache replication group is encrypted by KMS using a customer managed Key (CMK)"
	FAILED for resource: aws_elasticache_replication_group.fail
	File: /terraform/aws/elasticsearch/elasticache_replication_group.tf:10-15

		10 | resource "aws_elasticache_replication_group" "fail" {
		11 |   replication_group_id          = "foo"
		12 |   replication_group_description = "my foo cluster"
		13 |
		14 |   at_rest_encryption_enabled = false
		15 | }


Check: CKV_AWS_30: "Ensure all data stored in the Elasticache Replication Group is securely encrypted at transit"
	FAILED for resource: aws_elasticache_replication_group.fail
	File: /terraform/aws/elasticsearch/elasticache_replication_group.tf:10-15

		10 | resource "aws_elasticache_replication_group" "fail" {
		11 |   replication_group_id          = "foo"
		12 |   replication_group_description = "my foo cluster"
		13 |
		14 |   at_rest_encryption_enabled = false
		15 | }


Check: CKV_AWS_137: "Ensure that Elasticsearch is configured inside a VPC"
	FAILED for resource: aws_elasticsearch_domain.node_to_node_encryption_disabled
	File: /terraform/aws/elasticsearch/elastisearch_domain.tf:17-41

		17 | resource "aws_elasticsearch_domain" "node_to_node_encryption_disabled" {
		18 |   domain_name = "node_to_node_encryption_disabled"
		19 |   domain_endpoint_options {
		20 |     enforce_https       = false
		21 |     tls_security_policy = "Policy-Min-TLS-1-0-2019-07"
		22 |   }
		23 |
		24 |   cluster_config {
		25 |     instance_count = 2 // a value > 1
		26 |   }
		27 |
		28 |   encrypt_at_rest {
		29 |     enabled = false
		30 |   }
		31 |
		32 |   node_to_node_encryption {
		33 |     enabled = false
		34 |   }
		35 |
		36 |   #   log_publishing_options {
		37 |   #   cloudwatch_log_group_arn = aws_cloudwatch_log_group.example.arn
		38 |   #   log_type                 = "INDEX_SLOW_LOGS"
		39 |   #   enabled                  = false
		40 |   # }
		41 | }


Check: CKV_AWS_5: "Ensure all data stored in the Elasticsearch is securely encrypted at rest"
	FAILED for resource: aws_elasticsearch_domain.node_to_node_encryption_disabled
	File: /terraform/aws/elasticsearch/elastisearch_domain.tf:17-41

		17 | resource "aws_elasticsearch_domain" "node_to_node_encryption_disabled" {
		18 |   domain_name = "node_to_node_encryption_disabled"
		19 |   domain_endpoint_options {
		20 |     enforce_https       = false
		21 |     tls_security_policy = "Policy-Min-TLS-1-0-2019-07"
		22 |   }
		23 |
		24 |   cluster_config {
		25 |     instance_count = 2 // a value > 1
		26 |   }
		27 |
		28 |   encrypt_at_rest {
		29 |     enabled = false
		30 |   }
		31 |
		32 |   node_to_node_encryption {
		33 |     enabled = false
		34 |   }
		35 |
		36 |   #   log_publishing_options {
		37 |   #   cloudwatch_log_group_arn = aws_cloudwatch_log_group.example.arn
		38 |   #   log_type                 = "INDEX_SLOW_LOGS"
		39 |   #   enabled                  = false
		40 |   # }
		41 | }


Check: CKV_AWS_84: "Ensure Elasticsearch Domain Logging is enabled"
	FAILED for resource: aws_elasticsearch_domain.node_to_node_encryption_disabled
	File: /terraform/aws/elasticsearch/elastisearch_domain.tf:17-41

		17 | resource "aws_elasticsearch_domain" "node_to_node_encryption_disabled" {
		18 |   domain_name = "node_to_node_encryption_disabled"
		19 |   domain_endpoint_options {
		20 |     enforce_https       = false
		21 |     tls_security_policy = "Policy-Min-TLS-1-0-2019-07"
		22 |   }
		23 |
		24 |   cluster_config {
		25 |     instance_count = 2 // a value > 1
		26 |   }
		27 |
		28 |   encrypt_at_rest {
		29 |     enabled = false
		30 |   }
		31 |
		32 |   node_to_node_encryption {
		33 |     enabled = false
		34 |   }
		35 |
		36 |   #   log_publishing_options {
		37 |   #   cloudwatch_log_group_arn = aws_cloudwatch_log_group.example.arn
		38 |   #   log_type                 = "INDEX_SLOW_LOGS"
		39 |   #   enabled                  = false
		40 |   # }
		41 | }


Check: CKV_AWS_6: "Ensure all Elasticsearch has node-to-node encryption enabled"
	FAILED for resource: aws_elasticsearch_domain.node_to_node_encryption_disabled
	File: /terraform/aws/elasticsearch/elastisearch_domain.tf:17-41

		17 | resource "aws_elasticsearch_domain" "node_to_node_encryption_disabled" {
		18 |   domain_name = "node_to_node_encryption_disabled"
		19 |   domain_endpoint_options {
		20 |     enforce_https       = false
		21 |     tls_security_policy = "Policy-Min-TLS-1-0-2019-07"
		22 |   }
		23 |
		24 |   cluster_config {
		25 |     instance_count = 2 // a value > 1
		26 |   }
		27 |
		28 |   encrypt_at_rest {
		29 |     enabled = false
		30 |   }
		31 |
		32 |   node_to_node_encryption {
		33 |     enabled = false
		34 |   }
		35 |
		36 |   #   log_publishing_options {
		37 |   #   cloudwatch_log_group_arn = aws_cloudwatch_log_group.example.arn
		38 |   #   log_type                 = "INDEX_SLOW_LOGS"
		39 |   #   enabled                  = false
		40 |   # }
		41 | }


Check: CKV_AWS_83: "Ensure Elasticsearch Domain enforces HTTPS"
	FAILED for resource: aws_elasticsearch_domain.node_to_node_encryption_disabled
	File: /terraform/aws/elasticsearch/elastisearch_domain.tf:17-41

		17 | resource "aws_elasticsearch_domain" "node_to_node_encryption_disabled" {
		18 |   domain_name = "node_to_node_encryption_disabled"
		19 |   domain_endpoint_options {
		20 |     enforce_https       = false
		21 |     tls_security_policy = "Policy-Min-TLS-1-0-2019-07"
		22 |   }
		23 |
		24 |   cluster_config {
		25 |     instance_count = 2 // a value > 1
		26 |   }
		27 |
		28 |   encrypt_at_rest {
		29 |     enabled = false
		30 |   }
		31 |
		32 |   node_to_node_encryption {
		33 |     enabled = false
		34 |   }
		35 |
		36 |   #   log_publishing_options {
		37 |   #   cloudwatch_log_group_arn = aws_cloudwatch_log_group.example.arn
		38 |   #   log_type                 = "INDEX_SLOW_LOGS"
		39 |   #   enabled                  = false
		40 |   # }
		41 | }


Check: CKV_AWS_150: "Ensure that Load Balancer has deletion protection enabled"
	FAILED for resource: aws_alb.fail
	File: /terraform/aws/elb/alb.tf:12-24

		12 | resource "aws_alb" "fail" {
		13 |   name               = "bad_alb"
		14 |   internal           = false
		15 |   load_balancer_type = "application"
		16 |
		17 |   # access_logs {
		18 |   #   bucket  = aws_s3_bucket.lb_logs.bucket
		19 |   #   prefix  = "test-lb"
		20 |   #   enabled = true
		21 |   # }
		22 |
		23 |   drop_invalid_header_fields = false
		24 | }


Check: CKV_AWS_91: "Ensure the ELBv2 (Application/Network) has access logging enabled"
	FAILED for resource: aws_alb.fail
	File: /terraform/aws/elb/alb.tf:12-24

		12 | resource "aws_alb" "fail" {
		13 |   name               = "bad_alb"
		14 |   internal           = false
		15 |   load_balancer_type = "application"
		16 |
		17 |   # access_logs {
		18 |   #   bucket  = aws_s3_bucket.lb_logs.bucket
		19 |   #   prefix  = "test-lb"
		20 |   #   enabled = true
		21 |   # }
		22 |
		23 |   drop_invalid_header_fields = false
		24 | }


Check: CKV_AWS_131: "Ensure that ALB drops HTTP headers"
	FAILED for resource: aws_alb.fail
	File: /terraform/aws/elb/alb.tf:12-24

		12 | resource "aws_alb" "fail" {
		13 |   name               = "bad_alb"
		14 |   internal           = false
		15 |   load_balancer_type = "application"
		16 |
		17 |   # access_logs {
		18 |   #   bucket  = aws_s3_bucket.lb_logs.bucket
		19 |   #   prefix  = "test-lb"
		20 |   #   enabled = true
		21 |   # }
		22 |
		23 |   drop_invalid_header_fields = false
		24 | }


Check: CKV_AWS_2: "Ensure ALB protocol is HTTPS"
	FAILED for resource: aws_alb_listener.fail
	File: /terraform/aws/elb/alb_listener.tf:8-10

		8  | resource "aws_alb_listener" "fail" {
		9  |   protocol = "HTTP"
		10 | }


Check: CKV_AWS_103: "Ensure that load balancer is using TLS 1.2"
	FAILED for resource: aws_alb_listener.fail
	File: /terraform/aws/elb/alb_listener.tf:8-10

		8  | resource "aws_alb_listener" "fail" {
		9  |   protocol = "HTTP"
		10 | }


Check: CKV_AWS_171: "Ensure Cluster security configuration encryption is using SSE-KMS"
	FAILED for resource: aws_emr_security_configuration.fail
	File: /terraform/aws/emr/emr_security_configuration.tf:5-23

		5  | resource "aws_emr_security_configuration" "fail" {
		6  |   name = "fail"
		7  |
		8  |   configuration = <<EOF
		9  | {
		10 |   "EncryptionConfiguration": {
		11 |     "EnableAtRestEncryption": true,
		12 |     "AtRestEncryptionConfiguration": {
		13 |       "S3EncryptionConfiguration": {
		14 |         "EncryptionMode": "SSE-S3"
		15 |       },
		16 |       "LocalDiskEncryptionConfiguration": {
		17 |         "EncryptionKeyProviderType": "AwsS3"
		18 |       }
		19 |     }
		20 |   }
		21 | }
		22 | EOF
		23 | }


Check: CKV_AWS_178: "Ensure fx ontap file system is encrypted by KMS using a customer managed Key (CMK)"
	FAILED for resource: aws_fsx_ontap_file_system.fail
	File: /terraform/aws/fsx/fsx.tf:5-11

		5  | resource "aws_fsx_ontap_file_system" "fail" {
		6  |   storage_capacity    = 1024
		7  |   subnet_ids          = [aws_subnet.test1.id, aws_subnet.test2.id]
		8  |   deployment_type     = "MULTI_AZ_1"
		9  |   throughput_capacity = 512
		10 |   preferred_subnet_id = aws_subnet.test1.id
		11 | }


Check: CKV_AWS_190: "Ensure lustre file systems is encrypted by KMS using a customer managed Key (CMK)"
	FAILED for resource: aws_fsx_lustre_file_system.fail
	File: /terraform/aws/fsx/fsx_lustre.tf:4-9

		4 | resource "aws_fsx_lustre_file_system" "fail" {
		5 |   storage_capacity            = 1200
		6 |   subnet_ids                  = [aws_subnet.test1.id]
		7 |   deployment_type             = "PERSISTENT_1"
		8 |   per_unit_storage_throughput = 50
		9 | }


Check: CKV_AWS_179: "Ensure FSX Windows filesystem is encrypted by KMS using a customer managed Key (CMK)"
	FAILED for resource: aws_fsx_windows_file_system.fail
	File: /terraform/aws/fsx/fsx_windows.tf:4-10

		4  | resource "aws_fsx_windows_file_system" "fail" {
		5  |   active_directory_id = aws_directory_service_directory.test.id
		6  |   skip_final_backup   = true
		7  |   storage_capacity    = 32
		8  |   subnet_ids          = [aws_subnet.test1.id]
		9  |   throughput_capacity = 8
		10 | }


Check: CKV_AWS_167: "Ensure Glacier Vault access policy is not public by only allowing specific services or principals to access it"
	FAILED for resource: aws_glacier_vault.my_archive2
	File: /terraform/aws/glacier_vault/glacier_vault.tf:6-31

		6  | resource "aws_glacier_vault" "my_archive2" {
		7  |   name = "MyArchive"
		8  |
		9  |   access_policy = <<EOF
		10 | {
		11 |     "Version":"2012-10-17",
		12 |     "Statement":[
		13 |        {
		14 |           "Sid": "add-read-only-perm",
		15 |            "Principal": {
		16 |             "AWS": [
		17 |                 "arn:aws:iam::123456789101:role/vault-reader",
		18 |                 "*"
		19 |             ]
		20 |           },
		21 |           "Effect": "Allow",
		22 |           "Action": [
		23 |              "glacier:InitiateJob",
		24 |              "glacier:GetJobOutput"
		25 |           ],
		26 |           "Resource": "arn:aws:glacier:eu-west-1:432981146916:vaults/MyArchive"
		27 |        }
		28 |     ]
		29 | }
		30 | EOF
		31 | }


Check: CKV_AWS_75: "Ensure Global Accelerator accelerator has flow logs enabled"
	FAILED for resource: aws_globalaccelerator_accelerator.example
	File: /terraform/aws/globacc/globacc.tf:4-11

		4  | resource "aws_globalaccelerator_accelerator" "example" {
		5  |   name            = "Example"
		6  |   ip_address_type = "IPV4"
		7  |   enabled         = true
		8  |   attributes {
		9  |     flow_logs_enabled = false
		10 |   }
		11 | }


Check: CKV_AWS_94: "Ensure Glue Data Catalog Encryption is enabled"
	FAILED for resource: aws_glue_data_catalog_encryption_settings.test
	File: /terraform/aws/glue/glue_data_catalog_encryption_settings.tf:5-14

		5  | resource "aws_glue_data_catalog_encryption_settings" "test" {
		6  |   data_catalog_encryption_settings {
		7  |     connection_password_encryption {
		8  |       return_connection_password_encrypted = false
		9  |     }
		10 |     encryption_at_rest {
		11 |       catalog_encryption_mode = "DISABLED"
		12 |     }
		13 |   }
		14 | }


Check: CKV_AWS_99: "Ensure Glue Security Configuration Encryption is enabled"
	FAILED for resource: aws_glue_security_configuration.test
	File: /terraform/aws/glue/glue_security_configuration.tf:5-22

		5  | resource "aws_glue_security_configuration" "test" {
		6  |   name = "example"
		7  |
		8  |   encryption_configuration {
		9  |     cloudwatch_encryption {
		10 |       cloudwatch_encryption_mode = "DISABLED"
		11 |     }
		12 |
		13 |     job_bookmarks_encryption {
		14 |       job_bookmarks_encryption_mode = "DISABLED"
		15 |     }
		16 |
		17 |     s3_encryption {
		18 |       kms_key_arn        = data.aws_kms_key.example.arn
		19 |       s3_encryption_mode = "SSE-KMS"
		20 |     }
		21 |   }
		22 | }


Check: CKV_AWS_11: "Ensure IAM password policy requires at least one lowercase letter"
	FAILED for resource: aws_iam_account_password_policy.fail
	File: /terraform/aws/iam/aws_iam_account_password_policy.tf:11-12

		11 | resource "aws_iam_account_password_policy" "fail" {
		12 | }


Check: CKV_AWS_15: "Ensure IAM password policy requires at least one uppercase letter"
	FAILED for resource: aws_iam_account_password_policy.fail
	File: /terraform/aws/iam/aws_iam_account_password_policy.tf:11-12

		11 | resource "aws_iam_account_password_policy" "fail" {
		12 | }


Check: CKV_AWS_9: "Ensure IAM password policy expires passwords within 90 days or less"
	FAILED for resource: aws_iam_account_password_policy.fail
	File: /terraform/aws/iam/aws_iam_account_password_policy.tf:11-12

		11 | resource "aws_iam_account_password_policy" "fail" {
		12 | }


Check: CKV_AWS_13: "Ensure IAM password policy prevents password reuse"
	FAILED for resource: aws_iam_account_password_policy.fail
	File: /terraform/aws/iam/aws_iam_account_password_policy.tf:11-12

		11 | resource "aws_iam_account_password_policy" "fail" {
		12 | }


Check: CKV_AWS_12: "Ensure IAM password policy requires at least one number"
	FAILED for resource: aws_iam_account_password_policy.fail
	File: /terraform/aws/iam/aws_iam_account_password_policy.tf:11-12

		11 | resource "aws_iam_account_password_policy" "fail" {
		12 | }


Check: CKV_AWS_10: "Ensure IAM password policy requires minimum length of 14 or greater"
	FAILED for resource: aws_iam_account_password_policy.fail
	File: /terraform/aws/iam/aws_iam_account_password_policy.tf:11-12

		11 | resource "aws_iam_account_password_policy" "fail" {
		12 | }


Check: CKV_AWS_14: "Ensure IAM password policy requires at least one symbol"
	FAILED for resource: aws_iam_account_password_policy.fail
	File: /terraform/aws/iam/aws_iam_account_password_policy.tf:11-12

		11 | resource "aws_iam_account_password_policy" "fail" {
		12 | }


Check: CKV_AWS_180: "Ensure Image Builder component is encrypted by KMS using a customer managed Key (CMK)"
	FAILED for resource: aws_imagebuilder_component.fail
	File: /terraform/aws/imagebuilder/imagebuilder.tf:4-22

		4  | resource "aws_imagebuilder_component" "fail" {
		5  |   data = yamlencode({
		6  |     phases = [{
		7  |       name = "build"
		8  |       steps = [{
		9  |         action = "ExecuteBash"
		10 |         inputs = {
		11 |           commands = ["echo 'hello world'"]
		12 |         }
		13 |         name      = "example"
		14 |         onFailure = "Continue"
		15 |       }]
		16 |     }]
		17 |     schemaVersion = 1.0
		18 |   })
		19 |   name     = "examplea"
		20 |   platform = "Linux"
		21 |   version  = "1.0.0"
		22 | }


Check: CKV_AWS_79: "Ensure Instance Metadata Service Version 1 is not enabled"
	FAILED for resource: aws_instance.fail
	File: /terraform/aws/instance/instance.tf:14-32

		14 | resource "aws_instance" "fail" {
		15 |   ami                         = var.ami
		16 |   instance_type               = "t2.nano"
		17 |   associate_public_ip_address = true
		18 |   vpc_security_group_ids = [
		19 |   aws_security_group.web-node.id]
		20 |   subnet_id = aws_subnet.web_subnet.id
		21 |   user_data = <<EOF
		22 | 		 #! /bin/bash
		23 | 		 sudo apt-get update
		24 | 		 sudo apt-get install -y apache2
		25 | 		 sudo systemctl start apache2
		26 | 		 sudo systemctl enable apache2
		27 | 		 export AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMAAA
		28 | 		 export AWS_SECRET_ACCESS_KEY=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
		29 | 		 export AWS_DEFAULT_REGION=us-west-2
		30 | 		 echo "<h1>Deployed via Terraform</h1>" | sudo tee /var/www/html/index.html
		31 | 		 EOF
		32 | }


Check: CKV_AWS_88: "EC2 instance should not have public IP."
	FAILED for resource: aws_instance.fail
	File: /terraform/aws/instance/instance.tf:14-32

		14 | resource "aws_instance" "fail" {
		15 |   ami                         = var.ami
		16 |   instance_type               = "t2.nano"
		17 |   associate_public_ip_address = true
		18 |   vpc_security_group_ids = [
		19 |   aws_security_group.web-node.id]
		20 |   subnet_id = aws_subnet.web_subnet.id
		21 |   user_data = <<EOF
		22 | 		 #! /bin/bash
		23 | 		 sudo apt-get update
		24 | 		 sudo apt-get install -y apache2
		25 | 		 sudo systemctl start apache2
		26 | 		 sudo systemctl enable apache2
		27 | 		 export AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMAAA
		28 | 		 export AWS_SECRET_ACCESS_KEY=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
		29 | 		 export AWS_DEFAULT_REGION=us-west-2
		30 | 		 echo "<h1>Deployed via Terraform</h1>" | sudo tee /var/www/html/index.html
		31 | 		 EOF
		32 | }


Check: CKV_AWS_46: "Ensure no hard-coded secrets exist in EC2 user data"
	FAILED for resource: aws_instance.fail
	File: /terraform/aws/instance/instance.tf:14-32

		14 | resource "aws_instance" "fail" {
		15 |   ami                         = var.ami
		16 |   instance_type               = "t2.nano"
		17 |   associate_public_ip_address = true
		18 |   vpc_security_group_ids = [
		19 |   aws_security_group.web-node.id]
		20 |   subnet_id = aws_subnet.web_subnet.id
		21 |   user_data = <<EOF
		22 | 		 #! /bin/bash
		23 | 		 sudo apt-get update
		24 | 		 sudo apt-get install -y apache2
		25 | 		 sudo systemctl start apache2
		26 | 		 sudo systemctl enable apache2
		27 | 		 export AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMAAA
		28 | 		 export AWS_SECRET_ACCESS_KEY=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
		29 | 		 export AWS_DEFAULT_REGION=us-west-2
		30 | 		 echo "<h1>Deployed via Terraform</h1>" | sudo tee /var/www/html/index.html
		31 | 		 EOF
		32 | }


Check: CKV_AWS_126: "Ensure that detailed monitoring is enabled for EC2 instances"
	FAILED for resource: aws_instance.fail
	File: /terraform/aws/instance/instance.tf:14-32

		14 | resource "aws_instance" "fail" {
		15 |   ami                         = var.ami
		16 |   instance_type               = "t2.nano"
		17 |   associate_public_ip_address = true
		18 |   vpc_security_group_ids = [
		19 |   aws_security_group.web-node.id]
		20 |   subnet_id = aws_subnet.web_subnet.id
		21 |   user_data = <<EOF
		22 | 		 #! /bin/bash
		23 | 		 sudo apt-get update
		24 | 		 sudo apt-get install -y apache2
		25 | 		 sudo systemctl start apache2
		26 | 		 sudo systemctl enable apache2
		27 | 		 export AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMAAA
		28 | 		 export AWS_SECRET_ACCESS_KEY=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
		29 | 		 export AWS_DEFAULT_REGION=us-west-2
		30 | 		 echo "<h1>Deployed via Terraform</h1>" | sudo tee /var/www/html/index.html
		31 | 		 EOF
		32 | }


Check: CKV_AWS_135: "Ensure that EC2 is EBS optimized"
	FAILED for resource: aws_instance.fail
	File: /terraform/aws/instance/instance.tf:14-32

		14 | resource "aws_instance" "fail" {
		15 |   ami                         = var.ami
		16 |   instance_type               = "t2.nano"
		17 |   associate_public_ip_address = true
		18 |   vpc_security_group_ids = [
		19 |   aws_security_group.web-node.id]
		20 |   subnet_id = aws_subnet.web_subnet.id
		21 |   user_data = <<EOF
		22 | 		 #! /bin/bash
		23 | 		 sudo apt-get update
		24 | 		 sudo apt-get install -y apache2
		25 | 		 sudo systemctl start apache2
		26 | 		 sudo systemctl enable apache2
		27 | 		 export AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMAAA
		28 | 		 export AWS_SECRET_ACCESS_KEY=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
		29 | 		 export AWS_DEFAULT_REGION=us-west-2
		30 | 		 echo "<h1>Deployed via Terraform</h1>" | sudo tee /var/www/html/index.html
		31 | 		 EOF
		32 | }


Check: CKV_AWS_8: "Ensure all data stored in the Launch configuration EBS is securely encrypted"
	FAILED for resource: aws_instance.fail
	File: /terraform/aws/instance/instance.tf:14-32

		14 | resource "aws_instance" "fail" {
		15 |   ami                         = var.ami
		16 |   instance_type               = "t2.nano"
		17 |   associate_public_ip_address = true
		18 |   vpc_security_group_ids = [
		19 |   aws_security_group.web-node.id]
		20 |   subnet_id = aws_subnet.web_subnet.id
		21 |   user_data = <<EOF
		22 | 		 #! /bin/bash
		23 | 		 sudo apt-get update
		24 | 		 sudo apt-get install -y apache2
		25 | 		 sudo systemctl start apache2
		26 | 		 sudo systemctl enable apache2
		27 | 		 export AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMAAA
		28 | 		 export AWS_SECRET_ACCESS_KEY=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
		29 | 		 export AWS_DEFAULT_REGION=us-west-2
		30 | 		 echo "<h1>Deployed via Terraform</h1>" | sudo tee /var/www/html/index.html
		31 | 		 EOF
		32 | }


Check: CKV_AWS_43: "Ensure Kinesis Stream is securely encrypted"
	FAILED for resource: aws_kinesis_stream.fail
	File: /terraform/aws/kinesis/kinesis_stream.tf:8-11

		8  | resource "aws_kinesis_stream" "fail" {
		9  |   name        = "test_stream-%[1]d"
		10 |   shard_count = 1
		11 | }


Check: CKV_AWS_185: "Ensure Kinesis Stream is encrypted by KMS using a customer managed Key (CMK)"
	FAILED for resource: aws_kinesis_stream.fail
	File: /terraform/aws/kinesis/kinesis_stream.tf:8-11

		8  | resource "aws_kinesis_stream" "fail" {
		9  |   name        = "test_stream-%[1]d"
		10 |   shard_count = 1
		11 | }


Check: CKV_AWS_177: "Ensure Kinesis Video Stream is encrypted by KMS using a customer managed Key (CMK)"
	FAILED for resource: aws_kinesis_video_stream.fail
	File: /terraform/aws/kinesis/kinesis_video_stream.tf:4-9

		4 | resource "aws_kinesis_video_stream" "fail" {
		5 |   name = "terraform-kinesis-video-stream-test"
		6 |
		7 |   data_retention_in_hours = 1
		8 |   device_name             = "kinesis-video-device-name"
		9 | }


Check: CKV_AWS_33: "Ensure KMS key policy does not contain wildcard (*) principal"
	FAILED for resource: aws_kms_key.fail_0
	File: /terraform/aws/kms/kms.tf:7-32

		7  | resource "aws_kms_key" "fail_0" {
		8  |   description = "description"
		9  |   policy      = <<POLICY
		10 | {
		11 |   "Version": "2012-10-17",
		12 |   "Statement": [
		13 |     {
		14 |       "Effect": "Allow",
		15 |       "Principal": {
		16 |         "AWS": "arn:aws:iam::111122223333:root"
		17 |       },
		18 |       "Action": "kms:*",
		19 |       "Resource": "*"
		20 |     },
		21 |     {
		22 |       "Effect": "Allow",
		23 |       "Principal": {
		24 |         "AWS": "*"
		25 |       },
		26 |       "Action": "kms:*",
		27 |       "Resource": "*"
		28 |     },
		29 |   ]
		30 | }
		31 | POLICY
		32 | }


Check: CKV_AWS_7: "Ensure rotation for customer created CMKs is enabled"
	FAILED for resource: aws_kms_key.fail_0
	File: /terraform/aws/kms/kms.tf:7-32

		7  | resource "aws_kms_key" "fail_0" {
		8  |   description = "description"
		9  |   policy      = <<POLICY
		10 | {
		11 |   "Version": "2012-10-17",
		12 |   "Statement": [
		13 |     {
		14 |       "Effect": "Allow",
		15 |       "Principal": {
		16 |         "AWS": "arn:aws:iam::111122223333:root"
		17 |       },
		18 |       "Action": "kms:*",
		19 |       "Resource": "*"
		20 |     },
		21 |     {
		22 |       "Effect": "Allow",
		23 |       "Principal": {
		24 |         "AWS": "*"
		25 |       },
		26 |       "Action": "kms:*",
		27 |       "Resource": "*"
		28 |     },
		29 |   ]
		30 | }
		31 | POLICY
		32 | }


Check: CKV_AWS_50: "X-ray tracing is enabled for Lambda"
	FAILED for resource: aws_lambda_function.morefail
	File: /terraform/aws/lambda/lambda.tf:13-24

		13 | resource "aws_lambda_function" "morefail" {
		14 |   function_name = "morefail"
		15 |   role          = ""
		16 |   handler       = "index.handler"
		17 |   runtime       = "python3.9"
		18 |   environment {
		19 |     variables = {
		20 |       AWS_ACCESS_KEY_ID     = "AKIAIOSFODNN7EXAMPLE",
		21 |       AWS_SECRET_ACCESS_KEY = "MYMOSTSECRETTHING"
		22 |     }
		23 |   }
		24 | }


Check: CKV_AWS_117: "Ensure that AWS Lambda function is configured inside a VPC"
	FAILED for resource: aws_lambda_function.morefail
	File: /terraform/aws/lambda/lambda.tf:13-24

		13 | resource "aws_lambda_function" "morefail" {
		14 |   function_name = "morefail"
		15 |   role          = ""
		16 |   handler       = "index.handler"
		17 |   runtime       = "python3.9"
		18 |   environment {
		19 |     variables = {
		20 |       AWS_ACCESS_KEY_ID     = "AKIAIOSFODNN7EXAMPLE",
		21 |       AWS_SECRET_ACCESS_KEY = "MYMOSTSECRETTHING"
		22 |     }
		23 |   }
		24 | }


Check: CKV_AWS_116: "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"
	FAILED for resource: aws_lambda_function.morefail
	File: /terraform/aws/lambda/lambda.tf:13-24

		13 | resource "aws_lambda_function" "morefail" {
		14 |   function_name = "morefail"
		15 |   role          = ""
		16 |   handler       = "index.handler"
		17 |   runtime       = "python3.9"
		18 |   environment {
		19 |     variables = {
		20 |       AWS_ACCESS_KEY_ID     = "AKIAIOSFODNN7EXAMPLE",
		21 |       AWS_SECRET_ACCESS_KEY = "MYMOSTSECRETTHING"
		22 |     }
		23 |   }
		24 | }


Check: CKV_AWS_173: "Check encryption settings for Lambda environmental variable"
	FAILED for resource: aws_lambda_function.morefail
	File: /terraform/aws/lambda/lambda.tf:13-24

		13 | resource "aws_lambda_function" "morefail" {
		14 |   function_name = "morefail"
		15 |   role          = ""
		16 |   handler       = "index.handler"
		17 |   runtime       = "python3.9"
		18 |   environment {
		19 |     variables = {
		20 |       AWS_ACCESS_KEY_ID     = "AKIAIOSFODNN7EXAMPLE",
		21 |       AWS_SECRET_ACCESS_KEY = "MYMOSTSECRETTHING"
		22 |     }
		23 |   }
		24 | }


Check: CKV_AWS_45: "Ensure no hard-coded secrets exist in lambda environment"
	FAILED for resource: aws_lambda_function.morefail
	File: /terraform/aws/lambda/lambda.tf:13-24

		13 | resource "aws_lambda_function" "morefail" {
		14 |   function_name = "morefail"
		15 |   role          = ""
		16 |   handler       = "index.handler"
		17 |   runtime       = "python3.9"
		18 |   environment {
		19 |     variables = {
		20 |       AWS_ACCESS_KEY_ID     = "AKIAIOSFODNN7EXAMPLE",
		21 |       AWS_SECRET_ACCESS_KEY = "MYMOSTSECRETTHING"
		22 |     }
		23 |   }
		24 | }


Check: CKV_AWS_115: "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"
	FAILED for resource: aws_lambda_function.morefail
	File: /terraform/aws/lambda/lambda.tf:13-24

		13 | resource "aws_lambda_function" "morefail" {
		14 |   function_name = "morefail"
		15 |   role          = ""
		16 |   handler       = "index.handler"
		17 |   runtime       = "python3.9"
		18 |   environment {
		19 |     variables = {
		20 |       AWS_ACCESS_KEY_ID     = "AKIAIOSFODNN7EXAMPLE",
		21 |       AWS_SECRET_ACCESS_KEY = "MYMOSTSECRETTHING"
		22 |     }
		23 |   }
		24 | }


Check: CKV_AWS_8: "Ensure all data stored in the Launch configuration EBS is securely encrypted"
	FAILED for resource: aws_launch_configuration.as_conf
	File: /terraform/aws/launch/launch_configuration.tf:9-16

		9  | resource "aws_launch_configuration" "as_conf" {
		10 |   name          = "web_config"
		11 |   image_id      = data.aws_ami.ubuntu.id
		12 |   instance_type = "t2.micro"
		13 |   user_data     = <<EOF
		14 | export DATABASE_PASSWORD=\"SomeSortOfPassword\"
		15 | EOF
		16 | }


Check: CKV_AWS_150: "Ensure that Load Balancer has deletion protection enabled"
	FAILED for resource: aws_alb.disabled
	File: /terraform/aws/lb/lb.tf:12-17

		12 | resource "aws_alb" "disabled" {
		13 |   internal           = false
		14 |   load_balancer_type = "application"
		15 |   name               = "alb"
		16 |   subnets            = var.public_subnet_ids
		17 | }


Check: CKV_AWS_91: "Ensure the ELBv2 (Application/Network) has access logging enabled"
	FAILED for resource: aws_alb.disabled
	File: /terraform/aws/lb/lb.tf:12-17

		12 | resource "aws_alb" "disabled" {
		13 |   internal           = false
		14 |   load_balancer_type = "application"
		15 |   name               = "alb"
		16 |   subnets            = var.public_subnet_ids
		17 | }


Check: CKV_AWS_131: "Ensure that ALB drops HTTP headers"
	FAILED for resource: aws_alb.disabled
	File: /terraform/aws/lb/lb.tf:12-17

		12 | resource "aws_alb" "disabled" {
		13 |   internal           = false
		14 |   load_balancer_type = "application"
		15 |   name               = "alb"
		16 |   subnets            = var.public_subnet_ids
		17 | }


Check: CKV_AWS_69: "Ensure MQ Broker is not publicly exposed"
	FAILED for resource: aws_mq_broker.fail
	File: /terraform/aws/mq/enable-general-logging.tf:9-30

		9  | resource "aws_mq_broker" "fail" {
		10 |   broker_name = "example"
		11 |
		12 |   configuration {
		13 |     id       = aws_mq_configuration.test.id
		14 |     revision = aws_mq_configuration.test.latest_revision
		15 |   }
		16 |   publicly_accessible = true
		17 |   engine_type         = "ActiveMQ"
		18 |   engine_version      = "5.15.0"
		19 |   host_instance_type  = "mq.t2.micro"
		20 |   security_groups     = [aws_security_group.test.id]
		21 |
		22 |   user {
		23 |     username = "ExampleUser"
		24 |     password = "MindTheGap"
		25 |   }
		26 |   logs {
		27 |     general = false
		28 |     audit   = false
		29 |   }
		30 | }


Check: CKV_AWS_48: "Ensure MQ Broker logging is enabled"
	FAILED for resource: aws_mq_broker.fail
	File: /terraform/aws/mq/enable-general-logging.tf:9-30

		9  | resource "aws_mq_broker" "fail" {
		10 |   broker_name = "example"
		11 |
		12 |   configuration {
		13 |     id       = aws_mq_configuration.test.id
		14 |     revision = aws_mq_configuration.test.latest_revision
		15 |   }
		16 |   publicly_accessible = true
		17 |   engine_type         = "ActiveMQ"
		18 |   engine_version      = "5.15.0"
		19 |   host_instance_type  = "mq.t2.micro"
		20 |   security_groups     = [aws_security_group.test.id]
		21 |
		22 |   user {
		23 |     username = "ExampleUser"
		24 |     password = "MindTheGap"
		25 |   }
		26 |   logs {
		27 |     general = false
		28 |     audit   = false
		29 |   }
		30 | }


Check: CKV_AWS_69: "Ensure MQ Broker is not publicly exposed"
	FAILED for resource: aws_mq_broker.example
	File: /terraform/aws/mq/mq_broker.tf:10-22

		10 | resource "aws_mq_broker" "example" {
		11 |   broker_name = "example"
		12 |
		13 |   engine_type         = "ActiveMQ"
		14 |   engine_version      = "5.15.0"
		15 |   host_instance_type  = "mq.t2.micro"
		16 |   publicly_accessible = true
		17 |
		18 |   user {
		19 |     username = "ExampleUser"
		20 |     password = "MindTheGap"
		21 |   }
		22 | }


Check: CKV_AWS_48: "Ensure MQ Broker logging is enabled"
	FAILED for resource: aws_mq_broker.example
	File: /terraform/aws/mq/mq_broker.tf:10-22

		10 | resource "aws_mq_broker" "example" {
		11 |   broker_name = "example"
		12 |
		13 |   engine_type         = "ActiveMQ"
		14 |   engine_version      = "5.15.0"
		15 |   host_instance_type  = "mq.t2.micro"
		16 |   publicly_accessible = true
		17 |
		18 |   user {
		19 |     username = "ExampleUser"
		20 |     password = "MindTheGap"
		21 |   }
		22 | }


Check: CKV_AWS_81: "Ensure MSK Cluster encryption in rest and transit is enabled"
	FAILED for resource: aws_msk_cluster.name
	File: /terraform/aws/msk/msk_cluster.tf:11-20

		11 | resource "aws_msk_cluster" "name" {
		12 |   name = "example"
		13 |
		14 |   encryption_info {
		15 |     encryption_in_transit {
		16 |       client_broker = "TLS_PLAINTEXT"
		17 |       in_cluster    = true
		18 |     }
		19 |   }
		20 | }


Check: CKV_AWS_80: "Ensure MSK Cluster logging is enabled"
	FAILED for resource: aws_msk_cluster.name
	File: /terraform/aws/msk/msk_cluster.tf:11-20

		11 | resource "aws_msk_cluster" "name" {
		12 |   name = "example"
		13 |
		14 |   encryption_info {
		15 |     encryption_in_transit {
		16 |       client_broker = "TLS_PLAINTEXT"
		17 |       in_cluster    = true
		18 |     }
		19 |   }
		20 | }


Check: CKV_AWS_101: "Ensure Neptune logging is enabled"
	FAILED for resource: aws_neptune_cluster.default
	File: /terraform/aws/neptune/neptune.tf:10-20

		10 | resource "aws_neptune_cluster" "default" {
		11 |   cluster_identifier                  = var.neptune-dbname
		12 |   engine                              = "neptune"
		13 |   backup_retention_period             = 5
		14 |   preferred_backup_window             = "07:00-09:00"
		15 |   skip_final_snapshot                 = true
		16 |   iam_database_authentication_enabled = false
		17 |   apply_immediately                   = true
		18 |   storage_encrypted                   = false
		19 |   # enable_cloudwatch_logs_exports = false
		20 | }


Check: CKV_AWS_44: "Ensure Neptune storage is securely encrypted"
	FAILED for resource: aws_neptune_cluster.default
	File: /terraform/aws/neptune/neptune.tf:10-20

		10 | resource "aws_neptune_cluster" "default" {
		11 |   cluster_identifier                  = var.neptune-dbname
		12 |   engine                              = "neptune"
		13 |   backup_retention_period             = 5
		14 |   preferred_backup_window             = "07:00-09:00"
		15 |   skip_final_snapshot                 = true
		16 |   iam_database_authentication_enabled = false
		17 |   apply_immediately                   = true
		18 |   storage_encrypted                   = false
		19 |   # enable_cloudwatch_logs_exports = false
		20 | }


Check: CKV_AWS_102: "Ensure Neptune Cluster instance is not publicly available"
	FAILED for resource: aws_neptune_cluster_instance.fail
	File: /terraform/aws/neptune/neptune_instance.tf:4-6

		4 | resource "aws_neptune_cluster_instance" "fail" {
		5 |   publicly_accessible = true
		6 | }


Check: CKV_AWS_41: "Ensure no hard coded AWS access key and secret key exists in provider"
	FAILED for resource: aws.default
	File: /terraform/aws/provider/provider.tf:8-12

		8  | provider "aws" {
		9  |   region     = "eu-west-2"
		10 |   access_key = "AKIAXYZDQCEN346Y6EVN"
		11 |   secret_key = "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"
		12 | }


Check: CKV_AWS_170: "Ensure QLDB ledger permissions mode is set to STANDARD"
	FAILED for resource: aws_qldb_ledger.disabled
	File: /terraform/aws/qldb/qldb_ledger.tf:5-10

		5  | resource "aws_qldb_ledger" "disabled" {
		6  |   name             = "ledger"
		7  |   permissions_mode = "ALLOW_ALL"
		8  |
		9  |   deletion_protection = false
		10 | }


Check: CKV_AWS_172: "Ensure QLDB ledger has deletion protection enabled"
	FAILED for resource: aws_qldb_ledger.disabled
	File: /terraform/aws/qldb/qldb_ledger.tf:5-10

		5  | resource "aws_qldb_ledger" "disabled" {
		6  |   name             = "ledger"
		7  |   permissions_mode = "ALLOW_ALL"
		8  |
		9  |   deletion_protection = false
		10 | }


Check: CKV_AWS_157: "Ensure that RDS instances have Multi-AZ enabled"
	FAILED for resource: aws_db_instance.fail
	File: /terraform/aws/rds/db_instance.tf:14-18

		14 | resource "aws_db_instance" "fail" {
		15 |   //storage_encrypted  = true
		16 |   publicly_accessible     = true
		17 |   backup_retention_period = 0
		18 | }


Check: CKV_AWS_129: "Ensure that respective logs of Amazon Relational Database Service (Amazon RDS) are enabled"
	FAILED for resource: aws_db_instance.fail
	File: /terraform/aws/rds/db_instance.tf:14-18

		14 | resource "aws_db_instance" "fail" {
		15 |   //storage_encrypted  = true
		16 |   publicly_accessible     = true
		17 |   backup_retention_period = 0
		18 | }


Check: CKV_AWS_133: "Ensure that RDS instances has backup policy"
	FAILED for resource: aws_db_instance.fail
	File: /terraform/aws/rds/db_instance.tf:14-18

		14 | resource "aws_db_instance" "fail" {
		15 |   //storage_encrypted  = true
		16 |   publicly_accessible     = true
		17 |   backup_retention_period = 0
		18 | }


Check: CKV_AWS_17: "Ensure all data stored in RDS is not publicly accessible"
	FAILED for resource: aws_db_instance.fail
	File: /terraform/aws/rds/db_instance.tf:14-18

		14 | resource "aws_db_instance" "fail" {
		15 |   //storage_encrypted  = true
		16 |   publicly_accessible     = true
		17 |   backup_retention_period = 0
		18 | }


Check: CKV_AWS_118: "Ensure that enhanced monitoring is enabled for Amazon RDS instances"
	FAILED for resource: aws_db_instance.fail
	File: /terraform/aws/rds/db_instance.tf:14-18

		14 | resource "aws_db_instance" "fail" {
		15 |   //storage_encrypted  = true
		16 |   publicly_accessible     = true
		17 |   backup_retention_period = 0
		18 | }


Check: CKV_AWS_16: "Ensure all data stored in the RDS is securely encrypted at rest"
	FAILED for resource: aws_db_instance.fail
	File: /terraform/aws/rds/db_instance.tf:14-18

		14 | resource "aws_db_instance" "fail" {
		15 |   //storage_encrypted  = true
		16 |   publicly_accessible     = true
		17 |   backup_retention_period = 0
		18 | }


Check: CKV_AWS_23: "Ensure every security groups rule has a description"
	FAILED for resource: aws_db_security_group.fail
	File: /terraform/aws/rds/db_security_group.tf:8-9

		8 | resource "aws_db_security_group" "fail" {
		9 | }


Check: CKV_AWS_128: "Ensure that an Amazon RDS Clusters have AWS Identity and Access Management (IAM) authentication enabled"
	FAILED for resource: aws_rds_cluster.fail2
	File: /terraform/aws/rds/rds_cluster.tf:17-23

		17 | resource "aws_rds_cluster" "fail2" {
		18 |   engine                  = "aurora-postgresql"
		19 |   backup_retention_period = 0
		20 |   db_subnet_group_name    = aws_db_subnet_group.default.name
		21 |   master_username         = "james"
		22 |   master_password         = "password12345"
		23 | }


Check: CKV_AWS_96: "Ensure all data stored in Aurora is securely encrypted at rest"
	FAILED for resource: aws_rds_cluster.fail2
	File: /terraform/aws/rds/rds_cluster.tf:17-23

		17 | resource "aws_rds_cluster" "fail2" {
		18 |   engine                  = "aurora-postgresql"
		19 |   backup_retention_period = 0
		20 |   db_subnet_group_name    = aws_db_subnet_group.default.name
		21 |   master_username         = "james"
		22 |   master_password         = "password12345"
		23 | }


Check: CKV_AWS_162: "Ensure RDS cluster has IAM authentication enabled"
	FAILED for resource: aws_rds_cluster.fail2
	File: /terraform/aws/rds/rds_cluster.tf:17-23

		17 | resource "aws_rds_cluster" "fail2" {
		18 |   engine                  = "aurora-postgresql"
		19 |   backup_retention_period = 0
		20 |   db_subnet_group_name    = aws_db_subnet_group.default.name
		21 |   master_username         = "james"
		22 |   master_password         = "password12345"
		23 | }


Check: CKV_AWS_133: "Ensure that RDS instances has backup policy"
	FAILED for resource: aws_rds_cluster.fail2
	File: /terraform/aws/rds/rds_cluster.tf:17-23

		17 | resource "aws_rds_cluster" "fail2" {
		18 |   engine                  = "aurora-postgresql"
		19 |   backup_retention_period = 0
		20 |   db_subnet_group_name    = aws_db_subnet_group.default.name
		21 |   master_username         = "james"
		22 |   master_password         = "password12345"
		23 | }


Check: CKV_AWS_139: "Ensure that RDS clusters have deletion protection enabled"
	FAILED for resource: aws_rds_cluster.fail2
	File: /terraform/aws/rds/rds_cluster.tf:17-23

		17 | resource "aws_rds_cluster" "fail2" {
		18 |   engine                  = "aurora-postgresql"
		19 |   backup_retention_period = 0
		20 |   db_subnet_group_name    = aws_db_subnet_group.default.name
		21 |   master_username         = "james"
		22 |   master_password         = "password12345"
		23 | }


Check: CKV_AWS_17: "Ensure all data stored in RDS is not publicly accessible"
	FAILED for resource: aws_rds_cluster_instance.fail
	File: /terraform/aws/rds/rds_cluster_instance.tf:8-14

		8  | resource "aws_rds_cluster_instance" "fail" {
		9  |   name                            = "bar"
		10 |   performance_insights_enabled    = false
		11 |   performance_insights_kms_key_id = ""
		12 |   kms_key_id                      = ""
		13 |   publicly_accessible             = true
		14 | }


Check: CKV_AWS_118: "Ensure that enhanced monitoring is enabled for Amazon RDS instances"
	FAILED for resource: aws_rds_cluster_instance.fail
	File: /terraform/aws/rds/rds_cluster_instance.tf:8-14

		8  | resource "aws_rds_cluster_instance" "fail" {
		9  |   name                            = "bar"
		10 |   performance_insights_enabled    = false
		11 |   performance_insights_kms_key_id = ""
		12 |   kms_key_id                      = ""
		13 |   publicly_accessible             = true
		14 | }


Check: CKV_AWS_64: "Ensure all data stored in the Redshift cluster is securely encrypted at rest"
	FAILED for resource: aws_redshift_cluster.fail
	File: /terraform/aws/redshift/redshift_cluster.tf:16-28

		16 | resource "aws_redshift_cluster" "fail" {
		17 |   cluster_identifier                  = "examplea"
		18 |   availability_zone                   = data.aws_availability_zones.available.names[0]
		19 |   database_name                       = "mydb"
		20 |   master_username                     = "foo_test"
		21 |   master_password                     = "Mustbe8characters"
		22 |   node_type                           = "dc2.large"
		23 |   automated_snapshot_retention_period = 0
		24 |   allow_version_upgrade               = false
		25 |   skip_final_snapshot                 = true
		26 |   kms_key_id                          = ""
		27 |   cluster_subnet_group_name           = ""
		28 | }


Check: CKV_AWS_154: "Ensure Redshift is not deployed outside of a VPC"
	FAILED for resource: aws_redshift_cluster.fail
	File: /terraform/aws/redshift/redshift_cluster.tf:16-28

		16 | resource "aws_redshift_cluster" "fail" {
		17 |   cluster_identifier                  = "examplea"
		18 |   availability_zone                   = data.aws_availability_zones.available.names[0]
		19 |   database_name                       = "mydb"
		20 |   master_username                     = "foo_test"
		21 |   master_password                     = "Mustbe8characters"
		22 |   node_type                           = "dc2.large"
		23 |   automated_snapshot_retention_period = 0
		24 |   allow_version_upgrade               = false
		25 |   skip_final_snapshot                 = true
		26 |   kms_key_id                          = ""
		27 |   cluster_subnet_group_name           = ""
		28 | }


Check: CKV_AWS_71: "Ensure Redshift Cluster logging is enabled"
	FAILED for resource: aws_redshift_cluster.fail
	File: /terraform/aws/redshift/redshift_cluster.tf:16-28

		16 | resource "aws_redshift_cluster" "fail" {
		17 |   cluster_identifier                  = "examplea"
		18 |   availability_zone                   = data.aws_availability_zones.available.names[0]
		19 |   database_name                       = "mydb"
		20 |   master_username                     = "foo_test"
		21 |   master_password                     = "Mustbe8characters"
		22 |   node_type                           = "dc2.large"
		23 |   automated_snapshot_retention_period = 0
		24 |   allow_version_upgrade               = false
		25 |   skip_final_snapshot                 = true
		26 |   kms_key_id                          = ""
		27 |   cluster_subnet_group_name           = ""
		28 | }


Check: CKV_AWS_87: "Redshift cluster should not be publicly accessible"
	FAILED for resource: aws_redshift_cluster.fail
	File: /terraform/aws/redshift/redshift_cluster.tf:16-28

		16 | resource "aws_redshift_cluster" "fail" {
		17 |   cluster_identifier                  = "examplea"
		18 |   availability_zone                   = data.aws_availability_zones.available.names[0]
		19 |   database_name                       = "mydb"
		20 |   master_username                     = "foo_test"
		21 |   master_password                     = "Mustbe8characters"
		22 |   node_type                           = "dc2.large"
		23 |   automated_snapshot_retention_period = 0
		24 |   allow_version_upgrade               = false
		25 |   skip_final_snapshot                 = true
		26 |   kms_key_id                          = ""
		27 |   cluster_subnet_group_name           = ""
		28 | }


Check: CKV_AWS_142: "Ensure that Redshift cluster is encrypted by KMS"
	FAILED for resource: aws_redshift_cluster.fail
	File: /terraform/aws/redshift/redshift_cluster.tf:16-28

		16 | resource "aws_redshift_cluster" "fail" {
		17 |   cluster_identifier                  = "examplea"
		18 |   availability_zone                   = data.aws_availability_zones.available.names[0]
		19 |   database_name                       = "mydb"
		20 |   master_username                     = "foo_test"
		21 |   master_password                     = "Mustbe8characters"
		22 |   node_type                           = "dc2.large"
		23 |   automated_snapshot_retention_period = 0
		24 |   allow_version_upgrade               = false
		25 |   skip_final_snapshot                 = true
		26 |   kms_key_id                          = ""
		27 |   cluster_subnet_group_name           = ""
		28 | }


Check: CKV_AWS_188: "Ensure RedShift Cluster is encrypted by KMS using a customer managed Key (CMK)"
	FAILED for resource: aws_redshift_cluster.fail
	File: /terraform/aws/redshift/redshift_cluster.tf:16-28

		16 | resource "aws_redshift_cluster" "fail" {
		17 |   cluster_identifier                  = "examplea"
		18 |   availability_zone                   = data.aws_availability_zones.available.names[0]
		19 |   database_name                       = "mydb"
		20 |   master_username                     = "foo_test"
		21 |   master_password                     = "Mustbe8characters"
		22 |   node_type                           = "dc2.large"
		23 |   automated_snapshot_retention_period = 0
		24 |   allow_version_upgrade               = false
		25 |   skip_final_snapshot                 = true
		26 |   kms_key_id                          = ""
		27 |   cluster_subnet_group_name           = ""
		28 | }


Check: CKV_AWS_141: "Ensured that redshift cluster allowing version upgrade by default"
	FAILED for resource: aws_redshift_cluster.fail
	File: /terraform/aws/redshift/redshift_cluster.tf:16-28

		16 | resource "aws_redshift_cluster" "fail" {
		17 |   cluster_identifier                  = "examplea"
		18 |   availability_zone                   = data.aws_availability_zones.available.names[0]
		19 |   database_name                       = "mydb"
		20 |   master_username                     = "foo_test"
		21 |   master_password                     = "Mustbe8characters"
		22 |   node_type                           = "dc2.large"
		23 |   automated_snapshot_retention_period = 0
		24 |   allow_version_upgrade               = false
		25 |   skip_final_snapshot                 = true
		26 |   kms_key_id                          = ""
		27 |   cluster_subnet_group_name           = ""
		28 | }


Check: CKV_AWS_105: "Ensure Redshift uses SSL"
	FAILED for resource: aws_redshift_parameter_group.fail
	File: /terraform/aws/redshift/redshift_parameter.tf:4-7

		4 | resource "aws_redshift_parameter_group" "fail" {
		5 |   name   = var.param_group_name
		6 |   family = "redshift-1.0"
		7 | }


Check: CKV_AWS_23: "Ensure every security groups rule has a description"
	FAILED for resource: aws_redshift_security_group.fail
	File: /terraform/aws/redshift/redshift_security_group.tf:8-18

		8  | resource "aws_redshift_security_group" "fail" {
		9  |   name = "http"
		10 |
		11 |   ingress {
		12 |     description = "HTTP from VPC"
		13 |     from_port   = 80
		14 |     to_port     = 80
		15 |     protocol    = "tcp"
		16 |     cidr_blocks = [aws_vpc.main.cidr_block]
		17 |   }
		18 | }


Check: CKV_AWS_19: "Ensure all data stored in the S3 bucket is securely encrypted at rest"
	FAILED for resource: aws_s3_bucket.fail
	File: /terraform/aws/s3/s3.tf:10-38

		10 | resource "aws_s3_bucket" "fail" {
		11 |   acl    = "public-read-write"
		12 |   bucket = "superfail"
		13 |
		14 |   versioning {
		15 |     enabled    = false
		16 |     mfa_delete = false
		17 |   }
		18 |
		19 |   policy = <<POLICY
		20 | {
		21 |   "Version": "2012-10-17",
		22 |   "Statement": [
		23 |     {
		24 |       "Principal": {
		25 |         "AWS": "*"
		26 |       },
		27 |       "Effect": "Deny",
		28 |       "Action": [
		29 |         "s3:*"
		30 |       ],
		31 |       "Resource": [
		32 |         "*"
		33 |       ]
		34 |     }
		35 |   ]
		36 | }
		37 | POLICY
		38 | }


Check: CKV_AWS_20: "S3 Bucket has an ACL defined which allows public READ access."
	FAILED for resource: aws_s3_bucket.fail
	File: /terraform/aws/s3/s3.tf:10-38

		10 | resource "aws_s3_bucket" "fail" {
		11 |   acl    = "public-read-write"
		12 |   bucket = "superfail"
		13 |
		14 |   versioning {
		15 |     enabled    = false
		16 |     mfa_delete = false
		17 |   }
		18 |
		19 |   policy = <<POLICY
		20 | {
		21 |   "Version": "2012-10-17",
		22 |   "Statement": [
		23 |     {
		24 |       "Principal": {
		25 |         "AWS": "*"
		26 |       },
		27 |       "Effect": "Deny",
		28 |       "Action": [
		29 |         "s3:*"
		30 |       ],
		31 |       "Resource": [
		32 |         "*"
		33 |       ]
		34 |     }
		35 |   ]
		36 | }
		37 | POLICY
		38 | }


Check: CKV_AWS_18: "Ensure the S3 bucket has access logging enabled"
	FAILED for resource: aws_s3_bucket.fail
	File: /terraform/aws/s3/s3.tf:10-38

		10 | resource "aws_s3_bucket" "fail" {
		11 |   acl    = "public-read-write"
		12 |   bucket = "superfail"
		13 |
		14 |   versioning {
		15 |     enabled    = false
		16 |     mfa_delete = false
		17 |   }
		18 |
		19 |   policy = <<POLICY
		20 | {
		21 |   "Version": "2012-10-17",
		22 |   "Statement": [
		23 |     {
		24 |       "Principal": {
		25 |         "AWS": "*"
		26 |       },
		27 |       "Effect": "Deny",
		28 |       "Action": [
		29 |         "s3:*"
		30 |       ],
		31 |       "Resource": [
		32 |         "*"
		33 |       ]
		34 |     }
		35 |   ]
		36 | }
		37 | POLICY
		38 | }


Check: CKV_AWS_144: "Ensure that S3 bucket has cross-region replication enabled"
	FAILED for resource: aws_s3_bucket.fail
	File: /terraform/aws/s3/s3.tf:10-38

		10 | resource "aws_s3_bucket" "fail" {
		11 |   acl    = "public-read-write"
		12 |   bucket = "superfail"
		13 |
		14 |   versioning {
		15 |     enabled    = false
		16 |     mfa_delete = false
		17 |   }
		18 |
		19 |   policy = <<POLICY
		20 | {
		21 |   "Version": "2012-10-17",
		22 |   "Statement": [
		23 |     {
		24 |       "Principal": {
		25 |         "AWS": "*"
		26 |       },
		27 |       "Effect": "Deny",
		28 |       "Action": [
		29 |         "s3:*"
		30 |       ],
		31 |       "Resource": [
		32 |         "*"
		33 |       ]
		34 |     }
		35 |   ]
		36 | }
		37 | POLICY
		38 | }


Check: CKV_AWS_145: "Ensure that S3 buckets are encrypted with KMS by default"
	FAILED for resource: aws_s3_bucket.fail
	File: /terraform/aws/s3/s3.tf:10-38

		10 | resource "aws_s3_bucket" "fail" {
		11 |   acl    = "public-read-write"
		12 |   bucket = "superfail"
		13 |
		14 |   versioning {
		15 |     enabled    = false
		16 |     mfa_delete = false
		17 |   }
		18 |
		19 |   policy = <<POLICY
		20 | {
		21 |   "Version": "2012-10-17",
		22 |   "Statement": [
		23 |     {
		24 |       "Principal": {
		25 |         "AWS": "*"
		26 |       },
		27 |       "Effect": "Deny",
		28 |       "Action": [
		29 |         "s3:*"
		30 |       ],
		31 |       "Resource": [
		32 |         "*"
		33 |       ]
		34 |     }
		35 |   ]
		36 | }
		37 | POLICY
		38 | }


Check: CKV_AWS_57: "S3 Bucket has an ACL defined which allows public WRITE access."
	FAILED for resource: aws_s3_bucket.fail
	File: /terraform/aws/s3/s3.tf:10-38

		10 | resource "aws_s3_bucket" "fail" {
		11 |   acl    = "public-read-write"
		12 |   bucket = "superfail"
		13 |
		14 |   versioning {
		15 |     enabled    = false
		16 |     mfa_delete = false
		17 |   }
		18 |
		19 |   policy = <<POLICY
		20 | {
		21 |   "Version": "2012-10-17",
		22 |   "Statement": [
		23 |     {
		24 |       "Principal": {
		25 |         "AWS": "*"
		26 |       },
		27 |       "Effect": "Deny",
		28 |       "Action": [
		29 |         "s3:*"
		30 |       ],
		31 |       "Resource": [
		32 |         "*"
		33 |       ]
		34 |     }
		35 |   ]
		36 | }
		37 | POLICY
		38 | }


Check: CKV_AWS_21: "Ensure all data stored in the S3 bucket have versioning enabled"
	FAILED for resource: aws_s3_bucket.fail
	File: /terraform/aws/s3/s3.tf:10-38

		10 | resource "aws_s3_bucket" "fail" {
		11 |   acl    = "public-read-write"
		12 |   bucket = "superfail"
		13 |
		14 |   versioning {
		15 |     enabled    = false
		16 |     mfa_delete = false
		17 |   }
		18 |
		19 |   policy = <<POLICY
		20 | {
		21 |   "Version": "2012-10-17",
		22 |   "Statement": [
		23 |     {
		24 |       "Principal": {
		25 |         "AWS": "*"
		26 |       },
		27 |       "Effect": "Deny",
		28 |       "Action": [
		29 |         "s3:*"
		30 |       ],
		31 |       "Resource": [
		32 |         "*"
		33 |       ]
		34 |     }
		35 |   ]
		36 | }
		37 | POLICY
		38 | }


Check: CKV_AWS_53: "Ensure S3 bucket has block public ACLS enabled"
	FAILED for resource: aws_s3_bucket_public_access_block.fail
	File: /terraform/aws/s3/s3_bucket_public_access_block.tf:8-10

		8  | resource "aws_s3_bucket_public_access_block" "fail" {
		9  |   bucket = aws_s3_bucket.fail.id
		10 | }


Check: CKV_AWS_54: "Ensure S3 bucket has block public policy enabled"
	FAILED for resource: aws_s3_bucket_public_access_block.fail
	File: /terraform/aws/s3/s3_bucket_public_access_block.tf:8-10

		8  | resource "aws_s3_bucket_public_access_block" "fail" {
		9  |   bucket = aws_s3_bucket.fail.id
		10 | }


Check: CKV_AWS_55: "Ensure S3 bucket has ignore public ACLs enabled"
	FAILED for resource: aws_s3_bucket_public_access_block.fail
	File: /terraform/aws/s3/s3_bucket_public_access_block.tf:8-10

		8  | resource "aws_s3_bucket_public_access_block" "fail" {
		9  |   bucket = aws_s3_bucket.fail.id
		10 | }


Check: CKV_AWS_56: "Ensure S3 bucket has 'restrict_public_bucket' enabled"
	FAILED for resource: aws_s3_bucket_public_access_block.fail
	File: /terraform/aws/s3/s3_bucket_public_access_block.tf:8-10

		8  | resource "aws_s3_bucket_public_access_block" "fail" {
		9  |   bucket = aws_s3_bucket.fail.id
		10 | }


Check: CKV_AWS_186: "Ensure S3 bucket Object is encrypted by KMS using a customer managed Key (CMK)"
	FAILED for resource: aws_s3_bucket_object.fail
	File: /terraform/aws/s3/s3_object.tf:3-7

		3 | resource "aws_s3_bucket_object" "fail" {
		4 |   bucket = aws_s3_bucket.data.id
		5 |   key    = "customer-master.xlsx"
		6 |   source = "resources/customer-master.xlsx"
		7 | }


Check: CKV_AWS_187: "Ensure Sagemaker domain is encrypted by KMS using a customer managed Key (CMK)"
	FAILED for resource: aws_sagemaker_domain.fail
	File: /terraform/aws/sagemaker/sagemaker.tf:5-18

		5  |  resource "aws_sagemaker_domain" "fail" {
		6  |   domain_name = "examplea"
		7  |   auth_mode   = "IAM"
		8  |   vpc_id      = aws_vpc.test.id
		9  |   subnet_ids  = [aws_subnet.test.id]
		10 |
		11 |   default_user_settings {
		12 |     execution_role = aws_iam_role.test.arn
		13 |   }
		14 |
		15 |   retention_policy {
		16 |     home_efs_file_system = "Delete"
		17 |   }
		18 | }


Check: CKV_AWS_98: "Ensure all data stored in the Sagemaker Endpoint is securely encrypted at rest"
	FAILED for resource: aws_sagemaker_endpoint_configuration.fail
	File: /terraform/aws/sagemaker/sagemaker_endpoint_configuration.tf:4-6

		4 | resource "aws_sagemaker_endpoint_configuration" "fail" {
		5 |
		6 | }


Check: CKV_AWS_122: "Ensure that direct internet access is disabled for an Amazon SageMaker Notebook Instance"
	FAILED for resource: aws_sagemaker_notebook_instance.name
	File: /terraform/aws/sagemaker/sagemaker_notebook_instance.tf:5-7

		5 | resource "aws_sagemaker_notebook_instance" "name" {
		6 |   direct_internet_access="enabled"
		7 | }


Check: CKV_AWS_22: "Ensure SageMaker Notebook is encrypted at rest using KMS CMK"
	FAILED for resource: aws_sagemaker_notebook_instance.name
	File: /terraform/aws/sagemaker/sagemaker_notebook_instance.tf:5-7

		5 | resource "aws_sagemaker_notebook_instance" "name" {
		6 |   direct_internet_access="enabled"
		7 | }


Check: CKV_AWS_149: "Ensure that Secrets Manager secret is encrypted using KMS CMK"
	FAILED for resource: aws_secretsmanager_secret.fail
	File: /terraform/aws/secret_mamager/secretsmanager_secret.tf:7-9

		7 | resource "aws_secretsmanager_secret" "fail" {
		8 |   name = "lambda_password"
		9 | }


Check: CKV_AWS_26: "Ensure all data stored in the SNS topic is encrypted"
	FAILED for resource: aws_sns_topic.fail
	File: /terraform/aws/sns/sns_topic.tf:7-8

		7 | resource "aws_sns_topic" "fail" {
		8 | }


Check: CKV_AWS_169: "Ensure SNS topic policy is not public by only allowing specific services or principals to access it"
	FAILED for resource: aws_sns_topic_policy.sns_tp2
	File: /terraform/aws/sns/sns_topic_policy.tf:3-34

		3  | resource "aws_sns_topic_policy" "sns_tp2" {
		4  |   arn = aws_sns_topic.test.arn
		5  |
		6  |   policy = <<POLICY
		7  | {
		8  |     "Version":"2012-10-17",
		9  |     "Statement":[
		10 |        {
		11 |            "Principal": {
		12 |             "AWS": [
		13 |                 "arn:aws:iam::123456789101:role/sns",
		14 |                 "*"
		15 |             ]
		16 |           },
		17 |           "Effect": "Allow",
		18 |           "Action": [
		19 |             "SNS:Subscribe",
		20 |             "SNS:SetTopicAttributes",
		21 |             "SNS:RemovePermission",
		22 |             "SNS:Receive",
		23 |             "SNS:Publish",
		24 |             "SNS:ListSubscriptionsByTopic",
		25 |             "SNS:GetTopicAttributes",
		26 |             "SNS:DeleteTopic",
		27 |             "SNS:AddPermission",
		28 |           ],
		29 |           "Resource": "${aws_sns_topic.test.arn}"
		30 |        }
		31 |     ]
		32 | }
		33 | POLICY
		34 | }


Check: CKV_AWS_168: "Ensure SQS queue policy is not public by only allowing specific services or principals to access it"
	FAILED for resource: aws_sqs_queue.fail
	File: /terraform/aws/sqs/sqs_queue.tf:9-22

		9  | resource "aws_sqs_queue" "fail" {
		10 |  #   kms_master_key_id  =aws_kms_key.pass.arn
		11 |       policy = <<POLICY
		12 | {
		13 |   "Statement": [
		14 |     {
		15 |       "Effect": "Allow",
		16 |       "Principal": "*",
		17 |       "Action": "*"
		18 |     }
		19 |   ]
		20 | }
		21 | POLICY
		22 | }


Check: CKV_AWS_27: "Ensure all data stored in the SQS queue is encrypted"
	FAILED for resource: aws_sqs_queue.fail
	File: /terraform/aws/sqs/sqs_queue.tf:9-22

		9  | resource "aws_sqs_queue" "fail" {
		10 |  #   kms_master_key_id  =aws_kms_key.pass.arn
		11 |       policy = <<POLICY
		12 | {
		13 |   "Statement": [
		14 |     {
		15 |       "Effect": "Allow",
		16 |       "Principal": "*",
		17 |       "Action": "*"
		18 |     }
		19 |   ]
		20 | }
		21 | POLICY
		22 | }


Check: CKV_AWS_168: "Ensure SQS queue policy is not public by only allowing specific services or principals to access it"
	FAILED for resource: aws_sqs_queue_policy.fail
	File: /terraform/aws/sqs/sqs_queue_policy.fail.tf:5-19

		5  | resource "aws_sqs_queue_policy" "fail" {
		6  |   queue_url = aws_sqs_queue.fail.id
		7  |
		8  |   policy = <<POLICY
		9  | {
		10 |   "Statement": [
		11 |     {
		12 |       "Effect": "Allow",
		13 |       "Principal": "*",
		14 |       "Action": "*"
		15 |     }
		16 |   ]
		17 | }
		18 | POLICY
		19 | }


Check: CKV_AWS_113: "Ensure Session Manager logs are enabled and encrypted"
	FAILED for resource: aws_ssm_document.s3_enabled_not_encrypted_yaml
	File: /terraform/aws/ssm/ssm.tf:6-31

		6  | resource "aws_ssm_document" "s3_enabled_not_encrypted_yaml" {
		7  |   name          = "SSM-SessionManagerRunShell"
		8  |   document_type = "Session"
		9  |
		10 |   document_format = "YAML"
		11 |
		12 |   content = <<DOC
		13 |   schemaVersion: '1.0'
		14 |   description: Document to hold regional settings for Session Manager
		15 |   sessionType: Standard_Stream
		16 |   inputs:
		17 |     s3BucketName: 'example'
		18 |     s3KeyPrefix: ''
		19 |     s3EncryptionEnabled: false
		20 |     cloudWatchLogGroupName: ''
		21 |     cloudWatchEncryptionEnabled: false
		22 |     cloudWatchStreamingEnabled: true
		23 |     kmsKeyId: ''
		24 |     runAsEnabled: true
		25 |     runAsDefaultUser: ''
		26 |     idleSessionTimeout: '20'
		27 |     shellProfile:
		28 |       windows: ''
		29 |       linux: ''
		30 | DOC
		31 | }


Check: CKV_AWS_112: "Ensure Session Manager data is encrypted in transit"
	FAILED for resource: aws_ssm_document.s3_enabled_not_encrypted_yaml
	File: /terraform/aws/ssm/ssm.tf:6-31

		6  | resource "aws_ssm_document" "s3_enabled_not_encrypted_yaml" {
		7  |   name          = "SSM-SessionManagerRunShell"
		8  |   document_type = "Session"
		9  |
		10 |   document_format = "YAML"
		11 |
		12 |   content = <<DOC
		13 |   schemaVersion: '1.0'
		14 |   description: Document to hold regional settings for Session Manager
		15 |   sessionType: Standard_Stream
		16 |   inputs:
		17 |     s3BucketName: 'example'
		18 |     s3KeyPrefix: ''
		19 |     s3EncryptionEnabled: false
		20 |     cloudWatchLogGroupName: ''
		21 |     cloudWatchEncryptionEnabled: false
		22 |     cloudWatchStreamingEnabled: true
		23 |     kmsKeyId: ''
		24 |     runAsEnabled: true
		25 |     runAsDefaultUser: ''
		26 |     idleSessionTimeout: '20'
		27 |     shellProfile:
		28 |       windows: ''
		29 |       linux: ''
		30 | DOC
		31 | }


Check: CKV_AWS_130: "Ensure VPC subnets do not assign public IP by default"
	FAILED for resource: aws_subnet.test
	File: /terraform/aws/subnet/subnet.tf:4-9

		4 | resource "aws_subnet" "test" {
		5 |   vpc_id     = aws_vpc.main.id
		6 |   cidr_block = "10.0.1.0/24"
		7 |
		8 |   map_public_ip_on_launch = true
		9 | }


Check: CKV_AWS_160: "Ensure that Timestream database is encrypted with KMS CMK"
	FAILED for resource: aws_timestreamwrite_database.default
	File: /terraform/aws/timestream/timestream.tf:3-5

		3 | resource "aws_timestreamwrite_database" "default" {
		4 |   database_name = "timestream"
		5 | }


Check: CKV_AWS_164: "Ensure Transfer Server is not exposed publicly."
	FAILED for resource: aws_transfer_server.example
	File: /terraform/aws/transfer_server/transferserver.tf:4-6

		4 | resource "aws_transfer_server" "example" {
		5 |   protocols = ["SFTP"]
		6 | }


Check: CKV_AWS_148: "Ensure no default VPC is planned to be provisioned"
	FAILED for resource: aws_default_vpc.default
	File: /terraform/aws/vpc/default_vpc.tf:8-12

		8  | resource "aws_default_vpc" "default" {
		9  |   tags = {
		10 |     Name = "Default VPC"
		11 |   }
		12 | }


Check: CKV_AWS_24: "Ensure no security groups allow ingress from 0.0.0.0:0 to port 22"
	FAILED for resource: aws_security_group.bad_example
	File: /terraform/aws/vpc/security_group.tf:16-39

		16 | resource "aws_security_group" "bad_example" {
		17 |   ingress {
		18 |     from_port = 22
		19 |     to_port = 22
		20 |     cidr_blocks = ["0.0.0.0/0"]
		21 |   }
		22 |
		23 |   ingress {
		24 |     from_port = 3389
		25 |     to_port = 3389
		26 |     cidr_blocks = ["0.0.0.0/0"]
		27 |   }
		28 |
		29 |   egress {
		30 |     from_port = 22
		31 |     to_port = 22
		32 |     cidr_blocks = ["0.0.0.0/0"]
		33 |   }
		34 |     egress {
		35 |     from_port = 3389
		36 |     to_port = 3389
		37 |     cidr_blocks = ["0.0.0.0/0"]
		38 |   }
		39 | }


Check: CKV_AWS_23: "Ensure every security groups rule has a description"
	FAILED for resource: aws_security_group.bad_example
	File: /terraform/aws/vpc/security_group.tf:16-39

		16 | resource "aws_security_group" "bad_example" {
		17 |   ingress {
		18 |     from_port = 22
		19 |     to_port = 22
		20 |     cidr_blocks = ["0.0.0.0/0"]
		21 |   }
		22 |
		23 |   ingress {
		24 |     from_port = 3389
		25 |     to_port = 3389
		26 |     cidr_blocks = ["0.0.0.0/0"]
		27 |   }
		28 |
		29 |   egress {
		30 |     from_port = 22
		31 |     to_port = 22
		32 |     cidr_blocks = ["0.0.0.0/0"]
		33 |   }
		34 |     egress {
		35 |     from_port = 3389
		36 |     to_port = 3389
		37 |     cidr_blocks = ["0.0.0.0/0"]
		38 |   }
		39 | }


Check: CKV_AWS_25: "Ensure no security groups allow ingress from 0.0.0.0:0 to port 3389"
	FAILED for resource: aws_security_group.bad_example
	File: /terraform/aws/vpc/security_group.tf:16-39

		16 | resource "aws_security_group" "bad_example" {
		17 |   ingress {
		18 |     from_port = 22
		19 |     to_port = 22
		20 |     cidr_blocks = ["0.0.0.0/0"]
		21 |   }
		22 |
		23 |   ingress {
		24 |     from_port = 3389
		25 |     to_port = 3389
		26 |     cidr_blocks = ["0.0.0.0/0"]
		27 |   }
		28 |
		29 |   egress {
		30 |     from_port = 22
		31 |     to_port = 22
		32 |     cidr_blocks = ["0.0.0.0/0"]
		33 |   }
		34 |     egress {
		35 |     from_port = 3389
		36 |     to_port = 3389
		37 |     cidr_blocks = ["0.0.0.0/0"]
		38 |   }
		39 | }


Check: CKV_AWS_23: "Ensure every security groups rule has a description"
	FAILED for resource: aws_security_group_rule.fail
	File: /terraform/aws/vpc/security_group.tf:41-45

		41 | resource "aws_security_group_rule" "fail" {
		42 |   security_group_id = aws_security_group.bad_example.id
		43 |   type              = "ingress"
		44 |   cidr_blocks       = ["172.31.0.0/16"]
		45 | }


Check: CKV_AWS_23: "Ensure every security groups rule has a description"
	FAILED for resource: aws_security_group_rule.fail
	File: /terraform/aws/vpc/security_group_rule.tf:9-17

		9  | resource "aws_security_group_rule" "fail" {
		10 |   type              = "ingress"
		11 |   from_port         = 0
		12 |   to_port           = 65535
		13 |   protocol          = "tcp"
		14 |   cidr_blocks       = [aws_vpc.example.cidr_block]
		15 |   ipv6_cidr_blocks  = [aws_vpc.example.ipv6_cidr_block]
		16 |   security_group_id = "sg-123456"
		17 | }


Check: CKV_AWS_123: "Ensure that VPC Endpoint Service is configured for Manual Acceptance"
	FAILED for resource: aws_vpc_endpoint_service.example
	File: /terraform/aws/vpc_endpoint/vpc_endpoint.tf:4-7

		4 | resource "aws_vpc_endpoint_service" "example" {
		5 |   acceptance_required        = false
		6 |   network_load_balancer_arns = [aws_lb.example.arn]
		7 | }


Check: CKV_AWS_176: "Ensure Logging is enabled for WAF  Web Access Control Lists"
	FAILED for resource: aws_wafregional_web_acl.fail
	File: /terraform/aws/waf/waf.tf:5-13

		5  | resource "aws_wafregional_web_acl" "fail" {
		6  |   name        = "tfWebACLregionalfail"
		7  |   metric_name = "tfWebACLregionalfail"
		8  |
		9  |   default_action {
		10 |     type = "ALLOW"
		11 |   }
		12 |
		13 | }


Check: CKV_AWS_175: "Ensure WAF has associated rules"
	FAILED for resource: aws_wafregional_web_acl.fail
	File: /terraform/aws/waf/waf.tf:5-13

		5  | resource "aws_wafregional_web_acl" "fail" {
		6  |   name        = "tfWebACLregionalfail"
		7  |   metric_name = "tfWebACLregionalfail"
		8  |
		9  |   default_action {
		10 |     type = "ALLOW"
		11 |   }
		12 |
		13 | }


Check: CKV_AWS_176: "Ensure Logging is enabled for WAF  Web Access Control Lists"
	FAILED for resource: aws_waf_web_acl.fail
	File: /terraform/aws/waf/waf.tf:16-23

		16 | resource "aws_waf_web_acl" "fail" {
		17 |   name        = "tfWebACL"
		18 |   metric_name = "tfWebACL"
		19 |
		20 |   default_action {
		21 |     type = "ALLOW"
		22 |   }
		23 | }


Check: CKV_AWS_175: "Ensure WAF has associated rules"
	FAILED for resource: aws_waf_web_acl.fail
	File: /terraform/aws/waf/waf.tf:16-23

		16 | resource "aws_waf_web_acl" "fail" {
		17 |   name        = "tfWebACL"
		18 |   metric_name = "tfWebACL"
		19 |
		20 |   default_action {
		21 |     type = "ALLOW"
		22 |   }
		23 | }


Check: CKV_AWS_156: "Ensure that Workspace root volumes are encrypted"
	FAILED for resource: aws_workspaces_workspace.fail
	File: /terraform/aws/workspace/workspace_workspace.tf:8-22

		8  | resource "aws_workspaces_workspace" "fail" {
		9  |   directory_id = aws_workspaces_directory.main.id
		10 |   bundle_id    = data.aws_workspaces_bundle.bundle.id
		11 |   user_name    = var.user_name
		12 |
		13 |   workspace_properties {
		14 |     compute_type_name                         = "VALUE"
		15 |     user_volume_size_gib                      = 10
		16 |     root_volume_size_gib                      = 80
		17 |     running_mode                              = "AUTO_STOP"
		18 |     running_mode_auto_stop_timeout_in_minutes = 60
		19 |   }
		20 |
		21 |   tags = var.common_tags
		22 | }


Check: CKV_AWS_155: "Ensure that Workspace user volumes are encrypted"
	FAILED for resource: aws_workspaces_workspace.fail
	File: /terraform/aws/workspace/workspace_workspace.tf:8-22

		8  | resource "aws_workspaces_workspace" "fail" {
		9  |   directory_id = aws_workspaces_directory.main.id
		10 |   bundle_id    = data.aws_workspaces_bundle.bundle.id
		11 |   user_name    = var.user_name
		12 |
		13 |   workspace_properties {
		14 |     compute_type_name                         = "VALUE"
		15 |     user_volume_size_gib                      = 10
		16 |     root_volume_size_gib                      = 80
		17 |     running_mode                              = "AUTO_STOP"
		18 |     running_mode_auto_stop_timeout_in_minutes = 60
		19 |   }
		20 |
		21 |   tags = var.common_tags
		22 | }


Check: CKV_AZURE_73: "Ensure that Automation account variables are encrypted"
	FAILED for resource: azurerm_automation_variable_string.example
	File: /terraform/azurerm/AutomationEncrypted.tf:2-8

		2 | resource "azurerm_automation_variable_string" "example" {
		3 |   name                    = "tfex-example-var"
		4 |   resource_group_name     = azurerm_resource_group.example.name
		5 |   automation_account_name = azurerm_automation_account.example.name
		6 |   value                   = "Hello, Terraform Basic Test."
		7 |   encrypted               = false
		8 | }


Check: CKV_AZURE_76: "Ensure that Azure Batch account uses key vault to encrypt data"
	FAILED for resource: azurerm_batch_account.example
	File: /terraform/azurerm/BatchAccountUsesKeyVaultEncryption.tf:2-12

		2  | resource "azurerm_batch_account" "example" {
		3  |   name                 = "testbatchaccount"
		4  |   resource_group_name  = azurerm_resource_group.example.name
		5  |   location             = azurerm_resource_group.example.location
		6  |   pool_allocation_mode = "BatchService"
		7  |   storage_account_id   = azurerm_storage_account.example.id
		8  |
		9  |   tags = {
		10 |     env = "test"
		11 |   }
		12 | }


Check: CKV_AZURE_39: "Ensure that no custom subscription owner roles are created"
	FAILED for resource: azurerm_role_definition.example
	File: /terraform/azurerm/CustomRoleDefinitionSubscriptionOwner.tf:2-15

		2  | resource "azurerm_role_definition" "example" {
		3  |   name        = "my-custom-role"
		4  |   scope       = data.azurerm_subscription.primary.id
		5  |   description = "This is a custom role created via Terraform"
		6  |
		7  |   permissions {
		8  |     actions     = ["*"]
		9  |     not_actions = []
		10 |   }
		11 |
		12 |   assignable_scopes = [
		13 |     data.azurerm_subscription.primary.id
		14 |   ]
		15 | }


Check: CKV_AZURE_106: "Ensure that Azure Event Grid Domain public network access is disabled"
	FAILED for resource: azurerm_eventgrid_domain.example
	File: /terraform/azurerm/EventgridDomainNetworkAccess.tf:2-6

		2 | resource "azurerm_eventgrid_domain" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 | }


Check: CKV_AZURE_124: "Ensure that Azure Cognitive Search disables public network access"
	FAILED for resource: azurerm_search_service.example
	File: /terraform/azurerm/SearchPublicNetworkAccessDisabled.tf:2-8

		2 | resource "azurerm_search_service" "example" {
		3 |   name                          = "example-search-service"
		4 |   resource_group_name           = azurerm_resource_group.example.name
		5 |   location                      = azurerm_resource_group.example.location
		6 |   sku                           = "standard"
		7 |   public_network_access_enabled = true
		8 | }


Check: CKV_AZURE_126: "Ensures that Active Directory is used for authentication for Service Fabric"
	FAILED for resource: azurerm_service_fabric_cluster.example
	File: /terraform/azurerm/ServiceFabricClusterProtectionLevel.tf:2-27

		2  | resource "azurerm_service_fabric_cluster" "example" {
		3  |   name                 = "example-servicefabric"
		4  |   resource_group_name  = azurerm_resource_group.example.name
		5  |   location             = azurerm_resource_group.example.location
		6  |   reliability_level    = "Bronze"
		7  |   upgrade_mode         = "Manual"
		8  |   cluster_code_version = "7.1.456.959"
		9  |   vm_image             = "Windows"
		10 |   management_endpoint  = "https://example:80"
		11 |   fabric_settings {
		12 |     name = "Security"
		13 |     parameters = {
		14 |       name  = "ClusterProtectionLevel"
		15 |       value = "EncryptAndSign"
		16 |     }
		17 |   }
		18 |
		19 |
		20 |   node_type {
		21 |     name                 = "first"
		22 |     instance_count       = 3
		23 |     is_primary           = true
		24 |     client_endpoint_port = 2020
		25 |     http_endpoint_port   = 80
		26 |   }
		27 | }


Check: CKV_AZURE_122: "Ensure that Application Gateway uses WAF in "Detection" or "Prevention" modes"
	FAILED for resource: azurerm_web_application_firewall_policy.example
	File: /terraform/azurerm/WAFSpecifiedModeAppGW.tf:1-84

		1  | resource "azurerm_web_application_firewall_policy" "example" {
		2  |   name                = "example-wafpolicy"
		3  |   resource_group_name = azurerm_resource_group.example.name
		4  |   location            = azurerm_resource_group.example.location
		5  |
		6  |   custom_rules {
		7  |     name      = "Rule1"
		8  |     priority  = 1
		9  |     rule_type = "MatchRule"
		10 |
		11 |     match_conditions {
		12 |       match_variables {
		13 |         variable_name = "RemoteAddr"
		14 |       }
		15 |
		16 |       operator           = "IPMatch"
		17 |       negation_condition = false
		18 |       match_values       = ["192.168.1.0/24", "10.0.0.0/24"]
		19 |     }
		20 |
		21 |     action = "Block"
		22 |   }
		23 |
		24 |   custom_rules {
		25 |     name      = "Rule2"
		26 |     priority  = 2
		27 |     rule_type = "MatchRule"
		28 |
		29 |     match_conditions {
		30 |       match_variables {
		31 |         variable_name = "RemoteAddr"
		32 |       }
		33 |
		34 |       operator           = "IPMatch"
		35 |       negation_condition = false
		36 |       match_values       = ["192.168.1.0/24"]
		37 |     }
		38 |
		39 |     match_conditions {
		40 |       match_variables {
		41 |         variable_name = "RequestHeaders"
		42 |         selector      = "UserAgent"
		43 |       }
		44 |
		45 |       operator           = "Contains"
		46 |       negation_condition = false
		47 |       match_values       = ["Windows"]
		48 |     }
		49 |
		50 |     action = "Block"
		51 |   }
		52 |
		53 |   policy_settings {
		54 |     enabled                     = false
		55 |     request_body_check          = true
		56 |     file_upload_limit_in_mb     = 100
		57 |     max_request_body_size_in_kb = 128
		58 |   }
		59 |
		60 |   managed_rules {
		61 |     exclusion {
		62 |       match_variable          = "RequestHeaderNames"
		63 |       selector                = "x-company-secret-header"
		64 |       selector_match_operator = "Equals"
		65 |     }
		66 |     exclusion {
		67 |       match_variable          = "RequestCookieNames"
		68 |       selector                = "too-tasty"
		69 |       selector_match_operator = "EndsWith"
		70 |     }
		71 |
		72 |     managed_rule_set {
		73 |       type    = "OWASP"
		74 |       version = "3.1"
		75 |       rule_group_override {
		76 |         rule_group_name = "REQUEST-920-PROTOCOL-ENFORCEMENT"
		77 |         disabled_rules = [
		78 |           "920300",
		79 |           "920440"
		80 |         ]
		81 |       }
		82 |     }
		83 |   }
		84 | }


Check: CKV_AZURE_8: "Ensure Kubernetes Dashboard is disabled"
	FAILED for resource: azurerm_kubernetes_cluster.fail-cluster
	File: /terraform/azurerm/aks/azurerm_kubernetes_cluster.tf:11-35

		11 | resource "azurerm_kubernetes_cluster" "fail-cluster" {
		12 |   name                = "example-aks1"
		13 |   location            = azurerm_resource_group.example.location
		14 |   resource_group_name = azurerm_resource_group.example.name
		15 |   dns_prefix          = "exampleaks1"
		16 |   default_node_pool {
		17 |     name       = "default"
		18 |     node_count = 1
		19 |     vm_size    = "Standard_D2_v2"
		20 |   }
		21 |   identity {
		22 |     type = "SystemAssigned"
		23 |   }
		24 |
		25 |
		26 |   role_based_access_control {
		27 |     enabled = false
		28 |   }
		29 |   addon_profile {
		30 |     kube_dashboard {
		31 |       enabled = true
		32 |     }
		33 |   }
		34 |   tags = { Environment = "Production" }
		35 | }


Check: CKV_AZURE_115: "Ensure that AKS enables private clusters"
	FAILED for resource: azurerm_kubernetes_cluster.fail-cluster
	File: /terraform/azurerm/aks/azurerm_kubernetes_cluster.tf:11-35

		11 | resource "azurerm_kubernetes_cluster" "fail-cluster" {
		12 |   name                = "example-aks1"
		13 |   location            = azurerm_resource_group.example.location
		14 |   resource_group_name = azurerm_resource_group.example.name
		15 |   dns_prefix          = "exampleaks1"
		16 |   default_node_pool {
		17 |     name       = "default"
		18 |     node_count = 1
		19 |     vm_size    = "Standard_D2_v2"
		20 |   }
		21 |   identity {
		22 |     type = "SystemAssigned"
		23 |   }
		24 |
		25 |
		26 |   role_based_access_control {
		27 |     enabled = false
		28 |   }
		29 |   addon_profile {
		30 |     kube_dashboard {
		31 |       enabled = true
		32 |     }
		33 |   }
		34 |   tags = { Environment = "Production" }
		35 | }


Check: CKV_AZURE_117: "Ensure that AKS uses disk encryption set"
	FAILED for resource: azurerm_kubernetes_cluster.fail-cluster
	File: /terraform/azurerm/aks/azurerm_kubernetes_cluster.tf:11-35

		11 | resource "azurerm_kubernetes_cluster" "fail-cluster" {
		12 |   name                = "example-aks1"
		13 |   location            = azurerm_resource_group.example.location
		14 |   resource_group_name = azurerm_resource_group.example.name
		15 |   dns_prefix          = "exampleaks1"
		16 |   default_node_pool {
		17 |     name       = "default"
		18 |     node_count = 1
		19 |     vm_size    = "Standard_D2_v2"
		20 |   }
		21 |   identity {
		22 |     type = "SystemAssigned"
		23 |   }
		24 |
		25 |
		26 |   role_based_access_control {
		27 |     enabled = false
		28 |   }
		29 |   addon_profile {
		30 |     kube_dashboard {
		31 |       enabled = true
		32 |     }
		33 |   }
		34 |   tags = { Environment = "Production" }
		35 | }


Check: CKV_AZURE_7: "Ensure AKS cluster has Network Policy configured"
	FAILED for resource: azurerm_kubernetes_cluster.fail-cluster
	File: /terraform/azurerm/aks/azurerm_kubernetes_cluster.tf:11-35

		11 | resource "azurerm_kubernetes_cluster" "fail-cluster" {
		12 |   name                = "example-aks1"
		13 |   location            = azurerm_resource_group.example.location
		14 |   resource_group_name = azurerm_resource_group.example.name
		15 |   dns_prefix          = "exampleaks1"
		16 |   default_node_pool {
		17 |     name       = "default"
		18 |     node_count = 1
		19 |     vm_size    = "Standard_D2_v2"
		20 |   }
		21 |   identity {
		22 |     type = "SystemAssigned"
		23 |   }
		24 |
		25 |
		26 |   role_based_access_control {
		27 |     enabled = false
		28 |   }
		29 |   addon_profile {
		30 |     kube_dashboard {
		31 |       enabled = true
		32 |     }
		33 |   }
		34 |   tags = { Environment = "Production" }
		35 | }


Check: CKV_AZURE_116: "Ensure that AKS uses Azure Policies Add-on"
	FAILED for resource: azurerm_kubernetes_cluster.fail-cluster
	File: /terraform/azurerm/aks/azurerm_kubernetes_cluster.tf:11-35

		11 | resource "azurerm_kubernetes_cluster" "fail-cluster" {
		12 |   name                = "example-aks1"
		13 |   location            = azurerm_resource_group.example.location
		14 |   resource_group_name = azurerm_resource_group.example.name
		15 |   dns_prefix          = "exampleaks1"
		16 |   default_node_pool {
		17 |     name       = "default"
		18 |     node_count = 1
		19 |     vm_size    = "Standard_D2_v2"
		20 |   }
		21 |   identity {
		22 |     type = "SystemAssigned"
		23 |   }
		24 |
		25 |
		26 |   role_based_access_control {
		27 |     enabled = false
		28 |   }
		29 |   addon_profile {
		30 |     kube_dashboard {
		31 |       enabled = true
		32 |     }
		33 |   }
		34 |   tags = { Environment = "Production" }
		35 | }


Check: CKV_AZURE_6: "Ensure AKS has an API Server Authorized IP Ranges enabled"
	FAILED for resource: azurerm_kubernetes_cluster.fail-cluster
	File: /terraform/azurerm/aks/azurerm_kubernetes_cluster.tf:11-35

		11 | resource "azurerm_kubernetes_cluster" "fail-cluster" {
		12 |   name                = "example-aks1"
		13 |   location            = azurerm_resource_group.example.location
		14 |   resource_group_name = azurerm_resource_group.example.name
		15 |   dns_prefix          = "exampleaks1"
		16 |   default_node_pool {
		17 |     name       = "default"
		18 |     node_count = 1
		19 |     vm_size    = "Standard_D2_v2"
		20 |   }
		21 |   identity {
		22 |     type = "SystemAssigned"
		23 |   }
		24 |
		25 |
		26 |   role_based_access_control {
		27 |     enabled = false
		28 |   }
		29 |   addon_profile {
		30 |     kube_dashboard {
		31 |       enabled = true
		32 |     }
		33 |   }
		34 |   tags = { Environment = "Production" }
		35 | }


Check: CKV_AZURE_4: "Ensure AKS logging to Azure Monitoring is Configured"
	FAILED for resource: azurerm_kubernetes_cluster.fail-cluster
	File: /terraform/azurerm/aks/azurerm_kubernetes_cluster.tf:11-35

		11 | resource "azurerm_kubernetes_cluster" "fail-cluster" {
		12 |   name                = "example-aks1"
		13 |   location            = azurerm_resource_group.example.location
		14 |   resource_group_name = azurerm_resource_group.example.name
		15 |   dns_prefix          = "exampleaks1"
		16 |   default_node_pool {
		17 |     name       = "default"
		18 |     node_count = 1
		19 |     vm_size    = "Standard_D2_v2"
		20 |   }
		21 |   identity {
		22 |     type = "SystemAssigned"
		23 |   }
		24 |
		25 |
		26 |   role_based_access_control {
		27 |     enabled = false
		28 |   }
		29 |   addon_profile {
		30 |     kube_dashboard {
		31 |       enabled = true
		32 |     }
		33 |   }
		34 |   tags = { Environment = "Production" }
		35 | }


Check: CKV_AZURE_5: "Ensure RBAC is enabled on AKS clusters"
	FAILED for resource: azurerm_kubernetes_cluster.fail-cluster
	File: /terraform/azurerm/aks/azurerm_kubernetes_cluster.tf:11-35

		11 | resource "azurerm_kubernetes_cluster" "fail-cluster" {
		12 |   name                = "example-aks1"
		13 |   location            = azurerm_resource_group.example.location
		14 |   resource_group_name = azurerm_resource_group.example.name
		15 |   dns_prefix          = "exampleaks1"
		16 |   default_node_pool {
		17 |     name       = "default"
		18 |     node_count = 1
		19 |     vm_size    = "Standard_D2_v2"
		20 |   }
		21 |   identity {
		22 |     type = "SystemAssigned"
		23 |   }
		24 |
		25 |
		26 |   role_based_access_control {
		27 |     enabled = false
		28 |   }
		29 |   addon_profile {
		30 |     kube_dashboard {
		31 |       enabled = true
		32 |     }
		33 |   }
		34 |   tags = { Environment = "Production" }
		35 | }


Check: CKV_AZURE_107: "Ensure that API management services use virtual networks"
	FAILED for resource: azurerm_api_management.example
	File: /terraform/azurerm/api-management/api_mamangement.tf:2-22

		2  | resource "azurerm_api_management" "example" {
		3  |   name                = "example-apim"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   publisher_name      = "My Company"
		7  |   publisher_email     = "company@terraform.io"
		8  |
		9  |   sku_name = "Developer_1"
		10 |
		11 |   policy {
		12 |     xml_content = <<XML
		13 |                     <policies>
		14 |                       <inbound />
		15 |                       <backend />
		16 |                       <outbound />
		17 |                       <on-error />
		18 |                     </policies>
		19 |                 XML
		20 |
		21 |   }
		22 | }


Check: CKV_AZURE_120: "Ensure that Application Gateway enables WAF"
	FAILED for resource: azurerm_application_gateway.network
	File: /terraform/azurerm/application/application_gateway.tf:2-55

		2  | resource "azurerm_application_gateway" "network" {
		3  |   name                = "example-appgateway"
		4  |   resource_group_name = azurerm_resource_group.example.name
		5  |   location            = azurerm_resource_group.example.location
		6  |
		7  |   sku {
		8  |     name     = "Standard_Small"
		9  |     tier     = "Standard"
		10 |     capacity = 2
		11 |   }
		12 |
		13 |   gateway_ip_configuration {
		14 |     name      = "my-gateway-ip-configuration"
		15 |     subnet_id = azurerm_subnet.frontend.id
		16 |   }
		17 |
		18 |   frontend_port {
		19 |     name = local.frontend_port_name
		20 |     port = 80
		21 |   }
		22 |
		23 |   frontend_ip_configuration {
		24 |     name                 = local.frontend_ip_configuration_name
		25 |     public_ip_address_id = azurerm_public_ip.example.id
		26 |   }
		27 |
		28 |   backend_address_pool {
		29 |     name = local.backend_address_pool_name
		30 |   }
		31 |
		32 |   backend_http_settings {
		33 |     name                  = local.http_setting_name
		34 |     cookie_based_affinity = "Disabled"
		35 |     path                  = "/path1/"
		36 |     port                  = 80
		37 |     protocol              = "Http"
		38 |     request_timeout       = 60
		39 |   }
		40 |
		41 |   http_listener {
		42 |     name                           = local.listener_name
		43 |     frontend_ip_configuration_name = local.frontend_ip_configuration_name
		44 |     frontend_port_name             = local.frontend_port_name
		45 |     protocol                       = "Http"
		46 |   }
		47 |
		48 |   request_routing_rule {
		49 |     name                       = local.request_routing_rule_name
		50 |     rule_type                  = "Basic"
		51 |     http_listener_name         = local.listener_name
		52 |     backend_address_pool_name  = local.backend_address_pool_name
		53 |     backend_http_settings_name = local.http_setting_name
		54 |   }
		55 | }


Check: CKV_AZURE_71: "Ensure that Managed identity provider is enabled for app services"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/AppServiceAuthentication.tf:22-38

		22 | resource "azurerm_app_service" "fail" {
		23 |   name                = "example-app-service"
		24 |   location            = azurerm_resource_group.example.location
		25 |   resource_group_name = azurerm_resource_group.example.name
		26 |   app_service_plan_id = azurerm_app_service_plan.example.id
		27 |   remote_debugging_enabled=true
		28 |   site_config {
		29 |     python_version = "2.7"
		30 |     php_version="7.1"
		31 |     min_tls_version="1.0"
		32 |     java_version = "7.0"
		33 |     cors{
		34 |     allowed_origins=["*"]
		35 |     }
		36 | }
		37 |
		38 | }


Check: CKV_AZURE_57: "Ensure that CORS disallows every resource to access app services"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/AppServiceAuthentication.tf:22-38

		22 | resource "azurerm_app_service" "fail" {
		23 |   name                = "example-app-service"
		24 |   location            = azurerm_resource_group.example.location
		25 |   resource_group_name = azurerm_resource_group.example.name
		26 |   app_service_plan_id = azurerm_app_service_plan.example.id
		27 |   remote_debugging_enabled=true
		28 |   site_config {
		29 |     python_version = "2.7"
		30 |     php_version="7.1"
		31 |     min_tls_version="1.0"
		32 |     java_version = "7.0"
		33 |     cors{
		34 |     allowed_origins=["*"]
		35 |     }
		36 | }
		37 |
		38 | }


Check: CKV_AZURE_82: "Ensure that 'Python version' is the latest, if used to run the web app"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/AppServiceAuthentication.tf:22-38

		22 | resource "azurerm_app_service" "fail" {
		23 |   name                = "example-app-service"
		24 |   location            = azurerm_resource_group.example.location
		25 |   resource_group_name = azurerm_resource_group.example.name
		26 |   app_service_plan_id = azurerm_app_service_plan.example.id
		27 |   remote_debugging_enabled=true
		28 |   site_config {
		29 |     python_version = "2.7"
		30 |     php_version="7.1"
		31 |     min_tls_version="1.0"
		32 |     java_version = "7.0"
		33 |     cors{
		34 |     allowed_origins=["*"]
		35 |     }
		36 | }
		37 |
		38 | }


Check: CKV_AZURE_63: "Ensure that App service enables HTTP logging"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/AppServiceAuthentication.tf:22-38

		22 | resource "azurerm_app_service" "fail" {
		23 |   name                = "example-app-service"
		24 |   location            = azurerm_resource_group.example.location
		25 |   resource_group_name = azurerm_resource_group.example.name
		26 |   app_service_plan_id = azurerm_app_service_plan.example.id
		27 |   remote_debugging_enabled=true
		28 |   site_config {
		29 |     python_version = "2.7"
		30 |     php_version="7.1"
		31 |     min_tls_version="1.0"
		32 |     java_version = "7.0"
		33 |     cors{
		34 |     allowed_origins=["*"]
		35 |     }
		36 | }
		37 |
		38 | }


Check: CKV_AZURE_80: "Ensure that 'Net Framework' version is the latest, if used as a part of the web app"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/AppServiceAuthentication.tf:22-38

		22 | resource "azurerm_app_service" "fail" {
		23 |   name                = "example-app-service"
		24 |   location            = azurerm_resource_group.example.location
		25 |   resource_group_name = azurerm_resource_group.example.name
		26 |   app_service_plan_id = azurerm_app_service_plan.example.id
		27 |   remote_debugging_enabled=true
		28 |   site_config {
		29 |     python_version = "2.7"
		30 |     php_version="7.1"
		31 |     min_tls_version="1.0"
		32 |     java_version = "7.0"
		33 |     cors{
		34 |     allowed_origins=["*"]
		35 |     }
		36 | }
		37 |
		38 | }


Check: CKV_AZURE_72: "Ensure that remote debugging is not enabled for app services"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/AppServiceAuthentication.tf:22-38

		22 | resource "azurerm_app_service" "fail" {
		23 |   name                = "example-app-service"
		24 |   location            = azurerm_resource_group.example.location
		25 |   resource_group_name = azurerm_resource_group.example.name
		26 |   app_service_plan_id = azurerm_app_service_plan.example.id
		27 |   remote_debugging_enabled=true
		28 |   site_config {
		29 |     python_version = "2.7"
		30 |     php_version="7.1"
		31 |     min_tls_version="1.0"
		32 |     java_version = "7.0"
		33 |     cors{
		34 |     allowed_origins=["*"]
		35 |     }
		36 | }
		37 |
		38 | }


Check: CKV_AZURE_65: "Ensure that App service enables detailed error messages"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/AppServiceAuthentication.tf:22-38

		22 | resource "azurerm_app_service" "fail" {
		23 |   name                = "example-app-service"
		24 |   location            = azurerm_resource_group.example.location
		25 |   resource_group_name = azurerm_resource_group.example.name
		26 |   app_service_plan_id = azurerm_app_service_plan.example.id
		27 |   remote_debugging_enabled=true
		28 |   site_config {
		29 |     python_version = "2.7"
		30 |     php_version="7.1"
		31 |     min_tls_version="1.0"
		32 |     java_version = "7.0"
		33 |     cors{
		34 |     allowed_origins=["*"]
		35 |     }
		36 | }
		37 |
		38 | }


Check: CKV_AZURE_81: "Ensure that 'PHP version' is the latest, if used to run the web app"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/AppServiceAuthentication.tf:22-38

		22 | resource "azurerm_app_service" "fail" {
		23 |   name                = "example-app-service"
		24 |   location            = azurerm_resource_group.example.location
		25 |   resource_group_name = azurerm_resource_group.example.name
		26 |   app_service_plan_id = azurerm_app_service_plan.example.id
		27 |   remote_debugging_enabled=true
		28 |   site_config {
		29 |     python_version = "2.7"
		30 |     php_version="7.1"
		31 |     min_tls_version="1.0"
		32 |     java_version = "7.0"
		33 |     cors{
		34 |     allowed_origins=["*"]
		35 |     }
		36 | }
		37 |
		38 | }


Check: CKV_AZURE_15: "Ensure web app is using the latest version of TLS encryption"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/AppServiceAuthentication.tf:22-38

		22 | resource "azurerm_app_service" "fail" {
		23 |   name                = "example-app-service"
		24 |   location            = azurerm_resource_group.example.location
		25 |   resource_group_name = azurerm_resource_group.example.name
		26 |   app_service_plan_id = azurerm_app_service_plan.example.id
		27 |   remote_debugging_enabled=true
		28 |   site_config {
		29 |     python_version = "2.7"
		30 |     php_version="7.1"
		31 |     min_tls_version="1.0"
		32 |     java_version = "7.0"
		33 |     cors{
		34 |     allowed_origins=["*"]
		35 |     }
		36 | }
		37 |
		38 | }


Check: CKV_AZURE_17: "Ensure the web app has 'Client Certificates (Incoming client certificates)' set"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/AppServiceAuthentication.tf:22-38

		22 | resource "azurerm_app_service" "fail" {
		23 |   name                = "example-app-service"
		24 |   location            = azurerm_resource_group.example.location
		25 |   resource_group_name = azurerm_resource_group.example.name
		26 |   app_service_plan_id = azurerm_app_service_plan.example.id
		27 |   remote_debugging_enabled=true
		28 |   site_config {
		29 |     python_version = "2.7"
		30 |     php_version="7.1"
		31 |     min_tls_version="1.0"
		32 |     java_version = "7.0"
		33 |     cors{
		34 |     allowed_origins=["*"]
		35 |     }
		36 | }
		37 |
		38 | }


Check: CKV_AZURE_14: "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/AppServiceAuthentication.tf:22-38

		22 | resource "azurerm_app_service" "fail" {
		23 |   name                = "example-app-service"
		24 |   location            = azurerm_resource_group.example.location
		25 |   resource_group_name = azurerm_resource_group.example.name
		26 |   app_service_plan_id = azurerm_app_service_plan.example.id
		27 |   remote_debugging_enabled=true
		28 |   site_config {
		29 |     python_version = "2.7"
		30 |     php_version="7.1"
		31 |     min_tls_version="1.0"
		32 |     java_version = "7.0"
		33 |     cors{
		34 |     allowed_origins=["*"]
		35 |     }
		36 | }
		37 |
		38 | }


Check: CKV_AZURE_88: "Ensure that app services use Azure Files"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/AppServiceAuthentication.tf:22-38

		22 | resource "azurerm_app_service" "fail" {
		23 |   name                = "example-app-service"
		24 |   location            = azurerm_resource_group.example.location
		25 |   resource_group_name = azurerm_resource_group.example.name
		26 |   app_service_plan_id = azurerm_app_service_plan.example.id
		27 |   remote_debugging_enabled=true
		28 |   site_config {
		29 |     python_version = "2.7"
		30 |     php_version="7.1"
		31 |     min_tls_version="1.0"
		32 |     java_version = "7.0"
		33 |     cors{
		34 |     allowed_origins=["*"]
		35 |     }
		36 | }
		37 |
		38 | }


Check: CKV_AZURE_78: "Ensure FTP deployments are disabled"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/AppServiceAuthentication.tf:22-38

		22 | resource "azurerm_app_service" "fail" {
		23 |   name                = "example-app-service"
		24 |   location            = azurerm_resource_group.example.location
		25 |   resource_group_name = azurerm_resource_group.example.name
		26 |   app_service_plan_id = azurerm_app_service_plan.example.id
		27 |   remote_debugging_enabled=true
		28 |   site_config {
		29 |     python_version = "2.7"
		30 |     php_version="7.1"
		31 |     min_tls_version="1.0"
		32 |     java_version = "7.0"
		33 |     cors{
		34 |     allowed_origins=["*"]
		35 |     }
		36 | }
		37 |
		38 | }


Check: CKV_AZURE_83: "Ensure that 'Java version' is the latest, if used to run the web app"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/AppServiceAuthentication.tf:22-38

		22 | resource "azurerm_app_service" "fail" {
		23 |   name                = "example-app-service"
		24 |   location            = azurerm_resource_group.example.location
		25 |   resource_group_name = azurerm_resource_group.example.name
		26 |   app_service_plan_id = azurerm_app_service_plan.example.id
		27 |   remote_debugging_enabled=true
		28 |   site_config {
		29 |     python_version = "2.7"
		30 |     php_version="7.1"
		31 |     min_tls_version="1.0"
		32 |     java_version = "7.0"
		33 |     cors{
		34 |     allowed_origins=["*"]
		35 |     }
		36 | }
		37 |
		38 | }


Check: CKV_AZURE_18: "Ensure that 'HTTP Version' is the latest if used to run the web app"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/AppServiceAuthentication.tf:22-38

		22 | resource "azurerm_app_service" "fail" {
		23 |   name                = "example-app-service"
		24 |   location            = azurerm_resource_group.example.location
		25 |   resource_group_name = azurerm_resource_group.example.name
		26 |   app_service_plan_id = azurerm_app_service_plan.example.id
		27 |   remote_debugging_enabled=true
		28 |   site_config {
		29 |     python_version = "2.7"
		30 |     php_version="7.1"
		31 |     min_tls_version="1.0"
		32 |     java_version = "7.0"
		33 |     cors{
		34 |     allowed_origins=["*"]
		35 |     }
		36 | }
		37 |
		38 | }


Check: CKV_AZURE_66: "Ensure that App service enables failed request tracing"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/AppServiceAuthentication.tf:22-38

		22 | resource "azurerm_app_service" "fail" {
		23 |   name                = "example-app-service"
		24 |   location            = azurerm_resource_group.example.location
		25 |   resource_group_name = azurerm_resource_group.example.name
		26 |   app_service_plan_id = azurerm_app_service_plan.example.id
		27 |   remote_debugging_enabled=true
		28 |   site_config {
		29 |     python_version = "2.7"
		30 |     php_version="7.1"
		31 |     min_tls_version="1.0"
		32 |     java_version = "7.0"
		33 |     cors{
		34 |     allowed_origins=["*"]
		35 |     }
		36 | }
		37 |
		38 | }


Check: CKV_AZURE_16: "Ensure that Register with Azure Active Directory is enabled on App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/AppServiceAuthentication.tf:22-38

		22 | resource "azurerm_app_service" "fail" {
		23 |   name                = "example-app-service"
		24 |   location            = azurerm_resource_group.example.location
		25 |   resource_group_name = azurerm_resource_group.example.name
		26 |   app_service_plan_id = azurerm_app_service_plan.example.id
		27 |   remote_debugging_enabled=true
		28 |   site_config {
		29 |     python_version = "2.7"
		30 |     php_version="7.1"
		31 |     min_tls_version="1.0"
		32 |     java_version = "7.0"
		33 |     cors{
		34 |     allowed_origins=["*"]
		35 |     }
		36 | }
		37 |
		38 | }


Check: CKV_AZURE_13: "Ensure App Service Authentication is set on Azure App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/AppServiceAuthentication.tf:22-38

		22 | resource "azurerm_app_service" "fail" {
		23 |   name                = "example-app-service"
		24 |   location            = azurerm_resource_group.example.location
		25 |   resource_group_name = azurerm_resource_group.example.name
		26 |   app_service_plan_id = azurerm_app_service_plan.example.id
		27 |   remote_debugging_enabled=true
		28 |   site_config {
		29 |     python_version = "2.7"
		30 |     php_version="7.1"
		31 |     min_tls_version="1.0"
		32 |     java_version = "7.0"
		33 |     cors{
		34 |     allowed_origins=["*"]
		35 |     }
		36 | }
		37 |
		38 | }


Check: CKV_AZURE_71: "Ensure that Managed identity provider is enabled for app services"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDetailedErrorMessagesEnabled.tf:2-32

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   logs {
		14 |     application_logs {
		15 |       azure_blob_storage {
		16 |         level             = "warning"
		17 |         sas_url           = "www.example.com"
		18 |         retention_in_days = 4
		19 |       }
		20 |     }
		21 |   }
		22 |
		23 |   app_settings = {
		24 |     "SOME_KEY" = "some-value"
		25 |   }
		26 |
		27 |   connection_string {
		28 |     name  = "Database"
		29 |     type  = "SQLServer"
		30 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		31 |   }
		32 | }


Check: CKV_AZURE_63: "Ensure that App service enables HTTP logging"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDetailedErrorMessagesEnabled.tf:2-32

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   logs {
		14 |     application_logs {
		15 |       azure_blob_storage {
		16 |         level             = "warning"
		17 |         sas_url           = "www.example.com"
		18 |         retention_in_days = 4
		19 |       }
		20 |     }
		21 |   }
		22 |
		23 |   app_settings = {
		24 |     "SOME_KEY" = "some-value"
		25 |   }
		26 |
		27 |   connection_string {
		28 |     name  = "Database"
		29 |     type  = "SQLServer"
		30 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		31 |   }
		32 | }


Check: CKV_AZURE_80: "Ensure that 'Net Framework' version is the latest, if used as a part of the web app"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDetailedErrorMessagesEnabled.tf:2-32

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   logs {
		14 |     application_logs {
		15 |       azure_blob_storage {
		16 |         level             = "warning"
		17 |         sas_url           = "www.example.com"
		18 |         retention_in_days = 4
		19 |       }
		20 |     }
		21 |   }
		22 |
		23 |   app_settings = {
		24 |     "SOME_KEY" = "some-value"
		25 |   }
		26 |
		27 |   connection_string {
		28 |     name  = "Database"
		29 |     type  = "SQLServer"
		30 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		31 |   }
		32 | }


Check: CKV_AZURE_65: "Ensure that App service enables detailed error messages"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDetailedErrorMessagesEnabled.tf:2-32

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   logs {
		14 |     application_logs {
		15 |       azure_blob_storage {
		16 |         level             = "warning"
		17 |         sas_url           = "www.example.com"
		18 |         retention_in_days = 4
		19 |       }
		20 |     }
		21 |   }
		22 |
		23 |   app_settings = {
		24 |     "SOME_KEY" = "some-value"
		25 |   }
		26 |
		27 |   connection_string {
		28 |     name  = "Database"
		29 |     type  = "SQLServer"
		30 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		31 |   }
		32 | }


Check: CKV_AZURE_17: "Ensure the web app has 'Client Certificates (Incoming client certificates)' set"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDetailedErrorMessagesEnabled.tf:2-32

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   logs {
		14 |     application_logs {
		15 |       azure_blob_storage {
		16 |         level             = "warning"
		17 |         sas_url           = "www.example.com"
		18 |         retention_in_days = 4
		19 |       }
		20 |     }
		21 |   }
		22 |
		23 |   app_settings = {
		24 |     "SOME_KEY" = "some-value"
		25 |   }
		26 |
		27 |   connection_string {
		28 |     name  = "Database"
		29 |     type  = "SQLServer"
		30 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		31 |   }
		32 | }


Check: CKV_AZURE_14: "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDetailedErrorMessagesEnabled.tf:2-32

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   logs {
		14 |     application_logs {
		15 |       azure_blob_storage {
		16 |         level             = "warning"
		17 |         sas_url           = "www.example.com"
		18 |         retention_in_days = 4
		19 |       }
		20 |     }
		21 |   }
		22 |
		23 |   app_settings = {
		24 |     "SOME_KEY" = "some-value"
		25 |   }
		26 |
		27 |   connection_string {
		28 |     name  = "Database"
		29 |     type  = "SQLServer"
		30 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		31 |   }
		32 | }


Check: CKV_AZURE_88: "Ensure that app services use Azure Files"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDetailedErrorMessagesEnabled.tf:2-32

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   logs {
		14 |     application_logs {
		15 |       azure_blob_storage {
		16 |         level             = "warning"
		17 |         sas_url           = "www.example.com"
		18 |         retention_in_days = 4
		19 |       }
		20 |     }
		21 |   }
		22 |
		23 |   app_settings = {
		24 |     "SOME_KEY" = "some-value"
		25 |   }
		26 |
		27 |   connection_string {
		28 |     name  = "Database"
		29 |     type  = "SQLServer"
		30 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		31 |   }
		32 | }


Check: CKV_AZURE_78: "Ensure FTP deployments are disabled"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDetailedErrorMessagesEnabled.tf:2-32

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   logs {
		14 |     application_logs {
		15 |       azure_blob_storage {
		16 |         level             = "warning"
		17 |         sas_url           = "www.example.com"
		18 |         retention_in_days = 4
		19 |       }
		20 |     }
		21 |   }
		22 |
		23 |   app_settings = {
		24 |     "SOME_KEY" = "some-value"
		25 |   }
		26 |
		27 |   connection_string {
		28 |     name  = "Database"
		29 |     type  = "SQLServer"
		30 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		31 |   }
		32 | }


Check: CKV_AZURE_18: "Ensure that 'HTTP Version' is the latest if used to run the web app"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDetailedErrorMessagesEnabled.tf:2-32

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   logs {
		14 |     application_logs {
		15 |       azure_blob_storage {
		16 |         level             = "warning"
		17 |         sas_url           = "www.example.com"
		18 |         retention_in_days = 4
		19 |       }
		20 |     }
		21 |   }
		22 |
		23 |   app_settings = {
		24 |     "SOME_KEY" = "some-value"
		25 |   }
		26 |
		27 |   connection_string {
		28 |     name  = "Database"
		29 |     type  = "SQLServer"
		30 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		31 |   }
		32 | }


Check: CKV_AZURE_66: "Ensure that App service enables failed request tracing"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDetailedErrorMessagesEnabled.tf:2-32

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   logs {
		14 |     application_logs {
		15 |       azure_blob_storage {
		16 |         level             = "warning"
		17 |         sas_url           = "www.example.com"
		18 |         retention_in_days = 4
		19 |       }
		20 |     }
		21 |   }
		22 |
		23 |   app_settings = {
		24 |     "SOME_KEY" = "some-value"
		25 |   }
		26 |
		27 |   connection_string {
		28 |     name  = "Database"
		29 |     type  = "SQLServer"
		30 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		31 |   }
		32 | }


Check: CKV_AZURE_16: "Ensure that Register with Azure Active Directory is enabled on App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDetailedErrorMessagesEnabled.tf:2-32

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   logs {
		14 |     application_logs {
		15 |       azure_blob_storage {
		16 |         level             = "warning"
		17 |         sas_url           = "www.example.com"
		18 |         retention_in_days = 4
		19 |       }
		20 |     }
		21 |   }
		22 |
		23 |   app_settings = {
		24 |     "SOME_KEY" = "some-value"
		25 |   }
		26 |
		27 |   connection_string {
		28 |     name  = "Database"
		29 |     type  = "SQLServer"
		30 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		31 |   }
		32 | }


Check: CKV_AZURE_13: "Ensure App Service Authentication is set on Azure App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDetailedErrorMessagesEnabled.tf:2-32

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   logs {
		14 |     application_logs {
		15 |       azure_blob_storage {
		16 |         level             = "warning"
		17 |         sas_url           = "www.example.com"
		18 |         retention_in_days = 4
		19 |       }
		20 |     }
		21 |   }
		22 |
		23 |   app_settings = {
		24 |     "SOME_KEY" = "some-value"
		25 |   }
		26 |
		27 |   connection_string {
		28 |     name  = "Database"
		29 |     type  = "SQLServer"
		30 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		31 |   }
		32 | }


Check: CKV_AZURE_71: "Ensure that Managed identity provider is enabled for app services"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDisallowedCORS.tf:2-25

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |     cors {
		12 |       allowed_origins = ["*"]
		13 |     }
		14 |   }
		15 |
		16 |   app_settings = {
		17 |     "SOME_KEY" = "some-value"
		18 |   }
		19 |
		20 |   connection_string {
		21 |     name  = "Database"
		22 |     type  = "SQLServer"
		23 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		24 |   }
		25 | }


Check: CKV_AZURE_57: "Ensure that CORS disallows every resource to access app services"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDisallowedCORS.tf:2-25

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |     cors {
		12 |       allowed_origins = ["*"]
		13 |     }
		14 |   }
		15 |
		16 |   app_settings = {
		17 |     "SOME_KEY" = "some-value"
		18 |   }
		19 |
		20 |   connection_string {
		21 |     name  = "Database"
		22 |     type  = "SQLServer"
		23 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		24 |   }
		25 | }


Check: CKV_AZURE_63: "Ensure that App service enables HTTP logging"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDisallowedCORS.tf:2-25

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |     cors {
		12 |       allowed_origins = ["*"]
		13 |     }
		14 |   }
		15 |
		16 |   app_settings = {
		17 |     "SOME_KEY" = "some-value"
		18 |   }
		19 |
		20 |   connection_string {
		21 |     name  = "Database"
		22 |     type  = "SQLServer"
		23 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		24 |   }
		25 | }


Check: CKV_AZURE_80: "Ensure that 'Net Framework' version is the latest, if used as a part of the web app"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDisallowedCORS.tf:2-25

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |     cors {
		12 |       allowed_origins = ["*"]
		13 |     }
		14 |   }
		15 |
		16 |   app_settings = {
		17 |     "SOME_KEY" = "some-value"
		18 |   }
		19 |
		20 |   connection_string {
		21 |     name  = "Database"
		22 |     type  = "SQLServer"
		23 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		24 |   }
		25 | }


Check: CKV_AZURE_65: "Ensure that App service enables detailed error messages"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDisallowedCORS.tf:2-25

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |     cors {
		12 |       allowed_origins = ["*"]
		13 |     }
		14 |   }
		15 |
		16 |   app_settings = {
		17 |     "SOME_KEY" = "some-value"
		18 |   }
		19 |
		20 |   connection_string {
		21 |     name  = "Database"
		22 |     type  = "SQLServer"
		23 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		24 |   }
		25 | }


Check: CKV_AZURE_17: "Ensure the web app has 'Client Certificates (Incoming client certificates)' set"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDisallowedCORS.tf:2-25

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |     cors {
		12 |       allowed_origins = ["*"]
		13 |     }
		14 |   }
		15 |
		16 |   app_settings = {
		17 |     "SOME_KEY" = "some-value"
		18 |   }
		19 |
		20 |   connection_string {
		21 |     name  = "Database"
		22 |     type  = "SQLServer"
		23 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		24 |   }
		25 | }


Check: CKV_AZURE_14: "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDisallowedCORS.tf:2-25

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |     cors {
		12 |       allowed_origins = ["*"]
		13 |     }
		14 |   }
		15 |
		16 |   app_settings = {
		17 |     "SOME_KEY" = "some-value"
		18 |   }
		19 |
		20 |   connection_string {
		21 |     name  = "Database"
		22 |     type  = "SQLServer"
		23 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		24 |   }
		25 | }


Check: CKV_AZURE_88: "Ensure that app services use Azure Files"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDisallowedCORS.tf:2-25

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |     cors {
		12 |       allowed_origins = ["*"]
		13 |     }
		14 |   }
		15 |
		16 |   app_settings = {
		17 |     "SOME_KEY" = "some-value"
		18 |   }
		19 |
		20 |   connection_string {
		21 |     name  = "Database"
		22 |     type  = "SQLServer"
		23 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		24 |   }
		25 | }


Check: CKV_AZURE_78: "Ensure FTP deployments are disabled"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDisallowedCORS.tf:2-25

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |     cors {
		12 |       allowed_origins = ["*"]
		13 |     }
		14 |   }
		15 |
		16 |   app_settings = {
		17 |     "SOME_KEY" = "some-value"
		18 |   }
		19 |
		20 |   connection_string {
		21 |     name  = "Database"
		22 |     type  = "SQLServer"
		23 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		24 |   }
		25 | }


Check: CKV_AZURE_18: "Ensure that 'HTTP Version' is the latest if used to run the web app"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDisallowedCORS.tf:2-25

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |     cors {
		12 |       allowed_origins = ["*"]
		13 |     }
		14 |   }
		15 |
		16 |   app_settings = {
		17 |     "SOME_KEY" = "some-value"
		18 |   }
		19 |
		20 |   connection_string {
		21 |     name  = "Database"
		22 |     type  = "SQLServer"
		23 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		24 |   }
		25 | }


Check: CKV_AZURE_66: "Ensure that App service enables failed request tracing"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDisallowedCORS.tf:2-25

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |     cors {
		12 |       allowed_origins = ["*"]
		13 |     }
		14 |   }
		15 |
		16 |   app_settings = {
		17 |     "SOME_KEY" = "some-value"
		18 |   }
		19 |
		20 |   connection_string {
		21 |     name  = "Database"
		22 |     type  = "SQLServer"
		23 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		24 |   }
		25 | }


Check: CKV_AZURE_16: "Ensure that Register with Azure Active Directory is enabled on App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDisallowedCORS.tf:2-25

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |     cors {
		12 |       allowed_origins = ["*"]
		13 |     }
		14 |   }
		15 |
		16 |   app_settings = {
		17 |     "SOME_KEY" = "some-value"
		18 |   }
		19 |
		20 |   connection_string {
		21 |     name  = "Database"
		22 |     type  = "SQLServer"
		23 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		24 |   }
		25 | }


Check: CKV_AZURE_13: "Ensure App Service Authentication is set on Azure App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDisallowedCORS.tf:2-25

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |     cors {
		12 |       allowed_origins = ["*"]
		13 |     }
		14 |   }
		15 |
		16 |   app_settings = {
		17 |     "SOME_KEY" = "some-value"
		18 |   }
		19 |
		20 |   connection_string {
		21 |     name  = "Database"
		22 |     type  = "SQLServer"
		23 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		24 |   }
		25 | }


Check: CKV_AZURE_71: "Ensure that Managed identity provider is enabled for app services"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDotnetFrameworkVersion.tf:2-12

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "someValue"
		11 |   }
		12 | }


Check: CKV_AZURE_63: "Ensure that App service enables HTTP logging"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDotnetFrameworkVersion.tf:2-12

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "someValue"
		11 |   }
		12 | }


Check: CKV_AZURE_80: "Ensure that 'Net Framework' version is the latest, if used as a part of the web app"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDotnetFrameworkVersion.tf:2-12

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "someValue"
		11 |   }
		12 | }


Check: CKV_AZURE_65: "Ensure that App service enables detailed error messages"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDotnetFrameworkVersion.tf:2-12

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "someValue"
		11 |   }
		12 | }


Check: CKV_AZURE_17: "Ensure the web app has 'Client Certificates (Incoming client certificates)' set"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDotnetFrameworkVersion.tf:2-12

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "someValue"
		11 |   }
		12 | }


Check: CKV_AZURE_88: "Ensure that app services use Azure Files"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDotnetFrameworkVersion.tf:2-12

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "someValue"
		11 |   }
		12 | }


Check: CKV_AZURE_78: "Ensure FTP deployments are disabled"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDotnetFrameworkVersion.tf:2-12

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "someValue"
		11 |   }
		12 | }


Check: CKV_AZURE_18: "Ensure that 'HTTP Version' is the latest if used to run the web app"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDotnetFrameworkVersion.tf:2-12

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "someValue"
		11 |   }
		12 | }


Check: CKV_AZURE_66: "Ensure that App service enables failed request tracing"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDotnetFrameworkVersion.tf:2-12

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "someValue"
		11 |   }
		12 | }


Check: CKV_AZURE_16: "Ensure that Register with Azure Active Directory is enabled on App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDotnetFrameworkVersion.tf:2-12

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "someValue"
		11 |   }
		12 | }


Check: CKV_AZURE_13: "Ensure App Service Authentication is set on Azure App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceDotnetFrameworkVersion.tf:2-12

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "someValue"
		11 |   }
		12 | }


Check: CKV_AZURE_71: "Ensure that Managed identity provider is enabled for app services"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceEnableFailedRequest.tf:2-11

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   logs {
		9  |     failed_request_tracing_enabled = false
		10 |   }
		11 | }


Check: CKV_AZURE_63: "Ensure that App service enables HTTP logging"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceEnableFailedRequest.tf:2-11

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   logs {
		9  |     failed_request_tracing_enabled = false
		10 |   }
		11 | }


Check: CKV_AZURE_80: "Ensure that 'Net Framework' version is the latest, if used as a part of the web app"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceEnableFailedRequest.tf:2-11

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   logs {
		9  |     failed_request_tracing_enabled = false
		10 |   }
		11 | }


Check: CKV_AZURE_65: "Ensure that App service enables detailed error messages"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceEnableFailedRequest.tf:2-11

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   logs {
		9  |     failed_request_tracing_enabled = false
		10 |   }
		11 | }


Check: CKV_AZURE_17: "Ensure the web app has 'Client Certificates (Incoming client certificates)' set"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceEnableFailedRequest.tf:2-11

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   logs {
		9  |     failed_request_tracing_enabled = false
		10 |   }
		11 | }


Check: CKV_AZURE_88: "Ensure that app services use Azure Files"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceEnableFailedRequest.tf:2-11

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   logs {
		9  |     failed_request_tracing_enabled = false
		10 |   }
		11 | }


Check: CKV_AZURE_78: "Ensure FTP deployments are disabled"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceEnableFailedRequest.tf:2-11

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   logs {
		9  |     failed_request_tracing_enabled = false
		10 |   }
		11 | }


Check: CKV_AZURE_18: "Ensure that 'HTTP Version' is the latest if used to run the web app"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceEnableFailedRequest.tf:2-11

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   logs {
		9  |     failed_request_tracing_enabled = false
		10 |   }
		11 | }


Check: CKV_AZURE_66: "Ensure that App service enables failed request tracing"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceEnableFailedRequest.tf:2-11

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   logs {
		9  |     failed_request_tracing_enabled = false
		10 |   }
		11 | }


Check: CKV_AZURE_16: "Ensure that Register with Azure Active Directory is enabled on App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceEnableFailedRequest.tf:2-11

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   logs {
		9  |     failed_request_tracing_enabled = false
		10 |   }
		11 | }


Check: CKV_AZURE_13: "Ensure App Service Authentication is set on Azure App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceEnableFailedRequest.tf:2-11

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   logs {
		9  |     failed_request_tracing_enabled = false
		10 |   }
		11 | }


Check: CKV_AZURE_71: "Ensure that Managed identity provider is enabled for app services"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceFTPSState.tf:2-12

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   site_config {
		9  |     ftps_state = "AllAllowed"
		10 |   }
		11 |
		12 | }


Check: CKV_AZURE_63: "Ensure that App service enables HTTP logging"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceFTPSState.tf:2-12

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   site_config {
		9  |     ftps_state = "AllAllowed"
		10 |   }
		11 |
		12 | }


Check: CKV_AZURE_80: "Ensure that 'Net Framework' version is the latest, if used as a part of the web app"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceFTPSState.tf:2-12

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   site_config {
		9  |     ftps_state = "AllAllowed"
		10 |   }
		11 |
		12 | }


Check: CKV_AZURE_65: "Ensure that App service enables detailed error messages"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceFTPSState.tf:2-12

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   site_config {
		9  |     ftps_state = "AllAllowed"
		10 |   }
		11 |
		12 | }


Check: CKV_AZURE_17: "Ensure the web app has 'Client Certificates (Incoming client certificates)' set"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceFTPSState.tf:2-12

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   site_config {
		9  |     ftps_state = "AllAllowed"
		10 |   }
		11 |
		12 | }


Check: CKV_AZURE_88: "Ensure that app services use Azure Files"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceFTPSState.tf:2-12

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   site_config {
		9  |     ftps_state = "AllAllowed"
		10 |   }
		11 |
		12 | }


Check: CKV_AZURE_78: "Ensure FTP deployments are disabled"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceFTPSState.tf:2-12

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   site_config {
		9  |     ftps_state = "AllAllowed"
		10 |   }
		11 |
		12 | }


Check: CKV_AZURE_18: "Ensure that 'HTTP Version' is the latest if used to run the web app"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceFTPSState.tf:2-12

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   site_config {
		9  |     ftps_state = "AllAllowed"
		10 |   }
		11 |
		12 | }


Check: CKV_AZURE_66: "Ensure that App service enables failed request tracing"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceFTPSState.tf:2-12

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   site_config {
		9  |     ftps_state = "AllAllowed"
		10 |   }
		11 |
		12 | }


Check: CKV_AZURE_16: "Ensure that Register with Azure Active Directory is enabled on App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceFTPSState.tf:2-12

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   site_config {
		9  |     ftps_state = "AllAllowed"
		10 |   }
		11 |
		12 | }


Check: CKV_AZURE_13: "Ensure App Service Authentication is set on Azure App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceFTPSState.tf:2-12

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   site_config {
		9  |     ftps_state = "AllAllowed"
		10 |   }
		11 |
		12 | }


Check: CKV_AZURE_71: "Ensure that Managed identity provider is enabled for app services"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHTTPSOnly.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_63: "Ensure that App service enables HTTP logging"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHTTPSOnly.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_80: "Ensure that 'Net Framework' version is the latest, if used as a part of the web app"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHTTPSOnly.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_65: "Ensure that App service enables detailed error messages"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHTTPSOnly.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_17: "Ensure the web app has 'Client Certificates (Incoming client certificates)' set"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHTTPSOnly.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_14: "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHTTPSOnly.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_88: "Ensure that app services use Azure Files"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHTTPSOnly.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_78: "Ensure FTP deployments are disabled"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHTTPSOnly.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_18: "Ensure that 'HTTP Version' is the latest if used to run the web app"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHTTPSOnly.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_66: "Ensure that App service enables failed request tracing"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHTTPSOnly.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_16: "Ensure that Register with Azure Active Directory is enabled on App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHTTPSOnly.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_13: "Ensure App Service Authentication is set on Azure App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHTTPSOnly.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_71: "Ensure that Managed identity provider is enabled for app services"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttpLoggingEnabled.tf:2-32

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   logs {
		14 |     application_logs {
		15 |       azure_blob_storage {
		16 |         level             = "warning"
		17 |         sas_url           = "www.example.com"
		18 |         retention_in_days = 4
		19 |       }
		20 |     }
		21 |   }
		22 |
		23 |   app_settings = {
		24 |     "SOME_KEY" = "some-value"
		25 |   }
		26 |
		27 |   connection_string {
		28 |     name  = "Database"
		29 |     type  = "SQLServer"
		30 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		31 |   }
		32 | }


Check: CKV_AZURE_63: "Ensure that App service enables HTTP logging"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttpLoggingEnabled.tf:2-32

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   logs {
		14 |     application_logs {
		15 |       azure_blob_storage {
		16 |         level             = "warning"
		17 |         sas_url           = "www.example.com"
		18 |         retention_in_days = 4
		19 |       }
		20 |     }
		21 |   }
		22 |
		23 |   app_settings = {
		24 |     "SOME_KEY" = "some-value"
		25 |   }
		26 |
		27 |   connection_string {
		28 |     name  = "Database"
		29 |     type  = "SQLServer"
		30 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		31 |   }
		32 | }


Check: CKV_AZURE_80: "Ensure that 'Net Framework' version is the latest, if used as a part of the web app"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttpLoggingEnabled.tf:2-32

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   logs {
		14 |     application_logs {
		15 |       azure_blob_storage {
		16 |         level             = "warning"
		17 |         sas_url           = "www.example.com"
		18 |         retention_in_days = 4
		19 |       }
		20 |     }
		21 |   }
		22 |
		23 |   app_settings = {
		24 |     "SOME_KEY" = "some-value"
		25 |   }
		26 |
		27 |   connection_string {
		28 |     name  = "Database"
		29 |     type  = "SQLServer"
		30 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		31 |   }
		32 | }


Check: CKV_AZURE_65: "Ensure that App service enables detailed error messages"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttpLoggingEnabled.tf:2-32

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   logs {
		14 |     application_logs {
		15 |       azure_blob_storage {
		16 |         level             = "warning"
		17 |         sas_url           = "www.example.com"
		18 |         retention_in_days = 4
		19 |       }
		20 |     }
		21 |   }
		22 |
		23 |   app_settings = {
		24 |     "SOME_KEY" = "some-value"
		25 |   }
		26 |
		27 |   connection_string {
		28 |     name  = "Database"
		29 |     type  = "SQLServer"
		30 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		31 |   }
		32 | }


Check: CKV_AZURE_17: "Ensure the web app has 'Client Certificates (Incoming client certificates)' set"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttpLoggingEnabled.tf:2-32

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   logs {
		14 |     application_logs {
		15 |       azure_blob_storage {
		16 |         level             = "warning"
		17 |         sas_url           = "www.example.com"
		18 |         retention_in_days = 4
		19 |       }
		20 |     }
		21 |   }
		22 |
		23 |   app_settings = {
		24 |     "SOME_KEY" = "some-value"
		25 |   }
		26 |
		27 |   connection_string {
		28 |     name  = "Database"
		29 |     type  = "SQLServer"
		30 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		31 |   }
		32 | }


Check: CKV_AZURE_14: "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttpLoggingEnabled.tf:2-32

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   logs {
		14 |     application_logs {
		15 |       azure_blob_storage {
		16 |         level             = "warning"
		17 |         sas_url           = "www.example.com"
		18 |         retention_in_days = 4
		19 |       }
		20 |     }
		21 |   }
		22 |
		23 |   app_settings = {
		24 |     "SOME_KEY" = "some-value"
		25 |   }
		26 |
		27 |   connection_string {
		28 |     name  = "Database"
		29 |     type  = "SQLServer"
		30 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		31 |   }
		32 | }


Check: CKV_AZURE_88: "Ensure that app services use Azure Files"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttpLoggingEnabled.tf:2-32

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   logs {
		14 |     application_logs {
		15 |       azure_blob_storage {
		16 |         level             = "warning"
		17 |         sas_url           = "www.example.com"
		18 |         retention_in_days = 4
		19 |       }
		20 |     }
		21 |   }
		22 |
		23 |   app_settings = {
		24 |     "SOME_KEY" = "some-value"
		25 |   }
		26 |
		27 |   connection_string {
		28 |     name  = "Database"
		29 |     type  = "SQLServer"
		30 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		31 |   }
		32 | }


Check: CKV_AZURE_78: "Ensure FTP deployments are disabled"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttpLoggingEnabled.tf:2-32

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   logs {
		14 |     application_logs {
		15 |       azure_blob_storage {
		16 |         level             = "warning"
		17 |         sas_url           = "www.example.com"
		18 |         retention_in_days = 4
		19 |       }
		20 |     }
		21 |   }
		22 |
		23 |   app_settings = {
		24 |     "SOME_KEY" = "some-value"
		25 |   }
		26 |
		27 |   connection_string {
		28 |     name  = "Database"
		29 |     type  = "SQLServer"
		30 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		31 |   }
		32 | }


Check: CKV_AZURE_18: "Ensure that 'HTTP Version' is the latest if used to run the web app"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttpLoggingEnabled.tf:2-32

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   logs {
		14 |     application_logs {
		15 |       azure_blob_storage {
		16 |         level             = "warning"
		17 |         sas_url           = "www.example.com"
		18 |         retention_in_days = 4
		19 |       }
		20 |     }
		21 |   }
		22 |
		23 |   app_settings = {
		24 |     "SOME_KEY" = "some-value"
		25 |   }
		26 |
		27 |   connection_string {
		28 |     name  = "Database"
		29 |     type  = "SQLServer"
		30 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		31 |   }
		32 | }


Check: CKV_AZURE_66: "Ensure that App service enables failed request tracing"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttpLoggingEnabled.tf:2-32

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   logs {
		14 |     application_logs {
		15 |       azure_blob_storage {
		16 |         level             = "warning"
		17 |         sas_url           = "www.example.com"
		18 |         retention_in_days = 4
		19 |       }
		20 |     }
		21 |   }
		22 |
		23 |   app_settings = {
		24 |     "SOME_KEY" = "some-value"
		25 |   }
		26 |
		27 |   connection_string {
		28 |     name  = "Database"
		29 |     type  = "SQLServer"
		30 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		31 |   }
		32 | }


Check: CKV_AZURE_16: "Ensure that Register with Azure Active Directory is enabled on App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttpLoggingEnabled.tf:2-32

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   logs {
		14 |     application_logs {
		15 |       azure_blob_storage {
		16 |         level             = "warning"
		17 |         sas_url           = "www.example.com"
		18 |         retention_in_days = 4
		19 |       }
		20 |     }
		21 |   }
		22 |
		23 |   app_settings = {
		24 |     "SOME_KEY" = "some-value"
		25 |   }
		26 |
		27 |   connection_string {
		28 |     name  = "Database"
		29 |     type  = "SQLServer"
		30 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		31 |   }
		32 | }


Check: CKV_AZURE_13: "Ensure App Service Authentication is set on Azure App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttpLoggingEnabled.tf:2-32

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   logs {
		14 |     application_logs {
		15 |       azure_blob_storage {
		16 |         level             = "warning"
		17 |         sas_url           = "www.example.com"
		18 |         retention_in_days = 4
		19 |       }
		20 |     }
		21 |   }
		22 |
		23 |   app_settings = {
		24 |     "SOME_KEY" = "some-value"
		25 |   }
		26 |
		27 |   connection_string {
		28 |     name  = "Database"
		29 |     type  = "SQLServer"
		30 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		31 |   }
		32 | }


Check: CKV_AZURE_71: "Ensure that Managed identity provider is enabled for app services"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttps20Enabled.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_63: "Ensure that App service enables HTTP logging"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttps20Enabled.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_80: "Ensure that 'Net Framework' version is the latest, if used as a part of the web app"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttps20Enabled.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_65: "Ensure that App service enables detailed error messages"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttps20Enabled.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_17: "Ensure the web app has 'Client Certificates (Incoming client certificates)' set"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttps20Enabled.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_14: "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttps20Enabled.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_88: "Ensure that app services use Azure Files"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttps20Enabled.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_78: "Ensure FTP deployments are disabled"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttps20Enabled.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_18: "Ensure that 'HTTP Version' is the latest if used to run the web app"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttps20Enabled.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_66: "Ensure that App service enables failed request tracing"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttps20Enabled.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_16: "Ensure that Register with Azure Active Directory is enabled on App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttps20Enabled.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_13: "Ensure App Service Authentication is set on Azure App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceHttps20Enabled.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_71: "Ensure that Managed identity provider is enabled for app services"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentity.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_63: "Ensure that App service enables HTTP logging"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentity.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_80: "Ensure that 'Net Framework' version is the latest, if used as a part of the web app"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentity.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_65: "Ensure that App service enables detailed error messages"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentity.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_17: "Ensure the web app has 'Client Certificates (Incoming client certificates)' set"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentity.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_14: "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentity.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_88: "Ensure that app services use Azure Files"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentity.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_78: "Ensure FTP deployments are disabled"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentity.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_18: "Ensure that 'HTTP Version' is the latest if used to run the web app"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentity.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_66: "Ensure that App service enables failed request tracing"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentity.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_16: "Ensure that Register with Azure Active Directory is enabled on App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentity.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_13: "Ensure App Service Authentication is set on Azure App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentity.tf:2-7

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_71: "Ensure that Managed identity provider is enabled for app services"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentityProviderEnabled.tf:2-22

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   app_settings = {
		14 |     "SOME_KEY" = "some-value"
		15 |   }
		16 |
		17 |   connection_string {
		18 |     name  = "Database"
		19 |     type  = "SQLServer"
		20 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		21 |   }
		22 | }


Check: CKV_AZURE_63: "Ensure that App service enables HTTP logging"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentityProviderEnabled.tf:2-22

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   app_settings = {
		14 |     "SOME_KEY" = "some-value"
		15 |   }
		16 |
		17 |   connection_string {
		18 |     name  = "Database"
		19 |     type  = "SQLServer"
		20 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		21 |   }
		22 | }


Check: CKV_AZURE_80: "Ensure that 'Net Framework' version is the latest, if used as a part of the web app"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentityProviderEnabled.tf:2-22

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   app_settings = {
		14 |     "SOME_KEY" = "some-value"
		15 |   }
		16 |
		17 |   connection_string {
		18 |     name  = "Database"
		19 |     type  = "SQLServer"
		20 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		21 |   }
		22 | }


Check: CKV_AZURE_65: "Ensure that App service enables detailed error messages"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentityProviderEnabled.tf:2-22

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   app_settings = {
		14 |     "SOME_KEY" = "some-value"
		15 |   }
		16 |
		17 |   connection_string {
		18 |     name  = "Database"
		19 |     type  = "SQLServer"
		20 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		21 |   }
		22 | }


Check: CKV_AZURE_17: "Ensure the web app has 'Client Certificates (Incoming client certificates)' set"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentityProviderEnabled.tf:2-22

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   app_settings = {
		14 |     "SOME_KEY" = "some-value"
		15 |   }
		16 |
		17 |   connection_string {
		18 |     name  = "Database"
		19 |     type  = "SQLServer"
		20 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		21 |   }
		22 | }


Check: CKV_AZURE_14: "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentityProviderEnabled.tf:2-22

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   app_settings = {
		14 |     "SOME_KEY" = "some-value"
		15 |   }
		16 |
		17 |   connection_string {
		18 |     name  = "Database"
		19 |     type  = "SQLServer"
		20 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		21 |   }
		22 | }


Check: CKV_AZURE_88: "Ensure that app services use Azure Files"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentityProviderEnabled.tf:2-22

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   app_settings = {
		14 |     "SOME_KEY" = "some-value"
		15 |   }
		16 |
		17 |   connection_string {
		18 |     name  = "Database"
		19 |     type  = "SQLServer"
		20 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		21 |   }
		22 | }


Check: CKV_AZURE_78: "Ensure FTP deployments are disabled"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentityProviderEnabled.tf:2-22

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   app_settings = {
		14 |     "SOME_KEY" = "some-value"
		15 |   }
		16 |
		17 |   connection_string {
		18 |     name  = "Database"
		19 |     type  = "SQLServer"
		20 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		21 |   }
		22 | }


Check: CKV_AZURE_18: "Ensure that 'HTTP Version' is the latest if used to run the web app"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentityProviderEnabled.tf:2-22

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   app_settings = {
		14 |     "SOME_KEY" = "some-value"
		15 |   }
		16 |
		17 |   connection_string {
		18 |     name  = "Database"
		19 |     type  = "SQLServer"
		20 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		21 |   }
		22 | }


Check: CKV_AZURE_66: "Ensure that App service enables failed request tracing"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentityProviderEnabled.tf:2-22

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   app_settings = {
		14 |     "SOME_KEY" = "some-value"
		15 |   }
		16 |
		17 |   connection_string {
		18 |     name  = "Database"
		19 |     type  = "SQLServer"
		20 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		21 |   }
		22 | }


Check: CKV_AZURE_16: "Ensure that Register with Azure Active Directory is enabled on App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentityProviderEnabled.tf:2-22

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   app_settings = {
		14 |     "SOME_KEY" = "some-value"
		15 |   }
		16 |
		17 |   connection_string {
		18 |     name  = "Database"
		19 |     type  = "SQLServer"
		20 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		21 |   }
		22 | }


Check: CKV_AZURE_13: "Ensure App Service Authentication is set on Azure App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceIdentityProviderEnabled.tf:2-22

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |
		8  |   site_config {
		9  |     dotnet_framework_version = "v4.0"
		10 |     scm_type                 = "LocalGit"
		11 |   }
		12 |
		13 |   app_settings = {
		14 |     "SOME_KEY" = "some-value"
		15 |   }
		16 |
		17 |   connection_string {
		18 |     name  = "Database"
		19 |     type  = "SQLServer"
		20 |     value = "Server=some-server.mydomain.com;Integrated Security=SSPI"
		21 |   }
		22 | }


Check: CKV_AZURE_71: "Ensure that Managed identity provider is enabled for app services"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceUsedAzureFiles.tf:2-15

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   storage_account {
		9  |     name         = "test_name"
		10 |     type         = "AzureBlob"
		11 |     account_name = "test_account_name"
		12 |     share_name   = "test_share_name"
		13 |     access_key   = "test_access_key"
		14 |   }
		15 | }


Check: CKV_AZURE_63: "Ensure that App service enables HTTP logging"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceUsedAzureFiles.tf:2-15

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   storage_account {
		9  |     name         = "test_name"
		10 |     type         = "AzureBlob"
		11 |     account_name = "test_account_name"
		12 |     share_name   = "test_share_name"
		13 |     access_key   = "test_access_key"
		14 |   }
		15 | }


Check: CKV_AZURE_80: "Ensure that 'Net Framework' version is the latest, if used as a part of the web app"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceUsedAzureFiles.tf:2-15

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   storage_account {
		9  |     name         = "test_name"
		10 |     type         = "AzureBlob"
		11 |     account_name = "test_account_name"
		12 |     share_name   = "test_share_name"
		13 |     access_key   = "test_access_key"
		14 |   }
		15 | }


Check: CKV_AZURE_65: "Ensure that App service enables detailed error messages"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceUsedAzureFiles.tf:2-15

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   storage_account {
		9  |     name         = "test_name"
		10 |     type         = "AzureBlob"
		11 |     account_name = "test_account_name"
		12 |     share_name   = "test_share_name"
		13 |     access_key   = "test_access_key"
		14 |   }
		15 | }


Check: CKV_AZURE_17: "Ensure the web app has 'Client Certificates (Incoming client certificates)' set"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceUsedAzureFiles.tf:2-15

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   storage_account {
		9  |     name         = "test_name"
		10 |     type         = "AzureBlob"
		11 |     account_name = "test_account_name"
		12 |     share_name   = "test_share_name"
		13 |     access_key   = "test_access_key"
		14 |   }
		15 | }


Check: CKV_AZURE_88: "Ensure that app services use Azure Files"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceUsedAzureFiles.tf:2-15

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   storage_account {
		9  |     name         = "test_name"
		10 |     type         = "AzureBlob"
		11 |     account_name = "test_account_name"
		12 |     share_name   = "test_share_name"
		13 |     access_key   = "test_access_key"
		14 |   }
		15 | }


Check: CKV_AZURE_78: "Ensure FTP deployments are disabled"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceUsedAzureFiles.tf:2-15

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   storage_account {
		9  |     name         = "test_name"
		10 |     type         = "AzureBlob"
		11 |     account_name = "test_account_name"
		12 |     share_name   = "test_share_name"
		13 |     access_key   = "test_access_key"
		14 |   }
		15 | }


Check: CKV_AZURE_18: "Ensure that 'HTTP Version' is the latest if used to run the web app"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceUsedAzureFiles.tf:2-15

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   storage_account {
		9  |     name         = "test_name"
		10 |     type         = "AzureBlob"
		11 |     account_name = "test_account_name"
		12 |     share_name   = "test_share_name"
		13 |     access_key   = "test_access_key"
		14 |   }
		15 | }


Check: CKV_AZURE_66: "Ensure that App service enables failed request tracing"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceUsedAzureFiles.tf:2-15

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   storage_account {
		9  |     name         = "test_name"
		10 |     type         = "AzureBlob"
		11 |     account_name = "test_account_name"
		12 |     share_name   = "test_share_name"
		13 |     access_key   = "test_access_key"
		14 |   }
		15 | }


Check: CKV_AZURE_16: "Ensure that Register with Azure Active Directory is enabled on App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceUsedAzureFiles.tf:2-15

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   storage_account {
		9  |     name         = "test_name"
		10 |     type         = "AzureBlob"
		11 |     account_name = "test_account_name"
		12 |     share_name   = "test_share_name"
		13 |     access_key   = "test_access_key"
		14 |   }
		15 | }


Check: CKV_AZURE_13: "Ensure App Service Authentication is set on Azure App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/appservice/AppServiceUsedAzureFiles.tf:2-15

		2  | resource "azurerm_app_service" "example" {
		3  |   name                = "example-app-service"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   app_service_plan_id = azurerm_app_service_plan.example.id
		7  |   https_only          = true
		8  |   storage_account {
		9  |     name         = "test_name"
		10 |     type         = "AzureBlob"
		11 |     account_name = "test_account_name"
		12 |     share_name   = "test_share_name"
		13 |     access_key   = "test_access_key"
		14 |   }
		15 | }


Check: CKV_AZURE_71: "Ensure that Managed identity provider is enabled for app services"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/authentication-enabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_63: "Ensure that App service enables HTTP logging"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/authentication-enabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_80: "Ensure that 'Net Framework' version is the latest, if used as a part of the web app"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/authentication-enabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_65: "Ensure that App service enables detailed error messages"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/authentication-enabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_17: "Ensure the web app has 'Client Certificates (Incoming client certificates)' set"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/authentication-enabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_14: "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/authentication-enabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_88: "Ensure that app services use Azure Files"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/authentication-enabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_78: "Ensure FTP deployments are disabled"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/authentication-enabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_18: "Ensure that 'HTTP Version' is the latest if used to run the web app"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/authentication-enabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_66: "Ensure that App service enables failed request tracing"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/authentication-enabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_16: "Ensure that Register with Azure Active Directory is enabled on App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/authentication-enabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_13: "Ensure App Service Authentication is set on Azure App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/authentication-enabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_71: "Ensure that Managed identity provider is enabled for app services"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/detailed-error-messages-enabled.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_63: "Ensure that App service enables HTTP logging"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/detailed-error-messages-enabled.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_80: "Ensure that 'Net Framework' version is the latest, if used as a part of the web app"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/detailed-error-messages-enabled.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_65: "Ensure that App service enables detailed error messages"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/detailed-error-messages-enabled.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_17: "Ensure the web app has 'Client Certificates (Incoming client certificates)' set"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/detailed-error-messages-enabled.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_14: "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/detailed-error-messages-enabled.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_88: "Ensure that app services use Azure Files"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/detailed-error-messages-enabled.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_78: "Ensure FTP deployments are disabled"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/detailed-error-messages-enabled.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_18: "Ensure that 'HTTP Version' is the latest if used to run the web app"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/detailed-error-messages-enabled.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_66: "Ensure that App service enables failed request tracing"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/detailed-error-messages-enabled.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_16: "Ensure that Register with Azure Active Directory is enabled on App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/detailed-error-messages-enabled.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_13: "Ensure App Service Authentication is set on Azure App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/detailed-error-messages-enabled.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_71: "Ensure that Managed identity provider is enabled for app services"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/dotnet-framework-version.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_63: "Ensure that App service enables HTTP logging"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/dotnet-framework-version.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_80: "Ensure that 'Net Framework' version is the latest, if used as a part of the web app"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/dotnet-framework-version.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_65: "Ensure that App service enables detailed error messages"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/dotnet-framework-version.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_17: "Ensure the web app has 'Client Certificates (Incoming client certificates)' set"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/dotnet-framework-version.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_14: "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/dotnet-framework-version.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_88: "Ensure that app services use Azure Files"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/dotnet-framework-version.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_78: "Ensure FTP deployments are disabled"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/dotnet-framework-version.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_18: "Ensure that 'HTTP Version' is the latest if used to run the web app"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/dotnet-framework-version.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_66: "Ensure that App service enables failed request tracing"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/dotnet-framework-version.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_16: "Ensure that Register with Azure Active Directory is enabled on App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/dotnet-framework-version.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_13: "Ensure App Service Authentication is set on Azure App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/dotnet-framework-version.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_71: "Ensure that Managed identity provider is enabled for app services"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-http2.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_63: "Ensure that App service enables HTTP logging"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-http2.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_80: "Ensure that 'Net Framework' version is the latest, if used as a part of the web app"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-http2.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_65: "Ensure that App service enables detailed error messages"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-http2.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_17: "Ensure the web app has 'Client Certificates (Incoming client certificates)' set"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-http2.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_14: "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-http2.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_88: "Ensure that app services use Azure Files"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-http2.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_78: "Ensure FTP deployments are disabled"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-http2.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_18: "Ensure that 'HTTP Version' is the latest if used to run the web app"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-http2.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_66: "Ensure that App service enables failed request tracing"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-http2.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_16: "Ensure that Register with Azure Active Directory is enabled on App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-http2.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_13: "Ensure App Service Authentication is set on Azure App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-http2.tf:1-6

		1 | resource "azurerm_app_service" "fail" {
		2 |   name                = "example-app-service"
		3 |   location            = azurerm_resource_group.example.location
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   app_service_plan_id = azurerm_app_service_plan.example.id
		6 | }


Check: CKV_AZURE_71: "Ensure that Managed identity provider is enabled for app services"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-https-only.tf:3-8

		3 | resource "azurerm_app_service" "fail" {
		4 |   name                = "example-app-service"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_app_service_plan.example.id
		8 | }


Check: CKV_AZURE_63: "Ensure that App service enables HTTP logging"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-https-only.tf:3-8

		3 | resource "azurerm_app_service" "fail" {
		4 |   name                = "example-app-service"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_app_service_plan.example.id
		8 | }


Check: CKV_AZURE_80: "Ensure that 'Net Framework' version is the latest, if used as a part of the web app"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-https-only.tf:3-8

		3 | resource "azurerm_app_service" "fail" {
		4 |   name                = "example-app-service"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_app_service_plan.example.id
		8 | }


Check: CKV_AZURE_65: "Ensure that App service enables detailed error messages"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-https-only.tf:3-8

		3 | resource "azurerm_app_service" "fail" {
		4 |   name                = "example-app-service"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_app_service_plan.example.id
		8 | }


Check: CKV_AZURE_17: "Ensure the web app has 'Client Certificates (Incoming client certificates)' set"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-https-only.tf:3-8

		3 | resource "azurerm_app_service" "fail" {
		4 |   name                = "example-app-service"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_app_service_plan.example.id
		8 | }


Check: CKV_AZURE_14: "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-https-only.tf:3-8

		3 | resource "azurerm_app_service" "fail" {
		4 |   name                = "example-app-service"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_app_service_plan.example.id
		8 | }


Check: CKV_AZURE_88: "Ensure that app services use Azure Files"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-https-only.tf:3-8

		3 | resource "azurerm_app_service" "fail" {
		4 |   name                = "example-app-service"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_app_service_plan.example.id
		8 | }


Check: CKV_AZURE_78: "Ensure FTP deployments are disabled"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-https-only.tf:3-8

		3 | resource "azurerm_app_service" "fail" {
		4 |   name                = "example-app-service"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_app_service_plan.example.id
		8 | }


Check: CKV_AZURE_18: "Ensure that 'HTTP Version' is the latest if used to run the web app"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-https-only.tf:3-8

		3 | resource "azurerm_app_service" "fail" {
		4 |   name                = "example-app-service"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_app_service_plan.example.id
		8 | }


Check: CKV_AZURE_66: "Ensure that App service enables failed request tracing"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-https-only.tf:3-8

		3 | resource "azurerm_app_service" "fail" {
		4 |   name                = "example-app-service"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_app_service_plan.example.id
		8 | }


Check: CKV_AZURE_16: "Ensure that Register with Azure Active Directory is enabled on App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-https-only.tf:3-8

		3 | resource "azurerm_app_service" "fail" {
		4 |   name                = "example-app-service"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_app_service_plan.example.id
		8 | }


Check: CKV_AZURE_13: "Ensure App Service Authentication is set on Azure App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/enable-https-only.tf:3-8

		3 | resource "azurerm_app_service" "fail" {
		4 |   name                = "example-app-service"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_app_service_plan.example.id
		8 | }


Check: CKV_AZURE_56: "Ensure that function apps enables Authentication"
	FAILED for resource: azurerm_function_app.fail
	File: /terraform/azurerm/appservice/enforce-https.tf:2-10

		2  | resource "azurerm_function_app" "fail" {
		3  |   name                       = "test-azure-functions"
		4  |   location                   = azurerm_resource_group.example.location
		5  |   resource_group_name        = azurerm_resource_group.example.name
		6  |   app_service_plan_id        = azurerm_app_service_plan.example.id
		7  |   storage_account_name       = azurerm_storage_account.example.name
		8  |   storage_account_access_key = azurerm_storage_account.example.primary_access_key
		9  |   os_type                    = "linux"
		10 | }


Check: CKV_AZURE_67: "Ensure that 'HTTP Version' is the latest, if used to run the Function app"
	FAILED for resource: azurerm_function_app.fail
	File: /terraform/azurerm/appservice/enforce-https.tf:2-10

		2  | resource "azurerm_function_app" "fail" {
		3  |   name                       = "test-azure-functions"
		4  |   location                   = azurerm_resource_group.example.location
		5  |   resource_group_name        = azurerm_resource_group.example.name
		6  |   app_service_plan_id        = azurerm_app_service_plan.example.id
		7  |   storage_account_name       = azurerm_storage_account.example.name
		8  |   storage_account_access_key = azurerm_storage_account.example.primary_access_key
		9  |   os_type                    = "linux"
		10 | }


Check: CKV_AZURE_70: "Ensure that Function apps is only accessible over HTTPS"
	FAILED for resource: azurerm_function_app.fail
	File: /terraform/azurerm/appservice/enforce-https.tf:2-10

		2  | resource "azurerm_function_app" "fail" {
		3  |   name                       = "test-azure-functions"
		4  |   location                   = azurerm_resource_group.example.location
		5  |   resource_group_name        = azurerm_resource_group.example.name
		6  |   app_service_plan_id        = azurerm_app_service_plan.example.id
		7  |   storage_account_name       = azurerm_storage_account.example.name
		8  |   storage_account_access_key = azurerm_storage_account.example.primary_access_key
		9  |   os_type                    = "linux"
		10 | }


Check: CKV_AZURE_71: "Ensure that Managed identity provider is enabled for app services"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/failed-request-tracing-enabled.tf:3-8

		3 | resource "azurerm_app_service" "fail" {
		4 |   name                = "example-app-service"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_app_service_plan.example.id
		8 | }


Check: CKV_AZURE_63: "Ensure that App service enables HTTP logging"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/failed-request-tracing-enabled.tf:3-8

		3 | resource "azurerm_app_service" "fail" {
		4 |   name                = "example-app-service"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_app_service_plan.example.id
		8 | }


Check: CKV_AZURE_80: "Ensure that 'Net Framework' version is the latest, if used as a part of the web app"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/failed-request-tracing-enabled.tf:3-8

		3 | resource "azurerm_app_service" "fail" {
		4 |   name                = "example-app-service"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_app_service_plan.example.id
		8 | }


Check: CKV_AZURE_65: "Ensure that App service enables detailed error messages"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/failed-request-tracing-enabled.tf:3-8

		3 | resource "azurerm_app_service" "fail" {
		4 |   name                = "example-app-service"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_app_service_plan.example.id
		8 | }


Check: CKV_AZURE_17: "Ensure the web app has 'Client Certificates (Incoming client certificates)' set"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/failed-request-tracing-enabled.tf:3-8

		3 | resource "azurerm_app_service" "fail" {
		4 |   name                = "example-app-service"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_app_service_plan.example.id
		8 | }


Check: CKV_AZURE_14: "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/failed-request-tracing-enabled.tf:3-8

		3 | resource "azurerm_app_service" "fail" {
		4 |   name                = "example-app-service"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_app_service_plan.example.id
		8 | }


Check: CKV_AZURE_88: "Ensure that app services use Azure Files"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/failed-request-tracing-enabled.tf:3-8

		3 | resource "azurerm_app_service" "fail" {
		4 |   name                = "example-app-service"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_app_service_plan.example.id
		8 | }


Check: CKV_AZURE_78: "Ensure FTP deployments are disabled"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/failed-request-tracing-enabled.tf:3-8

		3 | resource "azurerm_app_service" "fail" {
		4 |   name                = "example-app-service"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_app_service_plan.example.id
		8 | }


Check: CKV_AZURE_18: "Ensure that 'HTTP Version' is the latest if used to run the web app"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/failed-request-tracing-enabled.tf:3-8

		3 | resource "azurerm_app_service" "fail" {
		4 |   name                = "example-app-service"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_app_service_plan.example.id
		8 | }


Check: CKV_AZURE_66: "Ensure that App service enables failed request tracing"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/failed-request-tracing-enabled.tf:3-8

		3 | resource "azurerm_app_service" "fail" {
		4 |   name                = "example-app-service"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_app_service_plan.example.id
		8 | }


Check: CKV_AZURE_16: "Ensure that Register with Azure Active Directory is enabled on App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/failed-request-tracing-enabled.tf:3-8

		3 | resource "azurerm_app_service" "fail" {
		4 |   name                = "example-app-service"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_app_service_plan.example.id
		8 | }


Check: CKV_AZURE_13: "Ensure App Service Authentication is set on Azure App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/failed-request-tracing-enabled.tf:3-8

		3 | resource "azurerm_app_service" "fail" {
		4 |   name                = "example-app-service"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_app_service_plan.example.id
		8 | }


Check: CKV_AZURE_71: "Ensure that Managed identity provider is enabled for app services"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/ftp-deployments-disabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_63: "Ensure that App service enables HTTP logging"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/ftp-deployments-disabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_80: "Ensure that 'Net Framework' version is the latest, if used as a part of the web app"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/ftp-deployments-disabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_65: "Ensure that App service enables detailed error messages"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/ftp-deployments-disabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_17: "Ensure the web app has 'Client Certificates (Incoming client certificates)' set"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/ftp-deployments-disabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_14: "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/ftp-deployments-disabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_88: "Ensure that app services use Azure Files"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/ftp-deployments-disabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_78: "Ensure FTP deployments are disabled"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/ftp-deployments-disabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_18: "Ensure that 'HTTP Version' is the latest if used to run the web app"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/ftp-deployments-disabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_66: "Ensure that App service enables failed request tracing"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/ftp-deployments-disabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_16: "Ensure that Register with Azure Active Directory is enabled on App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/ftp-deployments-disabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_13: "Ensure App Service Authentication is set on Azure App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/ftp-deployments-disabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_71: "Ensure that Managed identity provider is enabled for app services"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/http-logs-enabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_63: "Ensure that App service enables HTTP logging"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/http-logs-enabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_80: "Ensure that 'Net Framework' version is the latest, if used as a part of the web app"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/http-logs-enabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_65: "Ensure that App service enables detailed error messages"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/http-logs-enabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_17: "Ensure the web app has 'Client Certificates (Incoming client certificates)' set"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/http-logs-enabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_14: "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/http-logs-enabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_88: "Ensure that app services use Azure Files"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/http-logs-enabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_78: "Ensure FTP deployments are disabled"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/http-logs-enabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_18: "Ensure that 'HTTP Version' is the latest if used to run the web app"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/http-logs-enabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_66: "Ensure that App service enables failed request tracing"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/http-logs-enabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_16: "Ensure that Register with Azure Active Directory is enabled on App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/http-logs-enabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_13: "Ensure App Service Authentication is set on Azure App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/http-logs-enabled.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_71: "Ensure that Managed identity provider is enabled for app services"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/require-client-cert.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_63: "Ensure that App service enables HTTP logging"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/require-client-cert.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_80: "Ensure that 'Net Framework' version is the latest, if used as a part of the web app"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/require-client-cert.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_65: "Ensure that App service enables detailed error messages"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/require-client-cert.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_17: "Ensure the web app has 'Client Certificates (Incoming client certificates)' set"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/require-client-cert.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_14: "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/require-client-cert.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_88: "Ensure that app services use Azure Files"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/require-client-cert.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_78: "Ensure FTP deployments are disabled"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/require-client-cert.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_18: "Ensure that 'HTTP Version' is the latest if used to run the web app"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/require-client-cert.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_66: "Ensure that App service enables failed request tracing"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/require-client-cert.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_16: "Ensure that Register with Azure Active Directory is enabled on App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/require-client-cert.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_13: "Ensure App Service Authentication is set on Azure App Service"
	FAILED for resource: azurerm_app_service.fail
	File: /terraform/azurerm/appservice/require-client-cert.tf:2-7

		2 | resource "azurerm_app_service" "fail" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 | }


Check: CKV_AZURE_39: "Ensure that no custom subscription owner roles are created"
	FAILED for resource: azurerm_role_definition.example
	File: /terraform/azurerm/authorization/azurerm_role_definition.tf:5-18

		5  | resource "azurerm_role_definition" "example" {
		6  |   name        = "my-custom-role"
		7  |   scope       = data.azurerm_subscription.primary.id
		8  |   description = "This is a custom role created via Terraform"
		9  |
		10 |   permissions {
		11 |     actions     = ["*"]
		12 |     not_actions = []
		13 |   }
		14 |
		15 |   assignable_scopes = [
		16 |     "/"
		17 |   ]
		18 | }


Check: CKV_AZURE_50: "Ensure Virtual Machine Extensions are not Installed"
	FAILED for resource: azurerm_linux_virtual_machine.bad_linux_example
	File: /terraform/azurerm/compute/azurerm_linux_virtual_machine.tf:3-11

		3  | resource "azurerm_linux_virtual_machine" "bad_linux_example" {
		4  |   name                            = "bad-linux-machine"
		5  |   resource_group_name             = azurerm_resource_group.example.name
		6  |   location                        = azurerm_resource_group.example.location
		7  |   size                            = "Standard_F2"
		8  |   admin_username                  = "adminuser"
		9  |   admin_password                  = "somePassword"
		10 |   disable_password_authentication = false
		11 | }


Check: CKV_AZURE_1: "Ensure Azure Instance does not use basic authentication(Use SSH Key Instead)"
	FAILED for resource: azurerm_linux_virtual_machine.bad_linux_example
	File: /terraform/azurerm/compute/azurerm_linux_virtual_machine.tf:3-11

		3  | resource "azurerm_linux_virtual_machine" "bad_linux_example" {
		4  |   name                            = "bad-linux-machine"
		5  |   resource_group_name             = azurerm_resource_group.example.name
		6  |   location                        = azurerm_resource_group.example.location
		7  |   size                            = "Standard_F2"
		8  |   admin_username                  = "adminuser"
		9  |   admin_password                  = "somePassword"
		10 |   disable_password_authentication = false
		11 | }


Check: CKV_AZURE_93: "Ensure that managed disks use a specific set of disk encryption sets for the customer-managed key encryption"
	FAILED for resource: azurerm_managed_disk.fail
	File: /terraform/azurerm/compute/enable-disk-encryption.tf:2-6

		2 | resource "azurerm_managed_disk" "fail" {
		3 |   encryption_settings {
		4 |     enabled = false
		5 |   }
		6 | }


Check: CKV_AZURE_2: "Ensure Azure managed disk has encryption enabled"
	FAILED for resource: azurerm_managed_disk.fail
	File: /terraform/azurerm/compute/enable-disk-encryption.tf:2-6

		2 | resource "azurerm_managed_disk" "fail" {
		3 |   encryption_settings {
		4 |     enabled = false
		5 |   }
		6 | }


Check: CKV_AZURE_1: "Ensure Azure Instance does not use basic authentication(Use SSH Key Instead)"
	FAILED for resource: azurerm_virtual_machine.fail
	File: /terraform/azurerm/compute/ssh-authentication.tf:2-6

		2 | resource "azurerm_virtual_machine" "fail" {
		3 |   os_profile_linux_config {
		4 |     disable_password_authentication = false
		5 |   }
		6 | }


Check: CKV_AZURE_98: "Ensure that Azure Container group is deployed into virtual network"
	FAILED for resource: azurerm_container_group.example
	File: /terraform/azurerm/container/ContainerGroupDeployedIntoVirtualNetwork.tf:2-28

		2  | resource "azurerm_container_group" "example" {
		3  |   name                = "example-continst"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   ip_address_type     = "public"
		7  |   dns_name_label      = "aci-label"
		8  |   os_type             = "Linux"
		9  |
		10 |   container {
		11 |     name   = "hello-world"
		12 |     image  = "microsoft/aci-helloworld:latest"
		13 |     cpu    = "0.5"
		14 |     memory = "1.5"
		15 |
		16 |     ports {
		17 |       port     = 443
		18 |       protocol = "TCP"
		19 |     }
		20 |   }
		21 |
		22 |   container {
		23 |     name   = "sidecar"
		24 |     image  = "microsoft/aci-tutorial-sidecar"
		25 |     cpu    = "0.5"
		26 |     memory = "1.5"
		27 |   }
		28 | }


Check: CKV_AZURE_115: "Ensure that AKS enables private clusters"
	FAILED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/configured-network-policy.tf:3-6

		3 | resource "azurerm_kubernetes_cluster" "fail" {
		4 |   network_profile {
		5 |   }
		6 | }


Check: CKV_AZURE_117: "Ensure that AKS uses disk encryption set"
	FAILED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/configured-network-policy.tf:3-6

		3 | resource "azurerm_kubernetes_cluster" "fail" {
		4 |   network_profile {
		5 |   }
		6 | }


Check: CKV_AZURE_7: "Ensure AKS cluster has Network Policy configured"
	FAILED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/configured-network-policy.tf:3-6

		3 | resource "azurerm_kubernetes_cluster" "fail" {
		4 |   network_profile {
		5 |   }
		6 | }


Check: CKV_AZURE_116: "Ensure that AKS uses Azure Policies Add-on"
	FAILED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/configured-network-policy.tf:3-6

		3 | resource "azurerm_kubernetes_cluster" "fail" {
		4 |   network_profile {
		5 |   }
		6 | }


Check: CKV_AZURE_6: "Ensure AKS has an API Server Authorized IP Ranges enabled"
	FAILED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/configured-network-policy.tf:3-6

		3 | resource "azurerm_kubernetes_cluster" "fail" {
		4 |   network_profile {
		5 |   }
		6 | }


Check: CKV_AZURE_4: "Ensure AKS logging to Azure Monitoring is Configured"
	FAILED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/configured-network-policy.tf:3-6

		3 | resource "azurerm_kubernetes_cluster" "fail" {
		4 |   network_profile {
		5 |   }
		6 | }


Check: CKV_AZURE_5: "Ensure RBAC is enabled on AKS clusters"
	FAILED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/configured-network-policy.tf:3-6

		3 | resource "azurerm_kubernetes_cluster" "fail" {
		4 |   network_profile {
		5 |   }
		6 | }


Check: CKV_AZURE_115: "Ensure that AKS enables private clusters"
	FAILED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/limit-authorized-ips.tf:3-5

		3 | resource "azurerm_kubernetes_cluster" "fail" {
		4 |
		5 | }


Check: CKV_AZURE_117: "Ensure that AKS uses disk encryption set"
	FAILED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/limit-authorized-ips.tf:3-5

		3 | resource "azurerm_kubernetes_cluster" "fail" {
		4 |
		5 | }


Check: CKV_AZURE_7: "Ensure AKS cluster has Network Policy configured"
	FAILED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/limit-authorized-ips.tf:3-5

		3 | resource "azurerm_kubernetes_cluster" "fail" {
		4 |
		5 | }


Check: CKV_AZURE_116: "Ensure that AKS uses Azure Policies Add-on"
	FAILED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/limit-authorized-ips.tf:3-5

		3 | resource "azurerm_kubernetes_cluster" "fail" {
		4 |
		5 | }


Check: CKV_AZURE_6: "Ensure AKS has an API Server Authorized IP Ranges enabled"
	FAILED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/limit-authorized-ips.tf:3-5

		3 | resource "azurerm_kubernetes_cluster" "fail" {
		4 |
		5 | }


Check: CKV_AZURE_4: "Ensure AKS logging to Azure Monitoring is Configured"
	FAILED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/limit-authorized-ips.tf:3-5

		3 | resource "azurerm_kubernetes_cluster" "fail" {
		4 |
		5 | }


Check: CKV_AZURE_5: "Ensure RBAC is enabled on AKS clusters"
	FAILED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/limit-authorized-ips.tf:3-5

		3 | resource "azurerm_kubernetes_cluster" "fail" {
		4 |
		5 | }


Check: CKV_AZURE_115: "Ensure that AKS enables private clusters"
	FAILED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/logging.tf:2-4

		2 | resource "azurerm_kubernetes_cluster" "fail" {
		3 |   addon_profile {}
		4 | }


Check: CKV_AZURE_117: "Ensure that AKS uses disk encryption set"
	FAILED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/logging.tf:2-4

		2 | resource "azurerm_kubernetes_cluster" "fail" {
		3 |   addon_profile {}
		4 | }


Check: CKV_AZURE_7: "Ensure AKS cluster has Network Policy configured"
	FAILED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/logging.tf:2-4

		2 | resource "azurerm_kubernetes_cluster" "fail" {
		3 |   addon_profile {}
		4 | }


Check: CKV_AZURE_116: "Ensure that AKS uses Azure Policies Add-on"
	FAILED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/logging.tf:2-4

		2 | resource "azurerm_kubernetes_cluster" "fail" {
		3 |   addon_profile {}
		4 | }


Check: CKV_AZURE_6: "Ensure AKS has an API Server Authorized IP Ranges enabled"
	FAILED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/logging.tf:2-4

		2 | resource "azurerm_kubernetes_cluster" "fail" {
		3 |   addon_profile {}
		4 | }


Check: CKV_AZURE_4: "Ensure AKS logging to Azure Monitoring is Configured"
	FAILED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/logging.tf:2-4

		2 | resource "azurerm_kubernetes_cluster" "fail" {
		3 |   addon_profile {}
		4 | }


Check: CKV_AZURE_5: "Ensure RBAC is enabled on AKS clusters"
	FAILED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/logging.tf:2-4

		2 | resource "azurerm_kubernetes_cluster" "fail" {
		3 |   addon_profile {}
		4 | }


Check: CKV_AZURE_115: "Ensure that AKS enables private clusters"
	FAILED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/use-rbac-permissions.tf:2-6

		2 | resource "azurerm_kubernetes_cluster" "fail" {
		3 |   role_based_access_control {
		4 |     enabled = false
		5 |   }
		6 | }


Check: CKV_AZURE_117: "Ensure that AKS uses disk encryption set"
	FAILED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/use-rbac-permissions.tf:2-6

		2 | resource "azurerm_kubernetes_cluster" "fail" {
		3 |   role_based_access_control {
		4 |     enabled = false
		5 |   }
		6 | }


Check: CKV_AZURE_7: "Ensure AKS cluster has Network Policy configured"
	FAILED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/use-rbac-permissions.tf:2-6

		2 | resource "azurerm_kubernetes_cluster" "fail" {
		3 |   role_based_access_control {
		4 |     enabled = false
		5 |   }
		6 | }


Check: CKV_AZURE_116: "Ensure that AKS uses Azure Policies Add-on"
	FAILED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/use-rbac-permissions.tf:2-6

		2 | resource "azurerm_kubernetes_cluster" "fail" {
		3 |   role_based_access_control {
		4 |     enabled = false
		5 |   }
		6 | }


Check: CKV_AZURE_6: "Ensure AKS has an API Server Authorized IP Ranges enabled"
	FAILED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/use-rbac-permissions.tf:2-6

		2 | resource "azurerm_kubernetes_cluster" "fail" {
		3 |   role_based_access_control {
		4 |     enabled = false
		5 |   }
		6 | }


Check: CKV_AZURE_4: "Ensure AKS logging to Azure Monitoring is Configured"
	FAILED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/use-rbac-permissions.tf:2-6

		2 | resource "azurerm_kubernetes_cluster" "fail" {
		3 |   role_based_access_control {
		4 |     enabled = false
		5 |   }
		6 | }


Check: CKV_AZURE_5: "Ensure RBAC is enabled on AKS clusters"
	FAILED for resource: azurerm_kubernetes_cluster.fail
	File: /terraform/azurerm/container/use-rbac-permissions.tf:2-6

		2 | resource "azurerm_kubernetes_cluster" "fail" {
		3 |   role_based_access_control {
		4 |     enabled = false
		5 |   }
		6 | }


Check: CKV_AZURE_99: "Ensure Cosmos DB accounts have restricted access"
	FAILED for resource: azurerm_cosmosdb_account.db
	File: /terraform/azurerm/cosmosdb/CosmosDBAccountsRestrictedAccess.tf:2-39

		2  | resource "azurerm_cosmosdb_account" "db" {
		3  |   name                              = "tfex-cosmos-db-${random_integer.ri.result}"
		4  |   location                          = azurerm_resource_group.rg.location
		5  |   resource_group_name               = azurerm_resource_group.rg.name
		6  |   offer_type                        = "Standard"
		7  |   kind                              = "GlobalDocumentDB"
		8  |   is_virtual_network_filter_enabled = true
		9  |
		10 |   enable_automatic_failover = true
		11 |
		12 |   capabilities {
		13 |     name = "EnableAggregationPipeline"
		14 |   }
		15 |
		16 |   capabilities {
		17 |     name = "mongoEnableDocLevelTTL"
		18 |   }
		19 |
		20 |   capabilities {
		21 |     name = "MongoDBv3.4"
		22 |   }
		23 |
		24 |   consistency_policy {
		25 |     consistency_level       = "BoundedStaleness"
		26 |     max_interval_in_seconds = 10
		27 |     max_staleness_prefix    = 200
		28 |   }
		29 |
		30 |   geo_location {
		31 |     location          = var.failover_location
		32 |     failover_priority = 1
		33 |   }
		34 |
		35 |   geo_location {
		36 |     location          = azurerm_resource_group.rg.location
		37 |     failover_priority = 0
		38 |   }
		39 | }


Check: CKV_AZURE_101: "Ensure that Azure Cosmos DB disables public network access"
	FAILED for resource: azurerm_cosmosdb_account.db
	File: /terraform/azurerm/cosmosdb/CosmosDBAccountsRestrictedAccess.tf:2-39

		2  | resource "azurerm_cosmosdb_account" "db" {
		3  |   name                              = "tfex-cosmos-db-${random_integer.ri.result}"
		4  |   location                          = azurerm_resource_group.rg.location
		5  |   resource_group_name               = azurerm_resource_group.rg.name
		6  |   offer_type                        = "Standard"
		7  |   kind                              = "GlobalDocumentDB"
		8  |   is_virtual_network_filter_enabled = true
		9  |
		10 |   enable_automatic_failover = true
		11 |
		12 |   capabilities {
		13 |     name = "EnableAggregationPipeline"
		14 |   }
		15 |
		16 |   capabilities {
		17 |     name = "mongoEnableDocLevelTTL"
		18 |   }
		19 |
		20 |   capabilities {
		21 |     name = "MongoDBv3.4"
		22 |   }
		23 |
		24 |   consistency_policy {
		25 |     consistency_level       = "BoundedStaleness"
		26 |     max_interval_in_seconds = 10
		27 |     max_staleness_prefix    = 200
		28 |   }
		29 |
		30 |   geo_location {
		31 |     location          = var.failover_location
		32 |     failover_priority = 1
		33 |   }
		34 |
		35 |   geo_location {
		36 |     location          = azurerm_resource_group.rg.location
		37 |     failover_priority = 0
		38 |   }
		39 | }


Check: CKV_AZURE_132: "Ensure cosmosdb does not allow privileged escalation by restricting management plane changes"
	FAILED for resource: azurerm_cosmosdb_account.db
	File: /terraform/azurerm/cosmosdb/CosmosDBAccountsRestrictedAccess.tf:2-39

		2  | resource "azurerm_cosmosdb_account" "db" {
		3  |   name                              = "tfex-cosmos-db-${random_integer.ri.result}"
		4  |   location                          = azurerm_resource_group.rg.location
		5  |   resource_group_name               = azurerm_resource_group.rg.name
		6  |   offer_type                        = "Standard"
		7  |   kind                              = "GlobalDocumentDB"
		8  |   is_virtual_network_filter_enabled = true
		9  |
		10 |   enable_automatic_failover = true
		11 |
		12 |   capabilities {
		13 |     name = "EnableAggregationPipeline"
		14 |   }
		15 |
		16 |   capabilities {
		17 |     name = "mongoEnableDocLevelTTL"
		18 |   }
		19 |
		20 |   capabilities {
		21 |     name = "MongoDBv3.4"
		22 |   }
		23 |
		24 |   consistency_policy {
		25 |     consistency_level       = "BoundedStaleness"
		26 |     max_interval_in_seconds = 10
		27 |     max_staleness_prefix    = 200
		28 |   }
		29 |
		30 |   geo_location {
		31 |     location          = var.failover_location
		32 |     failover_priority = 1
		33 |   }
		34 |
		35 |   geo_location {
		36 |     location          = azurerm_resource_group.rg.location
		37 |     failover_priority = 0
		38 |   }
		39 | }


Check: CKV_AZURE_100: "Ensure that Cosmos DB accounts have customer-managed keys to encrypt data at rest"
	FAILED for resource: azurerm_cosmosdb_account.db
	File: /terraform/azurerm/cosmosdb/CosmosDBAccountsRestrictedAccess.tf:2-39

		2  | resource "azurerm_cosmosdb_account" "db" {
		3  |   name                              = "tfex-cosmos-db-${random_integer.ri.result}"
		4  |   location                          = azurerm_resource_group.rg.location
		5  |   resource_group_name               = azurerm_resource_group.rg.name
		6  |   offer_type                        = "Standard"
		7  |   kind                              = "GlobalDocumentDB"
		8  |   is_virtual_network_filter_enabled = true
		9  |
		10 |   enable_automatic_failover = true
		11 |
		12 |   capabilities {
		13 |     name = "EnableAggregationPipeline"
		14 |   }
		15 |
		16 |   capabilities {
		17 |     name = "mongoEnableDocLevelTTL"
		18 |   }
		19 |
		20 |   capabilities {
		21 |     name = "MongoDBv3.4"
		22 |   }
		23 |
		24 |   consistency_policy {
		25 |     consistency_level       = "BoundedStaleness"
		26 |     max_interval_in_seconds = 10
		27 |     max_staleness_prefix    = 200
		28 |   }
		29 |
		30 |   geo_location {
		31 |     location          = var.failover_location
		32 |     failover_priority = 1
		33 |   }
		34 |
		35 |   geo_location {
		36 |     location          = azurerm_resource_group.rg.location
		37 |     failover_priority = 0
		38 |   }
		39 | }


Check: CKV_AZURE_99: "Ensure Cosmos DB accounts have restricted access"
	FAILED for resource: azurerm_cosmosdb_account.db
	File: /terraform/azurerm/cosmosdb/CosmosDBDisableAccessKeyWrite.tf:2-5

		2 | resource "azurerm_cosmosdb_account" "db" {
		3 |   name     = "tfex-cosmos-db-${random_integer.ri.result}"
		4 |   location = azurerm_resource_group.rg.location
		5 | }


Check: CKV_AZURE_101: "Ensure that Azure Cosmos DB disables public network access"
	FAILED for resource: azurerm_cosmosdb_account.db
	File: /terraform/azurerm/cosmosdb/CosmosDBDisableAccessKeyWrite.tf:2-5

		2 | resource "azurerm_cosmosdb_account" "db" {
		3 |   name     = "tfex-cosmos-db-${random_integer.ri.result}"
		4 |   location = azurerm_resource_group.rg.location
		5 | }


Check: CKV_AZURE_132: "Ensure cosmosdb does not allow privileged escalation by restricting management plane changes"
	FAILED for resource: azurerm_cosmosdb_account.db
	File: /terraform/azurerm/cosmosdb/CosmosDBDisableAccessKeyWrite.tf:2-5

		2 | resource "azurerm_cosmosdb_account" "db" {
		3 |   name     = "tfex-cosmos-db-${random_integer.ri.result}"
		4 |   location = azurerm_resource_group.rg.location
		5 | }


Check: CKV_AZURE_100: "Ensure that Cosmos DB accounts have customer-managed keys to encrypt data at rest"
	FAILED for resource: azurerm_cosmosdb_account.db
	File: /terraform/azurerm/cosmosdb/CosmosDBDisableAccessKeyWrite.tf:2-5

		2 | resource "azurerm_cosmosdb_account" "db" {
		3 |   name     = "tfex-cosmos-db-${random_integer.ri.result}"
		4 |   location = azurerm_resource_group.rg.location
		5 | }


Check: CKV_AZURE_99: "Ensure Cosmos DB accounts have restricted access"
	FAILED for resource: azurerm_cosmosdb_account.db
	File: /terraform/azurerm/cosmosdb/CosmosDBDisablesPublicNetwork.tf:2-38

		2  | resource "azurerm_cosmosdb_account" "db" {
		3  |   name                = "tfex-cosmos-db-${random_integer.ri.result}"
		4  |   location            = azurerm_resource_group.rg.location
		5  |   resource_group_name = azurerm_resource_group.rg.name
		6  |   offer_type          = "Standard"
		7  |   kind                = "GlobalDocumentDB"
		8  |
		9  |   enable_automatic_failover = true
		10 |
		11 |   capabilities {
		12 |     name = "EnableAggregationPipeline"
		13 |   }
		14 |
		15 |   capabilities {
		16 |     name = "mongoEnableDocLevelTTL"
		17 |   }
		18 |
		19 |   capabilities {
		20 |     name = "MongoDBv3.4"
		21 |   }
		22 |
		23 |   consistency_policy {
		24 |     consistency_level       = "BoundedStaleness"
		25 |     max_interval_in_seconds = 10
		26 |     max_staleness_prefix    = 200
		27 |   }
		28 |
		29 |   geo_location {
		30 |     location          = var.failover_location
		31 |     failover_priority = 1
		32 |   }
		33 |
		34 |   geo_location {
		35 |     location          = azurerm_resource_group.rg.location
		36 |     failover_priority = 0
		37 |   }
		38 | }


Check: CKV_AZURE_101: "Ensure that Azure Cosmos DB disables public network access"
	FAILED for resource: azurerm_cosmosdb_account.db
	File: /terraform/azurerm/cosmosdb/CosmosDBDisablesPublicNetwork.tf:2-38

		2  | resource "azurerm_cosmosdb_account" "db" {
		3  |   name                = "tfex-cosmos-db-${random_integer.ri.result}"
		4  |   location            = azurerm_resource_group.rg.location
		5  |   resource_group_name = azurerm_resource_group.rg.name
		6  |   offer_type          = "Standard"
		7  |   kind                = "GlobalDocumentDB"
		8  |
		9  |   enable_automatic_failover = true
		10 |
		11 |   capabilities {
		12 |     name = "EnableAggregationPipeline"
		13 |   }
		14 |
		15 |   capabilities {
		16 |     name = "mongoEnableDocLevelTTL"
		17 |   }
		18 |
		19 |   capabilities {
		20 |     name = "MongoDBv3.4"
		21 |   }
		22 |
		23 |   consistency_policy {
		24 |     consistency_level       = "BoundedStaleness"
		25 |     max_interval_in_seconds = 10
		26 |     max_staleness_prefix    = 200
		27 |   }
		28 |
		29 |   geo_location {
		30 |     location          = var.failover_location
		31 |     failover_priority = 1
		32 |   }
		33 |
		34 |   geo_location {
		35 |     location          = azurerm_resource_group.rg.location
		36 |     failover_priority = 0
		37 |   }
		38 | }


Check: CKV_AZURE_132: "Ensure cosmosdb does not allow privileged escalation by restricting management plane changes"
	FAILED for resource: azurerm_cosmosdb_account.db
	File: /terraform/azurerm/cosmosdb/CosmosDBDisablesPublicNetwork.tf:2-38

		2  | resource "azurerm_cosmosdb_account" "db" {
		3  |   name                = "tfex-cosmos-db-${random_integer.ri.result}"
		4  |   location            = azurerm_resource_group.rg.location
		5  |   resource_group_name = azurerm_resource_group.rg.name
		6  |   offer_type          = "Standard"
		7  |   kind                = "GlobalDocumentDB"
		8  |
		9  |   enable_automatic_failover = true
		10 |
		11 |   capabilities {
		12 |     name = "EnableAggregationPipeline"
		13 |   }
		14 |
		15 |   capabilities {
		16 |     name = "mongoEnableDocLevelTTL"
		17 |   }
		18 |
		19 |   capabilities {
		20 |     name = "MongoDBv3.4"
		21 |   }
		22 |
		23 |   consistency_policy {
		24 |     consistency_level       = "BoundedStaleness"
		25 |     max_interval_in_seconds = 10
		26 |     max_staleness_prefix    = 200
		27 |   }
		28 |
		29 |   geo_location {
		30 |     location          = var.failover_location
		31 |     failover_priority = 1
		32 |   }
		33 |
		34 |   geo_location {
		35 |     location          = azurerm_resource_group.rg.location
		36 |     failover_priority = 0
		37 |   }
		38 | }


Check: CKV_AZURE_100: "Ensure that Cosmos DB accounts have customer-managed keys to encrypt data at rest"
	FAILED for resource: azurerm_cosmosdb_account.db
	File: /terraform/azurerm/cosmosdb/CosmosDBDisablesPublicNetwork.tf:2-38

		2  | resource "azurerm_cosmosdb_account" "db" {
		3  |   name                = "tfex-cosmos-db-${random_integer.ri.result}"
		4  |   location            = azurerm_resource_group.rg.location
		5  |   resource_group_name = azurerm_resource_group.rg.name
		6  |   offer_type          = "Standard"
		7  |   kind                = "GlobalDocumentDB"
		8  |
		9  |   enable_automatic_failover = true
		10 |
		11 |   capabilities {
		12 |     name = "EnableAggregationPipeline"
		13 |   }
		14 |
		15 |   capabilities {
		16 |     name = "mongoEnableDocLevelTTL"
		17 |   }
		18 |
		19 |   capabilities {
		20 |     name = "MongoDBv3.4"
		21 |   }
		22 |
		23 |   consistency_policy {
		24 |     consistency_level       = "BoundedStaleness"
		25 |     max_interval_in_seconds = 10
		26 |     max_staleness_prefix    = 200
		27 |   }
		28 |
		29 |   geo_location {
		30 |     location          = var.failover_location
		31 |     failover_priority = 1
		32 |   }
		33 |
		34 |   geo_location {
		35 |     location          = azurerm_resource_group.rg.location
		36 |     failover_priority = 0
		37 |   }
		38 | }


Check: CKV_AZURE_99: "Ensure Cosmos DB accounts have restricted access"
	FAILED for resource: azurerm_cosmosdb_account.db
	File: /terraform/azurerm/cosmosdb/CosmosDBHaveCMK.tf:2-38

		2  | resource "azurerm_cosmosdb_account" "db" {
		3  |   name                = "tfex-cosmos-db-${random_integer.ri.result}"
		4  |   location            = azurerm_resource_group.rg.location
		5  |   resource_group_name = azurerm_resource_group.rg.name
		6  |   offer_type          = "Standard"
		7  |   kind                = "GlobalDocumentDB"
		8  |
		9  |   enable_automatic_failover = true
		10 |
		11 |   capabilities {
		12 |     name = "EnableAggregationPipeline"
		13 |   }
		14 |
		15 |   capabilities {
		16 |     name = "mongoEnableDocLevelTTL"
		17 |   }
		18 |
		19 |   capabilities {
		20 |     name = "MongoDBv3.4"
		21 |   }
		22 |
		23 |   consistency_policy {
		24 |     consistency_level       = "BoundedStaleness"
		25 |     max_interval_in_seconds = 10
		26 |     max_staleness_prefix    = 200
		27 |   }
		28 |
		29 |   geo_location {
		30 |     location          = var.failover_location
		31 |     failover_priority = 1
		32 |   }
		33 |
		34 |   geo_location {
		35 |     location          = azurerm_resource_group.rg.location
		36 |     failover_priority = 0
		37 |   }
		38 | }


Check: CKV_AZURE_101: "Ensure that Azure Cosmos DB disables public network access"
	FAILED for resource: azurerm_cosmosdb_account.db
	File: /terraform/azurerm/cosmosdb/CosmosDBHaveCMK.tf:2-38

		2  | resource "azurerm_cosmosdb_account" "db" {
		3  |   name                = "tfex-cosmos-db-${random_integer.ri.result}"
		4  |   location            = azurerm_resource_group.rg.location
		5  |   resource_group_name = azurerm_resource_group.rg.name
		6  |   offer_type          = "Standard"
		7  |   kind                = "GlobalDocumentDB"
		8  |
		9  |   enable_automatic_failover = true
		10 |
		11 |   capabilities {
		12 |     name = "EnableAggregationPipeline"
		13 |   }
		14 |
		15 |   capabilities {
		16 |     name = "mongoEnableDocLevelTTL"
		17 |   }
		18 |
		19 |   capabilities {
		20 |     name = "MongoDBv3.4"
		21 |   }
		22 |
		23 |   consistency_policy {
		24 |     consistency_level       = "BoundedStaleness"
		25 |     max_interval_in_seconds = 10
		26 |     max_staleness_prefix    = 200
		27 |   }
		28 |
		29 |   geo_location {
		30 |     location          = var.failover_location
		31 |     failover_priority = 1
		32 |   }
		33 |
		34 |   geo_location {
		35 |     location          = azurerm_resource_group.rg.location
		36 |     failover_priority = 0
		37 |   }
		38 | }


Check: CKV_AZURE_132: "Ensure cosmosdb does not allow privileged escalation by restricting management plane changes"
	FAILED for resource: azurerm_cosmosdb_account.db
	File: /terraform/azurerm/cosmosdb/CosmosDBHaveCMK.tf:2-38

		2  | resource "azurerm_cosmosdb_account" "db" {
		3  |   name                = "tfex-cosmos-db-${random_integer.ri.result}"
		4  |   location            = azurerm_resource_group.rg.location
		5  |   resource_group_name = azurerm_resource_group.rg.name
		6  |   offer_type          = "Standard"
		7  |   kind                = "GlobalDocumentDB"
		8  |
		9  |   enable_automatic_failover = true
		10 |
		11 |   capabilities {
		12 |     name = "EnableAggregationPipeline"
		13 |   }
		14 |
		15 |   capabilities {
		16 |     name = "mongoEnableDocLevelTTL"
		17 |   }
		18 |
		19 |   capabilities {
		20 |     name = "MongoDBv3.4"
		21 |   }
		22 |
		23 |   consistency_policy {
		24 |     consistency_level       = "BoundedStaleness"
		25 |     max_interval_in_seconds = 10
		26 |     max_staleness_prefix    = 200
		27 |   }
		28 |
		29 |   geo_location {
		30 |     location          = var.failover_location
		31 |     failover_priority = 1
		32 |   }
		33 |
		34 |   geo_location {
		35 |     location          = azurerm_resource_group.rg.location
		36 |     failover_priority = 0
		37 |   }
		38 | }


Check: CKV_AZURE_100: "Ensure that Cosmos DB accounts have customer-managed keys to encrypt data at rest"
	FAILED for resource: azurerm_cosmosdb_account.db
	File: /terraform/azurerm/cosmosdb/CosmosDBHaveCMK.tf:2-38

		2  | resource "azurerm_cosmosdb_account" "db" {
		3  |   name                = "tfex-cosmos-db-${random_integer.ri.result}"
		4  |   location            = azurerm_resource_group.rg.location
		5  |   resource_group_name = azurerm_resource_group.rg.name
		6  |   offer_type          = "Standard"
		7  |   kind                = "GlobalDocumentDB"
		8  |
		9  |   enable_automatic_failover = true
		10 |
		11 |   capabilities {
		12 |     name = "EnableAggregationPipeline"
		13 |   }
		14 |
		15 |   capabilities {
		16 |     name = "mongoEnableDocLevelTTL"
		17 |   }
		18 |
		19 |   capabilities {
		20 |     name = "MongoDBv3.4"
		21 |   }
		22 |
		23 |   consistency_policy {
		24 |     consistency_level       = "BoundedStaleness"
		25 |     max_interval_in_seconds = 10
		26 |     max_staleness_prefix    = 200
		27 |   }
		28 |
		29 |   geo_location {
		30 |     location          = var.failover_location
		31 |     failover_priority = 1
		32 |   }
		33 |
		34 |   geo_location {
		35 |     location          = azurerm_resource_group.rg.location
		36 |     failover_priority = 0
		37 |   }
		38 | }


Check: CKV_AZURE_24: "Ensure that 'Auditing' Retention is 'greater than 90 days' for SQL servers"
	FAILED for resource: azurerm_sql_server.fail
	File: /terraform/azurerm/database/enable-audit.tf:3-10

		3  | resource "azurerm_sql_server" "fail" {
		4  |   name                         = "mssqlserver"
		5  |   resource_group_name          = azurerm_resource_group.example.name
		6  |   location                     = azurerm_resource_group.example.location
		7  |   version                      = "12.0"
		8  |   administrator_login          = "mradministrator"
		9  |   administrator_login_password = "tfsecRocks"
		10 | }


Check: CKV_AZURE_128: "Ensure that PostgreSQL server enables Threat detection policy"
	FAILED for resource: azurerm_postgresql_server.fail
	File: /terraform/azurerm/database/enable-ssl-enforcement.tf:2-8

		2 | resource "azurerm_postgresql_server" "fail" {
		3 |   name = "fail"
		4 |
		5 |   public_network_access_enabled    = false
		6 |   ssl_enforcement_enabled          = false
		7 |   ssl_minimal_tls_version_enforced = "TLS1_2"
		8 | }


Check: CKV_AZURE_130: "Ensure that PostgreSQL server enables infrastructure encryption"
	FAILED for resource: azurerm_postgresql_server.fail
	File: /terraform/azurerm/database/enable-ssl-enforcement.tf:2-8

		2 | resource "azurerm_postgresql_server" "fail" {
		3 |   name = "fail"
		4 |
		5 |   public_network_access_enabled    = false
		6 |   ssl_enforcement_enabled          = false
		7 |   ssl_minimal_tls_version_enforced = "TLS1_2"
		8 | }


Check: CKV_AZURE_29: "Ensure 'Enforce SSL connection' is set to 'ENABLED' for PostgreSQL Database Server"
	FAILED for resource: azurerm_postgresql_server.fail
	File: /terraform/azurerm/database/enable-ssl-enforcement.tf:2-8

		2 | resource "azurerm_postgresql_server" "fail" {
		3 |   name = "fail"
		4 |
		5 |   public_network_access_enabled    = false
		6 |   ssl_enforcement_enabled          = false
		7 |   ssl_minimal_tls_version_enforced = "TLS1_2"
		8 | }


Check: CKV_AZURE_102: "Ensure that PostgreSQL server enables geo-redundant backups"
	FAILED for resource: azurerm_postgresql_server.fail
	File: /terraform/azurerm/database/enable-ssl-enforcement.tf:2-8

		2 | resource "azurerm_postgresql_server" "fail" {
		3 |   name = "fail"
		4 |
		5 |   public_network_access_enabled    = false
		6 |   ssl_enforcement_enabled          = false
		7 |   ssl_minimal_tls_version_enforced = "TLS1_2"
		8 | }


Check: CKV_AZURE_96: "Ensure that MySQL server enables infrastructure encryption"
	FAILED for resource: azurerm_mysql_server.fail
	File: /terraform/azurerm/database/mysql-threat-detection-enabled.tf:3-13

		3  | resource "azurerm_mysql_server" "fail" {
		4  |   name = "fail"
		5  |
		6  |   public_network_access_enabled    = true
		7  |   ssl_enforcement_enabled          = false
		8  |   ssl_minimal_tls_version_enforced = "TLS1_2"
		9  |
		10 |   threat_detection_policy {
		11 |     enabled = false
		12 |   }
		13 | }


Check: CKV_AZURE_127: "Ensure that My SQL server enables Threat detection policy"
	FAILED for resource: azurerm_mysql_server.fail
	File: /terraform/azurerm/database/mysql-threat-detection-enabled.tf:3-13

		3  | resource "azurerm_mysql_server" "fail" {
		4  |   name = "fail"
		5  |
		6  |   public_network_access_enabled    = true
		7  |   ssl_enforcement_enabled          = false
		8  |   ssl_minimal_tls_version_enforced = "TLS1_2"
		9  |
		10 |   threat_detection_policy {
		11 |     enabled = false
		12 |   }
		13 | }


Check: CKV_AZURE_28: "Ensure 'Enforce SSL connection' is set to 'ENABLED' for MySQL Database Server"
	FAILED for resource: azurerm_mysql_server.fail
	File: /terraform/azurerm/database/mysql-threat-detection-enabled.tf:3-13

		3  | resource "azurerm_mysql_server" "fail" {
		4  |   name = "fail"
		5  |
		6  |   public_network_access_enabled    = true
		7  |   ssl_enforcement_enabled          = false
		8  |   ssl_minimal_tls_version_enforced = "TLS1_2"
		9  |
		10 |   threat_detection_policy {
		11 |     enabled = false
		12 |   }
		13 | }


Check: CKV_AZURE_94: "Ensure that My SQL server enables geo-redundant backups"
	FAILED for resource: azurerm_mysql_server.fail
	File: /terraform/azurerm/database/mysql-threat-detection-enabled.tf:3-13

		3  | resource "azurerm_mysql_server" "fail" {
		4  |   name = "fail"
		5  |
		6  |   public_network_access_enabled    = true
		7  |   ssl_enforcement_enabled          = false
		8  |   ssl_minimal_tls_version_enforced = "TLS1_2"
		9  |
		10 |   threat_detection_policy {
		11 |     enabled = false
		12 |   }
		13 | }


Check: CKV_AZURE_53: "Ensure 'public network access enabled' is set to 'False' for mySQL servers"
	FAILED for resource: azurerm_mysql_server.fail
	File: /terraform/azurerm/database/mysql-threat-detection-enabled.tf:3-13

		3  | resource "azurerm_mysql_server" "fail" {
		4  |   name = "fail"
		5  |
		6  |   public_network_access_enabled    = true
		7  |   ssl_enforcement_enabled          = false
		8  |   ssl_minimal_tls_version_enforced = "TLS1_2"
		9  |
		10 |   threat_detection_policy {
		11 |     enabled = false
		12 |   }
		13 | }


Check: CKV_AZURE_68: "Ensure that PostgreSQL server disables public network access"
	FAILED for resource: azurerm_postgresql_server.fail
	File: /terraform/azurerm/database/no-public-access.tf:3-9

		3 | resource "azurerm_postgresql_server" "fail" {
		4 |   name = "fail"
		5 |
		6 |   public_network_access_enabled    = true
		7 |   ssl_enforcement_enabled          = false
		8 |   ssl_minimal_tls_version_enforced = "TLS1_2"
		9 | }


Check: CKV_AZURE_128: "Ensure that PostgreSQL server enables Threat detection policy"
	FAILED for resource: azurerm_postgresql_server.fail
	File: /terraform/azurerm/database/no-public-access.tf:3-9

		3 | resource "azurerm_postgresql_server" "fail" {
		4 |   name = "fail"
		5 |
		6 |   public_network_access_enabled    = true
		7 |   ssl_enforcement_enabled          = false
		8 |   ssl_minimal_tls_version_enforced = "TLS1_2"
		9 | }


Check: CKV_AZURE_130: "Ensure that PostgreSQL server enables infrastructure encryption"
	FAILED for resource: azurerm_postgresql_server.fail
	File: /terraform/azurerm/database/no-public-access.tf:3-9

		3 | resource "azurerm_postgresql_server" "fail" {
		4 |   name = "fail"
		5 |
		6 |   public_network_access_enabled    = true
		7 |   ssl_enforcement_enabled          = false
		8 |   ssl_minimal_tls_version_enforced = "TLS1_2"
		9 | }


Check: CKV_AZURE_29: "Ensure 'Enforce SSL connection' is set to 'ENABLED' for PostgreSQL Database Server"
	FAILED for resource: azurerm_postgresql_server.fail
	File: /terraform/azurerm/database/no-public-access.tf:3-9

		3 | resource "azurerm_postgresql_server" "fail" {
		4 |   name = "fail"
		5 |
		6 |   public_network_access_enabled    = true
		7 |   ssl_enforcement_enabled          = false
		8 |   ssl_minimal_tls_version_enforced = "TLS1_2"
		9 | }


Check: CKV_AZURE_102: "Ensure that PostgreSQL server enables geo-redundant backups"
	FAILED for resource: azurerm_postgresql_server.fail
	File: /terraform/azurerm/database/no-public-access.tf:3-9

		3 | resource "azurerm_postgresql_server" "fail" {
		4 |   name = "fail"
		5 |
		6 |   public_network_access_enabled    = true
		7 |   ssl_enforcement_enabled          = false
		8 |   ssl_minimal_tls_version_enforced = "TLS1_2"
		9 | }


Check: CKV_AZURE_11: "Ensure no SQL Databases allow ingress from 0.0.0.0/0 (ANY IP)"
	FAILED for resource: azurerm_sql_firewall_rule.fail
	File: /terraform/azurerm/database/no-public-firewall-access.tf:3-9

		3 | resource "azurerm_sql_firewall_rule" "fail" {
		4 |   name                = "bad_rule"
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   server_name         = azurerm_sql_server.example.name
		7 |   start_ip_address    = "0.0.0.0"
		8 |   end_ip_address      = "255.255.255.255"
		9 | }


Check: CKV_AZURE_11: "Ensure no SQL Databases allow ingress from 0.0.0.0/0 (ANY IP)"
	FAILED for resource: azurerm_postgresql_firewall_rule.fail
	File: /terraform/azurerm/database/no-public-firewall-access.tf:11-17

		11 | resource "azurerm_postgresql_firewall_rule" "fail" {
		12 |   name                = "fail"
		13 |   resource_group_name = azurerm_resource_group.example.name
		14 |   server_name         = azurerm_postgresql_server.example.name
		15 |   start_ip_address    = "0.0.0.0"
		16 |   end_ip_address      = "255.255.255.255"
		17 | }


Check: CKV_AZURE_68: "Ensure that PostgreSQL server disables public network access"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/database/postgres-configuration-log-checkpoints.tf:7-18

		7  | resource "azurerm_postgresql_server" "example" {
		8  |   name                = "example-psqlserver"
		9  |   location            = azurerm_resource_group.example.location
		10 |   resource_group_name = azurerm_resource_group.example.name
		11 |
		12 |   administrator_login          = "psqladminun"
		13 |   administrator_login_password = "H@Sh1CoR3!"
		14 |
		15 |   sku_name   = "GP_Gen5_4"
		16 |   version    = "9.6"
		17 |   storage_mb = 640000
		18 | }


Check: CKV_AZURE_128: "Ensure that PostgreSQL server enables Threat detection policy"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/database/postgres-configuration-log-checkpoints.tf:7-18

		7  | resource "azurerm_postgresql_server" "example" {
		8  |   name                = "example-psqlserver"
		9  |   location            = azurerm_resource_group.example.location
		10 |   resource_group_name = azurerm_resource_group.example.name
		11 |
		12 |   administrator_login          = "psqladminun"
		13 |   administrator_login_password = "H@Sh1CoR3!"
		14 |
		15 |   sku_name   = "GP_Gen5_4"
		16 |   version    = "9.6"
		17 |   storage_mb = 640000
		18 | }


Check: CKV_AZURE_130: "Ensure that PostgreSQL server enables infrastructure encryption"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/database/postgres-configuration-log-checkpoints.tf:7-18

		7  | resource "azurerm_postgresql_server" "example" {
		8  |   name                = "example-psqlserver"
		9  |   location            = azurerm_resource_group.example.location
		10 |   resource_group_name = azurerm_resource_group.example.name
		11 |
		12 |   administrator_login          = "psqladminun"
		13 |   administrator_login_password = "H@Sh1CoR3!"
		14 |
		15 |   sku_name   = "GP_Gen5_4"
		16 |   version    = "9.6"
		17 |   storage_mb = 640000
		18 | }


Check: CKV_AZURE_29: "Ensure 'Enforce SSL connection' is set to 'ENABLED' for PostgreSQL Database Server"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/database/postgres-configuration-log-checkpoints.tf:7-18

		7  | resource "azurerm_postgresql_server" "example" {
		8  |   name                = "example-psqlserver"
		9  |   location            = azurerm_resource_group.example.location
		10 |   resource_group_name = azurerm_resource_group.example.name
		11 |
		12 |   administrator_login          = "psqladminun"
		13 |   administrator_login_password = "H@Sh1CoR3!"
		14 |
		15 |   sku_name   = "GP_Gen5_4"
		16 |   version    = "9.6"
		17 |   storage_mb = 640000
		18 | }


Check: CKV_AZURE_102: "Ensure that PostgreSQL server enables geo-redundant backups"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/database/postgres-configuration-log-checkpoints.tf:7-18

		7  | resource "azurerm_postgresql_server" "example" {
		8  |   name                = "example-psqlserver"
		9  |   location            = azurerm_resource_group.example.location
		10 |   resource_group_name = azurerm_resource_group.example.name
		11 |
		12 |   administrator_login          = "psqladminun"
		13 |   administrator_login_password = "H@Sh1CoR3!"
		14 |
		15 |   sku_name   = "GP_Gen5_4"
		16 |   version    = "9.6"
		17 |   storage_mb = 640000
		18 | }


Check: CKV_AZURE_68: "Ensure that PostgreSQL server disables public network access"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/database/postgres-configuration-log-connection-throttling.tf:8-19

		8  | resource "azurerm_postgresql_server" "example" {
		9  |   name                = "example-psqlserver"
		10 |   location            = azurerm_resource_group.example.location
		11 |   resource_group_name = azurerm_resource_group.example.name
		12 |
		13 |   administrator_login          = "psqladminun"
		14 |   administrator_login_password = "H@Sh1CoR3!"
		15 |
		16 |   sku_name   = "GP_Gen5_4"
		17 |   version    = "9.6"
		18 |   storage_mb = 640000
		19 | }


Check: CKV_AZURE_128: "Ensure that PostgreSQL server enables Threat detection policy"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/database/postgres-configuration-log-connection-throttling.tf:8-19

		8  | resource "azurerm_postgresql_server" "example" {
		9  |   name                = "example-psqlserver"
		10 |   location            = azurerm_resource_group.example.location
		11 |   resource_group_name = azurerm_resource_group.example.name
		12 |
		13 |   administrator_login          = "psqladminun"
		14 |   administrator_login_password = "H@Sh1CoR3!"
		15 |
		16 |   sku_name   = "GP_Gen5_4"
		17 |   version    = "9.6"
		18 |   storage_mb = 640000
		19 | }


Check: CKV_AZURE_130: "Ensure that PostgreSQL server enables infrastructure encryption"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/database/postgres-configuration-log-connection-throttling.tf:8-19

		8  | resource "azurerm_postgresql_server" "example" {
		9  |   name                = "example-psqlserver"
		10 |   location            = azurerm_resource_group.example.location
		11 |   resource_group_name = azurerm_resource_group.example.name
		12 |
		13 |   administrator_login          = "psqladminun"
		14 |   administrator_login_password = "H@Sh1CoR3!"
		15 |
		16 |   sku_name   = "GP_Gen5_4"
		17 |   version    = "9.6"
		18 |   storage_mb = 640000
		19 | }


Check: CKV_AZURE_29: "Ensure 'Enforce SSL connection' is set to 'ENABLED' for PostgreSQL Database Server"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/database/postgres-configuration-log-connection-throttling.tf:8-19

		8  | resource "azurerm_postgresql_server" "example" {
		9  |   name                = "example-psqlserver"
		10 |   location            = azurerm_resource_group.example.location
		11 |   resource_group_name = azurerm_resource_group.example.name
		12 |
		13 |   administrator_login          = "psqladminun"
		14 |   administrator_login_password = "H@Sh1CoR3!"
		15 |
		16 |   sku_name   = "GP_Gen5_4"
		17 |   version    = "9.6"
		18 |   storage_mb = 640000
		19 | }


Check: CKV_AZURE_102: "Ensure that PostgreSQL server enables geo-redundant backups"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/database/postgres-configuration-log-connection-throttling.tf:8-19

		8  | resource "azurerm_postgresql_server" "example" {
		9  |   name                = "example-psqlserver"
		10 |   location            = azurerm_resource_group.example.location
		11 |   resource_group_name = azurerm_resource_group.example.name
		12 |
		13 |   administrator_login          = "psqladminun"
		14 |   administrator_login_password = "H@Sh1CoR3!"
		15 |
		16 |   sku_name   = "GP_Gen5_4"
		17 |   version    = "9.6"
		18 |   storage_mb = 640000
		19 | }


Check: CKV_AZURE_68: "Ensure that PostgreSQL server disables public network access"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/database/postgres-configuration-log-connections.tf:8-19

		8  | resource "azurerm_postgresql_server" "example" {
		9  |   name                = "example-psqlserver"
		10 |   location            = azurerm_resource_group.example.location
		11 |   resource_group_name = azurerm_resource_group.example.name
		12 |
		13 |   administrator_login          = "psqladminun"
		14 |   administrator_login_password = "H@Sh1CoR3!"
		15 |
		16 |   sku_name   = "GP_Gen5_4"
		17 |   version    = "9.6"
		18 |   storage_mb = 640000
		19 | }


Check: CKV_AZURE_128: "Ensure that PostgreSQL server enables Threat detection policy"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/database/postgres-configuration-log-connections.tf:8-19

		8  | resource "azurerm_postgresql_server" "example" {
		9  |   name                = "example-psqlserver"
		10 |   location            = azurerm_resource_group.example.location
		11 |   resource_group_name = azurerm_resource_group.example.name
		12 |
		13 |   administrator_login          = "psqladminun"
		14 |   administrator_login_password = "H@Sh1CoR3!"
		15 |
		16 |   sku_name   = "GP_Gen5_4"
		17 |   version    = "9.6"
		18 |   storage_mb = 640000
		19 | }


Check: CKV_AZURE_130: "Ensure that PostgreSQL server enables infrastructure encryption"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/database/postgres-configuration-log-connections.tf:8-19

		8  | resource "azurerm_postgresql_server" "example" {
		9  |   name                = "example-psqlserver"
		10 |   location            = azurerm_resource_group.example.location
		11 |   resource_group_name = azurerm_resource_group.example.name
		12 |
		13 |   administrator_login          = "psqladminun"
		14 |   administrator_login_password = "H@Sh1CoR3!"
		15 |
		16 |   sku_name   = "GP_Gen5_4"
		17 |   version    = "9.6"
		18 |   storage_mb = 640000
		19 | }


Check: CKV_AZURE_29: "Ensure 'Enforce SSL connection' is set to 'ENABLED' for PostgreSQL Database Server"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/database/postgres-configuration-log-connections.tf:8-19

		8  | resource "azurerm_postgresql_server" "example" {
		9  |   name                = "example-psqlserver"
		10 |   location            = azurerm_resource_group.example.location
		11 |   resource_group_name = azurerm_resource_group.example.name
		12 |
		13 |   administrator_login          = "psqladminun"
		14 |   administrator_login_password = "H@Sh1CoR3!"
		15 |
		16 |   sku_name   = "GP_Gen5_4"
		17 |   version    = "9.6"
		18 |   storage_mb = 640000
		19 | }


Check: CKV_AZURE_102: "Ensure that PostgreSQL server enables geo-redundant backups"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/database/postgres-configuration-log-connections.tf:8-19

		8  | resource "azurerm_postgresql_server" "example" {
		9  |   name                = "example-psqlserver"
		10 |   location            = azurerm_resource_group.example.location
		11 |   resource_group_name = azurerm_resource_group.example.name
		12 |
		13 |   administrator_login          = "psqladminun"
		14 |   administrator_login_password = "H@Sh1CoR3!"
		15 |
		16 |   sku_name   = "GP_Gen5_4"
		17 |   version    = "9.6"
		18 |   storage_mb = 640000
		19 | }


Check: CKV_AZURE_46: "Specifies a retention period of less than 90 days."
	FAILED for resource: azurerm_mssql_database_extended_auditing_policy.fail
	File: /terraform/azurerm/database/retention-period-set.tf:3-9

		3 | resource "azurerm_mssql_database_extended_auditing_policy" "fail" {
		4 |   database_id                             = azurerm_mssql_database.example.id
		5 |   storage_endpoint                        = azurerm_storage_account.example.primary_blob_endpoint
		6 |   storage_account_access_key              = azurerm_storage_account.example.primary_access_key
		7 |   storage_account_access_key_is_secondary = false
		8 |   retention_in_days                       = 6
		9 | }


Check: CKV_AZURE_113: "Ensure that SQL server disables public network access"
	FAILED for resource: azurerm_mssql_server.fail
	File: /terraform/azurerm/database/secure-tls-policy.tf:2-10

		2  | resource "azurerm_mssql_server" "fail" {
		3  |   name                         = "mssqlserver"
		4  |   resource_group_name          = azurerm_resource_group.example.name
		5  |   location                     = azurerm_resource_group.example.location
		6  |   version                      = "12.0"
		7  |   administrator_login          = "missadministrator"
		8  |   administrator_login_password = "thisIsKat11"
		9  |   minimum_tls_version          = "1.1"
		10 | }


Check: CKV_AZURE_24: "Ensure that 'Auditing' Retention is 'greater than 90 days' for SQL servers"
	FAILED for resource: azurerm_mssql_server.fail
	File: /terraform/azurerm/database/secure-tls-policy.tf:2-10

		2  | resource "azurerm_mssql_server" "fail" {
		3  |   name                         = "mssqlserver"
		4  |   resource_group_name          = azurerm_resource_group.example.name
		5  |   location                     = azurerm_resource_group.example.location
		6  |   version                      = "12.0"
		7  |   administrator_login          = "missadministrator"
		8  |   administrator_login_password = "thisIsKat11"
		9  |   minimum_tls_version          = "1.1"
		10 | }


Check: CKV_AZURE_52: "Ensure MSSQL is using the latest version of TLS encryption"
	FAILED for resource: azurerm_mssql_server.fail
	File: /terraform/azurerm/database/secure-tls-policy.tf:2-10

		2  | resource "azurerm_mssql_server" "fail" {
		3  |   name                         = "mssqlserver"
		4  |   resource_group_name          = azurerm_resource_group.example.name
		5  |   location                     = azurerm_resource_group.example.location
		6  |   version                      = "12.0"
		7  |   administrator_login          = "missadministrator"
		8  |   administrator_login_password = "thisIsKat11"
		9  |   minimum_tls_version          = "1.1"
		10 | }


Check: CKV_AZURE_68: "Ensure that PostgreSQL server disables public network access"
	FAILED for resource: azurerm_postgresql_server.fail
	File: /terraform/azurerm/database/secure-tls-policy.tf:12-18

		12 | resource "azurerm_postgresql_server" "fail" {
		13 |   name = "fail"
		14 |
		15 |   public_network_access_enabled    = true
		16 |   ssl_enforcement_enabled          = false
		17 |   ssl_minimal_tls_version_enforced = "TLS1_1"
		18 | }


Check: CKV_AZURE_128: "Ensure that PostgreSQL server enables Threat detection policy"
	FAILED for resource: azurerm_postgresql_server.fail
	File: /terraform/azurerm/database/secure-tls-policy.tf:12-18

		12 | resource "azurerm_postgresql_server" "fail" {
		13 |   name = "fail"
		14 |
		15 |   public_network_access_enabled    = true
		16 |   ssl_enforcement_enabled          = false
		17 |   ssl_minimal_tls_version_enforced = "TLS1_1"
		18 | }


Check: CKV_AZURE_130: "Ensure that PostgreSQL server enables infrastructure encryption"
	FAILED for resource: azurerm_postgresql_server.fail
	File: /terraform/azurerm/database/secure-tls-policy.tf:12-18

		12 | resource "azurerm_postgresql_server" "fail" {
		13 |   name = "fail"
		14 |
		15 |   public_network_access_enabled    = true
		16 |   ssl_enforcement_enabled          = false
		17 |   ssl_minimal_tls_version_enforced = "TLS1_1"
		18 | }


Check: CKV_AZURE_29: "Ensure 'Enforce SSL connection' is set to 'ENABLED' for PostgreSQL Database Server"
	FAILED for resource: azurerm_postgresql_server.fail
	File: /terraform/azurerm/database/secure-tls-policy.tf:12-18

		12 | resource "azurerm_postgresql_server" "fail" {
		13 |   name = "fail"
		14 |
		15 |   public_network_access_enabled    = true
		16 |   ssl_enforcement_enabled          = false
		17 |   ssl_minimal_tls_version_enforced = "TLS1_1"
		18 | }


Check: CKV_AZURE_102: "Ensure that PostgreSQL server enables geo-redundant backups"
	FAILED for resource: azurerm_postgresql_server.fail
	File: /terraform/azurerm/database/secure-tls-policy.tf:12-18

		12 | resource "azurerm_postgresql_server" "fail" {
		13 |   name = "fail"
		14 |
		15 |   public_network_access_enabled    = true
		16 |   ssl_enforcement_enabled          = false
		17 |   ssl_minimal_tls_version_enforced = "TLS1_1"
		18 | }


Check: CKV_AZURE_104: "Ensure that Azure Data factory public network access is disabled"
	FAILED for resource: azurerm_data_factory.example
	File: /terraform/azurerm/datafactory/DataFactoryNoPublicNetworkAccess.tf:2-6

		2 | resource "azurerm_data_factory" "example" {
		3 |   name                = "example"
		4 |   location            = "azurerm_resource_group.example.location"
		5 |   resource_group_name = "azurerm_resource_group.example.name"
		6 | }


Check: CKV_AZURE_103: "Ensure that Azure Data Factory uses Git repository for source control"
	FAILED for resource: azurerm_data_factory.example
	File: /terraform/azurerm/datafactory/DataFactoryNoPublicNetworkAccess.tf:2-6

		2 | resource "azurerm_data_factory" "example" {
		3 |   name                = "example"
		4 |   location            = "azurerm_resource_group.example.location"
		5 |   resource_group_name = "azurerm_resource_group.example.name"
		6 | }


Check: CKV_AZURE_104: "Ensure that Azure Data factory public network access is disabled"
	FAILED for resource: azurerm_data_factory.fail
	File: /terraform/azurerm/datafactory/azurerm_data_factory.tf:4-8

		4 | resource "azurerm_data_factory" "fail" {
		5 |   location            = azurerm_resource_group.example.location
		6 |   name                = "example"
		7 |   resource_group_name = azurerm_resource_group.example.name
		8 | }


Check: CKV_AZURE_103: "Ensure that Azure Data Factory uses Git repository for source control"
	FAILED for resource: azurerm_data_factory.fail
	File: /terraform/azurerm/datafactory/azurerm_data_factory.tf:4-8

		4 | resource "azurerm_data_factory" "fail" {
		5 |   location            = azurerm_resource_group.example.location
		6 |   name                = "example"
		7 |   resource_group_name = azurerm_resource_group.example.name
		8 | }


Check: CKV_AZURE_104: "Ensure that Azure Data factory public network access is disabled"
	FAILED for resource: azurerm_data_factory.fail
	File: /terraform/azurerm/datafactory/data_factory.tf:2-6

		2 | resource "azurerm_data_factory" "fail" {
		3 |   name                = "example"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 | }


Check: CKV_AZURE_103: "Ensure that Azure Data Factory uses Git repository for source control"
	FAILED for resource: azurerm_data_factory.fail
	File: /terraform/azurerm/datafactory/data_factory.tf:2-6

		2 | resource "azurerm_data_factory" "fail" {
		3 |   name                = "example"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 | }


Check: CKV_AZURE_105: "Ensure that Data Lake Store accounts enables encryption"
	FAILED for resource: azurerm_data_lake_store.example
	File: /terraform/azurerm/datalake/DataLakeStoreEncryption.tf:2-8

		2 | resource "azurerm_data_lake_store" "example" {
		3 |   name                = "consumptiondatalake"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |
		7 |   encryption_state = "Disabled"
		8 | }


Check: CKV_AZURE_105: "Ensure that Data Lake Store accounts enables encryption"
	FAILED for resource: azurerm_data_lake_store.fail
	File: /terraform/azurerm/datalake/enable-at-rest-encryption.tf:2-4

		2 | resource "azurerm_data_lake_store" "fail" {
		3 |   encryption_state = "Disabled"
		4 | }


Check: CKV_AZURE_123: "Ensure that Azure Front Door uses WAF in "Detection" or "Prevention" modes"
	FAILED for resource: azurerm_frontdoor_firewall_policy.example
	File: /terraform/azurerm/frontdoor/FrontdoorUseWAFMode.tf:2-85

		2  | resource "azurerm_frontdoor_firewall_policy" "example" {
		3  |   name                = "example-wafpolicy"
		4  |   resource_group_name = azurerm_resource_group.example.name
		5  |   location            = azurerm_resource_group.example.location
		6  |
		7  |   custom_rules {
		8  |     name      = "Rule1"
		9  |     priority  = 1
		10 |     rule_type = "MatchRule"
		11 |
		12 |     match_conditions {
		13 |       match_variables {
		14 |         variable_name = "RemoteAddr"
		15 |       }
		16 |
		17 |       operator           = "IPMatch"
		18 |       negation_condition = false
		19 |       match_values       = ["192.168.1.0/24", "10.0.0.0/24"]
		20 |     }
		21 |
		22 |     action = "Block"
		23 |   }
		24 |
		25 |   custom_rules {
		26 |     name      = "Rule2"
		27 |     priority  = 2
		28 |     rule_type = "MatchRule"
		29 |
		30 |     match_conditions {
		31 |       match_variables {
		32 |         variable_name = "RemoteAddr"
		33 |       }
		34 |
		35 |       operator           = "IPMatch"
		36 |       negation_condition = false
		37 |       match_values       = ["192.168.1.0/24"]
		38 |     }
		39 |
		40 |     match_conditions {
		41 |       match_variables {
		42 |         variable_name = "RequestHeaders"
		43 |         selector      = "UserAgent"
		44 |       }
		45 |
		46 |       operator           = "Contains"
		47 |       negation_condition = false
		48 |       match_values       = ["Windows"]
		49 |     }
		50 |
		51 |     action = "Block"
		52 |   }
		53 |
		54 |   policy_settings {
		55 |     enabled                     = false
		56 |     request_body_check          = true
		57 |     file_upload_limit_in_mb     = 100
		58 |     max_request_body_size_in_kb = 128
		59 |   }
		60 |
		61 |   managed_rules {
		62 |     exclusion {
		63 |       match_variable          = "RequestHeaderNames"
		64 |       selector                = "x-company-secret-header"
		65 |       selector_match_operator = "Equals"
		66 |     }
		67 |     exclusion {
		68 |       match_variable          = "RequestCookieNames"
		69 |       selector                = "too-tasty"
		70 |       selector_match_operator = "EndsWith"
		71 |     }
		72 |
		73 |     managed_rule_set {
		74 |       type    = "OWASP"
		75 |       version = "3.1"
		76 |       rule_group_override {
		77 |         rule_group_name = "REQUEST-920-PROTOCOL-ENFORCEMENT"
		78 |         disabled_rules = [
		79 |           "920300",
		80 |           "920440"
		81 |         ]
		82 |       }
		83 |     }
		84 |   }
		85 | }


Check: CKV_AZURE_121: "Ensure that Azure Front Door enables WAF"
	FAILED for resource: azurerm_frontdoor.example
	File: /terraform/azurerm/frontdoor/frontdoor.tf:2-45

		2  | resource "azurerm_frontdoor" "example" {
		3  |   name                                         = "example-FrontDoor"
		4  |   location                                     = "EastUS2"
		5  |   resource_group_name                          = azurerm_resource_group.example.name
		6  |   enforce_backend_pools_certificate_name_check = false
		7  |
		8  |   routing_rule {
		9  |     name               = "exampleRoutingRule1"
		10 |     accepted_protocols = ["Http", "Https"]
		11 |     patterns_to_match  = ["/*"]
		12 |     frontend_endpoints = ["exampleFrontendEndpoint1"]
		13 |     forwarding_configuration {
		14 |       forwarding_protocol = "MatchRequest"
		15 |       backend_pool_name   = "exampleBackendBing"
		16 |     }
		17 |   }
		18 |
		19 |   backend_pool_load_balancing {
		20 |     name = "exampleLoadBalancingSettings1"
		21 |   }
		22 |
		23 |   backend_pool_health_probe {
		24 |     name = "exampleHealthProbeSetting1"
		25 |   }
		26 |
		27 |   backend_pool {
		28 |     name = "exampleBackendBing"
		29 |     backend {
		30 |       host_header = "www.bing.com"
		31 |       address     = "www.bing.com"
		32 |       http_port   = 80
		33 |       https_port  = 443
		34 |     }
		35 |
		36 |     load_balancing_name = "exampleLoadBalancingSettings1"
		37 |     health_probe_name   = "exampleHealthProbeSetting1"
		38 |   }
		39 |
		40 |   frontend_endpoint {
		41 |     name                              = "exampleFrontendEndpoint1"
		42 |     host_name                         = "example-FrontDoor.azurefd.net"
		43 |     custom_https_provisioning_enabled = false
		44 |   }
		45 | }


Check: CKV_AZURE_56: "Ensure that function apps enables Authentication"
	FAILED for resource: azurerm_function_app.example
	File: /terraform/azurerm/functionapp/FunctionAppDisallowCORS.tf:2-14

		2  | resource "azurerm_function_app" "example" {
		3  |   name                       = "test-azure-functions"
		4  |   location                   = azurerm_resource_group.example.location
		5  |   resource_group_name        = azurerm_resource_group.example.name
		6  |   app_service_plan_id        = azurerm_app_service_plan.example.id
		7  |   storage_account_name       = azurerm_storage_account.example.name
		8  |   storage_account_access_key = azurerm_storage_account.example.primary_access_key
		9  |   site_config {
		10 |     cors {
		11 |       allowed_origins = ["*"]
		12 |     }
		13 |   }
		14 | }


Check: CKV_AZURE_67: "Ensure that 'HTTP Version' is the latest, if used to run the Function app"
	FAILED for resource: azurerm_function_app.example
	File: /terraform/azurerm/functionapp/FunctionAppDisallowCORS.tf:2-14

		2  | resource "azurerm_function_app" "example" {
		3  |   name                       = "test-azure-functions"
		4  |   location                   = azurerm_resource_group.example.location
		5  |   resource_group_name        = azurerm_resource_group.example.name
		6  |   app_service_plan_id        = azurerm_app_service_plan.example.id
		7  |   storage_account_name       = azurerm_storage_account.example.name
		8  |   storage_account_access_key = azurerm_storage_account.example.primary_access_key
		9  |   site_config {
		10 |     cors {
		11 |       allowed_origins = ["*"]
		12 |     }
		13 |   }
		14 | }


Check: CKV_AZURE_62: "Ensure function apps are not accessible from all regions"
	FAILED for resource: azurerm_function_app.example
	File: /terraform/azurerm/functionapp/FunctionAppDisallowCORS.tf:2-14

		2  | resource "azurerm_function_app" "example" {
		3  |   name                       = "test-azure-functions"
		4  |   location                   = azurerm_resource_group.example.location
		5  |   resource_group_name        = azurerm_resource_group.example.name
		6  |   app_service_plan_id        = azurerm_app_service_plan.example.id
		7  |   storage_account_name       = azurerm_storage_account.example.name
		8  |   storage_account_access_key = azurerm_storage_account.example.primary_access_key
		9  |   site_config {
		10 |     cors {
		11 |       allowed_origins = ["*"]
		12 |     }
		13 |   }
		14 | }


Check: CKV_AZURE_70: "Ensure that Function apps is only accessible over HTTPS"
	FAILED for resource: azurerm_function_app.example
	File: /terraform/azurerm/functionapp/FunctionAppDisallowCORS.tf:2-14

		2  | resource "azurerm_function_app" "example" {
		3  |   name                       = "test-azure-functions"
		4  |   location                   = azurerm_resource_group.example.location
		5  |   resource_group_name        = azurerm_resource_group.example.name
		6  |   app_service_plan_id        = azurerm_app_service_plan.example.id
		7  |   storage_account_name       = azurerm_storage_account.example.name
		8  |   storage_account_access_key = azurerm_storage_account.example.primary_access_key
		9  |   site_config {
		10 |     cors {
		11 |       allowed_origins = ["*"]
		12 |     }
		13 |   }
		14 | }


Check: CKV_AZURE_56: "Ensure that function apps enables Authentication"
	FAILED for resource: azurerm_function_app.example
	File: /terraform/azurerm/functionapp/FunctionAppHttpVersionLatest.tf:2-10

		2  | resource "azurerm_function_app" "example" {
		3  |   name                       = "test-azure-functions"
		4  |   location                   = azurerm_resource_group.example.location
		5  |   resource_group_name        = azurerm_resource_group.example.name
		6  |   app_service_plan_id        = azurerm_app_service_plan.example.id
		7  |   storage_account_name       = azurerm_storage_account.example.name
		8  |   storage_account_access_key = azurerm_storage_account.example.primary_access_key
		9  |   os_type                    = "linux"
		10 | }


Check: CKV_AZURE_67: "Ensure that 'HTTP Version' is the latest, if used to run the Function app"
	FAILED for resource: azurerm_function_app.example
	File: /terraform/azurerm/functionapp/FunctionAppHttpVersionLatest.tf:2-10

		2  | resource "azurerm_function_app" "example" {
		3  |   name                       = "test-azure-functions"
		4  |   location                   = azurerm_resource_group.example.location
		5  |   resource_group_name        = azurerm_resource_group.example.name
		6  |   app_service_plan_id        = azurerm_app_service_plan.example.id
		7  |   storage_account_name       = azurerm_storage_account.example.name
		8  |   storage_account_access_key = azurerm_storage_account.example.primary_access_key
		9  |   os_type                    = "linux"
		10 | }


Check: CKV_AZURE_70: "Ensure that Function apps is only accessible over HTTPS"
	FAILED for resource: azurerm_function_app.example
	File: /terraform/azurerm/functionapp/FunctionAppHttpVersionLatest.tf:2-10

		2  | resource "azurerm_function_app" "example" {
		3  |   name                       = "test-azure-functions"
		4  |   location                   = azurerm_resource_group.example.location
		5  |   resource_group_name        = azurerm_resource_group.example.name
		6  |   app_service_plan_id        = azurerm_app_service_plan.example.id
		7  |   storage_account_name       = azurerm_storage_account.example.name
		8  |   storage_account_access_key = azurerm_storage_account.example.primary_access_key
		9  |   os_type                    = "linux"
		10 | }


Check: CKV_AZURE_71: "Ensure that Managed identity provider is enabled for app services"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/functionapp/FunctionAppsAccessibleOverHttps.tf:2-8

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 |   https_only          = false
		8 | }


Check: CKV_AZURE_63: "Ensure that App service enables HTTP logging"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/functionapp/FunctionAppsAccessibleOverHttps.tf:2-8

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 |   https_only          = false
		8 | }


Check: CKV_AZURE_80: "Ensure that 'Net Framework' version is the latest, if used as a part of the web app"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/functionapp/FunctionAppsAccessibleOverHttps.tf:2-8

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 |   https_only          = false
		8 | }


Check: CKV_AZURE_65: "Ensure that App service enables detailed error messages"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/functionapp/FunctionAppsAccessibleOverHttps.tf:2-8

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 |   https_only          = false
		8 | }


Check: CKV_AZURE_17: "Ensure the web app has 'Client Certificates (Incoming client certificates)' set"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/functionapp/FunctionAppsAccessibleOverHttps.tf:2-8

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 |   https_only          = false
		8 | }


Check: CKV_AZURE_14: "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/functionapp/FunctionAppsAccessibleOverHttps.tf:2-8

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 |   https_only          = false
		8 | }


Check: CKV_AZURE_88: "Ensure that app services use Azure Files"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/functionapp/FunctionAppsAccessibleOverHttps.tf:2-8

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 |   https_only          = false
		8 | }


Check: CKV_AZURE_78: "Ensure FTP deployments are disabled"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/functionapp/FunctionAppsAccessibleOverHttps.tf:2-8

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 |   https_only          = false
		8 | }


Check: CKV_AZURE_18: "Ensure that 'HTTP Version' is the latest if used to run the web app"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/functionapp/FunctionAppsAccessibleOverHttps.tf:2-8

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 |   https_only          = false
		8 | }


Check: CKV_AZURE_66: "Ensure that App service enables failed request tracing"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/functionapp/FunctionAppsAccessibleOverHttps.tf:2-8

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 |   https_only          = false
		8 | }


Check: CKV_AZURE_16: "Ensure that Register with Azure Active Directory is enabled on App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/functionapp/FunctionAppsAccessibleOverHttps.tf:2-8

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 |   https_only          = false
		8 | }


Check: CKV_AZURE_13: "Ensure App Service Authentication is set on Azure App Service"
	FAILED for resource: azurerm_app_service.example
	File: /terraform/azurerm/functionapp/FunctionAppsAccessibleOverHttps.tf:2-8

		2 | resource "azurerm_app_service" "example" {
		3 |   name                = "example-app-service"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   app_service_plan_id = azurerm_app_service_plan.example.id
		7 |   https_only          = false
		8 | }


Check: CKV_AZURE_56: "Ensure that function apps enables Authentication"
	FAILED for resource: azurerm_function_app.example
	File: /terraform/azurerm/functionapp/FunctionAppsEnableAuthentication.tf:2-9

		2 | resource "azurerm_function_app" "example" {
		3 |   name                       = "test-azure-functions"
		4 |   location                   = "azurerm_resource_group.example.location"
		5 |   resource_group_name        = "azurerm_resource_group.example.name"
		6 |   app_service_plan_id        = "azurerm_app_service_plan.example.id"
		7 |   storage_account_name       = "azurerm_storage_account.example.name"
		8 |   storage_account_access_key = "azurerm_storage_account.example.primary_access_key"
		9 | }


Check: CKV_AZURE_67: "Ensure that 'HTTP Version' is the latest, if used to run the Function app"
	FAILED for resource: azurerm_function_app.example
	File: /terraform/azurerm/functionapp/FunctionAppsEnableAuthentication.tf:2-9

		2 | resource "azurerm_function_app" "example" {
		3 |   name                       = "test-azure-functions"
		4 |   location                   = "azurerm_resource_group.example.location"
		5 |   resource_group_name        = "azurerm_resource_group.example.name"
		6 |   app_service_plan_id        = "azurerm_app_service_plan.example.id"
		7 |   storage_account_name       = "azurerm_storage_account.example.name"
		8 |   storage_account_access_key = "azurerm_storage_account.example.primary_access_key"
		9 | }


Check: CKV_AZURE_70: "Ensure that Function apps is only accessible over HTTPS"
	FAILED for resource: azurerm_function_app.example
	File: /terraform/azurerm/functionapp/FunctionAppsEnableAuthentication.tf:2-9

		2 | resource "azurerm_function_app" "example" {
		3 |   name                       = "test-azure-functions"
		4 |   location                   = "azurerm_resource_group.example.location"
		5 |   resource_group_name        = "azurerm_resource_group.example.name"
		6 |   app_service_plan_id        = "azurerm_app_service_plan.example.id"
		7 |   storage_account_name       = "azurerm_storage_account.example.name"
		8 |   storage_account_access_key = "azurerm_storage_account.example.primary_access_key"
		9 | }


Check: CKV_AZURE_56: "Ensure that function apps enables Authentication"
	FAILED for resource: azurerm_function_app.fail
	File: /terraform/azurerm/functionapp/authentication-enabled.tf:3-8

		3 | resource "azurerm_function_app" "fail" {
		4 |   name                = "example-function-app"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_function_app_plan.example.id
		8 | }


Check: CKV_AZURE_67: "Ensure that 'HTTP Version' is the latest, if used to run the Function app"
	FAILED for resource: azurerm_function_app.fail
	File: /terraform/azurerm/functionapp/authentication-enabled.tf:3-8

		3 | resource "azurerm_function_app" "fail" {
		4 |   name                = "example-function-app"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_function_app_plan.example.id
		8 | }


Check: CKV_AZURE_70: "Ensure that Function apps is only accessible over HTTPS"
	FAILED for resource: azurerm_function_app.fail
	File: /terraform/azurerm/functionapp/authentication-enabled.tf:3-8

		3 | resource "azurerm_function_app" "fail" {
		4 |   name                = "example-function-app"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_function_app_plan.example.id
		8 | }


Check: CKV_AZURE_56: "Ensure that function apps enables Authentication"
	FAILED for resource: azurerm_function_app.fail
	File: /terraform/azurerm/functionapp/enable-http2.tf:3-8

		3 | resource "azurerm_function_app" "fail" {
		4 |   name                = "example-function-app"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_app_service_plan.example.id
		8 | }


Check: CKV_AZURE_67: "Ensure that 'HTTP Version' is the latest, if used to run the Function app"
	FAILED for resource: azurerm_function_app.fail
	File: /terraform/azurerm/functionapp/enable-http2.tf:3-8

		3 | resource "azurerm_function_app" "fail" {
		4 |   name                = "example-function-app"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_app_service_plan.example.id
		8 | }


Check: CKV_AZURE_70: "Ensure that Function apps is only accessible over HTTPS"
	FAILED for resource: azurerm_function_app.fail
	File: /terraform/azurerm/functionapp/enable-http2.tf:3-8

		3 | resource "azurerm_function_app" "fail" {
		4 |   name                = "example-function-app"
		5 |   location            = azurerm_resource_group.example.location
		6 |   resource_group_name = azurerm_resource_group.example.name
		7 |   app_service_plan_id = azurerm_app_service_plan.example.id
		8 | }


Check: CKV_AZURE_40: "Ensure that the expiration date is set on all keys"
	FAILED for resource: azurerm_key_vault_key.generated
	File: /terraform/azurerm/keyvault/KeyBackedByHSM.tf:2-16

		2  | resource "azurerm_key_vault_key" "generated" {
		3  |   name         = "generated-certificate"
		4  |   key_vault_id = azurerm_key_vault.example.id
		5  |   key_type     = "RSA"
		6  |   key_size     = 2048
		7  |
		8  |   key_opts = [
		9  |     "decrypt",
		10 |     "encrypt",
		11 |     "sign",
		12 |     "unwrapKey",
		13 |     "verify",
		14 |     "wrapKey",
		15 |   ]
		16 | }


Check: CKV_AZURE_112: "Ensure that key vault key is backed by HSM"
	FAILED for resource: azurerm_key_vault_key.generated
	File: /terraform/azurerm/keyvault/KeyBackedByHSM.tf:2-16

		2  | resource "azurerm_key_vault_key" "generated" {
		3  |   name         = "generated-certificate"
		4  |   key_vault_id = azurerm_key_vault.example.id
		5  |   key_type     = "RSA"
		6  |   key_size     = 2048
		7  |
		8  |   key_opts = [
		9  |     "decrypt",
		10 |     "encrypt",
		11 |     "sign",
		12 |     "unwrapKey",
		13 |     "verify",
		14 |     "wrapKey",
		15 |   ]
		16 | }


Check: CKV_AZURE_40: "Ensure that the expiration date is set on all keys"
	FAILED for resource: azurerm_key_vault_key.generated
	File: /terraform/azurerm/keyvault/KeyExpirationDate.tf:2-16

		2  | resource "azurerm_key_vault_key" "generated" {
		3  |   name         = "generated-certificate"
		4  |   key_vault_id = azurerm_key_vault.example.id
		5  |   key_type     = "RSA"
		6  |   key_size     = 2048
		7  |
		8  |   key_opts = [
		9  |     "decrypt",
		10 |     "encrypt",
		11 |     "sign",
		12 |     "unwrapKey",
		13 |     "verify",
		14 |     "wrapKey",
		15 |   ]
		16 | }


Check: CKV_AZURE_112: "Ensure that key vault key is backed by HSM"
	FAILED for resource: azurerm_key_vault_key.generated
	File: /terraform/azurerm/keyvault/KeyExpirationDate.tf:2-16

		2  | resource "azurerm_key_vault_key" "generated" {
		3  |   name         = "generated-certificate"
		4  |   key_vault_id = azurerm_key_vault.example.id
		5  |   key_type     = "RSA"
		6  |   key_size     = 2048
		7  |
		8  |   key_opts = [
		9  |     "decrypt",
		10 |     "encrypt",
		11 |     "sign",
		12 |     "unwrapKey",
		13 |     "verify",
		14 |     "wrapKey",
		15 |   ]
		16 | }


Check: CKV_AZURE_42: "Ensure the key vault is recoverable"
	FAILED for resource: azurerm_key_vault.example
	File: /terraform/azurerm/keyvault/KeyVaultEnablesFirewallRulesSettings.tf:2-29

		2  | resource "azurerm_key_vault" "example" {
		3  |   name                        = "examplekeyvault"
		4  |   location                    = azurerm_resource_group.example.location
		5  |   resource_group_name         = azurerm_resource_group.example.name
		6  |   enabled_for_disk_encryption = true
		7  |   tenant_id                   = data.azurerm_client_config.current.tenant_id
		8  |   soft_delete_retention_days  = 7
		9  |   purge_protection_enabled    = false
		10 |
		11 |   sku_name = "standard"
		12 |
		13 |   access_policy {
		14 |     tenant_id = data.azurerm_client_config.current.tenant_id
		15 |     object_id = data.azurerm_client_config.current.object_id
		16 |
		17 |     key_permissions = [
		18 |       "Get",
		19 |     ]
		20 |
		21 |     secret_permissions = [
		22 |       "Get",
		23 |     ]
		24 |
		25 |     storage_permissions = [
		26 |       "Get",
		27 |     ]
		28 |   }
		29 | }


Check: CKV_AZURE_110: "Ensure that key vault enables purge protection"
	FAILED for resource: azurerm_key_vault.example
	File: /terraform/azurerm/keyvault/KeyVaultEnablesFirewallRulesSettings.tf:2-29

		2  | resource "azurerm_key_vault" "example" {
		3  |   name                        = "examplekeyvault"
		4  |   location                    = azurerm_resource_group.example.location
		5  |   resource_group_name         = azurerm_resource_group.example.name
		6  |   enabled_for_disk_encryption = true
		7  |   tenant_id                   = data.azurerm_client_config.current.tenant_id
		8  |   soft_delete_retention_days  = 7
		9  |   purge_protection_enabled    = false
		10 |
		11 |   sku_name = "standard"
		12 |
		13 |   access_policy {
		14 |     tenant_id = data.azurerm_client_config.current.tenant_id
		15 |     object_id = data.azurerm_client_config.current.object_id
		16 |
		17 |     key_permissions = [
		18 |       "Get",
		19 |     ]
		20 |
		21 |     secret_permissions = [
		22 |       "Get",
		23 |     ]
		24 |
		25 |     storage_permissions = [
		26 |       "Get",
		27 |     ]
		28 |   }
		29 | }


Check: CKV_AZURE_109: "Ensure that key vault allows firewall rules settings"
	FAILED for resource: azurerm_key_vault.example
	File: /terraform/azurerm/keyvault/KeyVaultEnablesFirewallRulesSettings.tf:2-29

		2  | resource "azurerm_key_vault" "example" {
		3  |   name                        = "examplekeyvault"
		4  |   location                    = azurerm_resource_group.example.location
		5  |   resource_group_name         = azurerm_resource_group.example.name
		6  |   enabled_for_disk_encryption = true
		7  |   tenant_id                   = data.azurerm_client_config.current.tenant_id
		8  |   soft_delete_retention_days  = 7
		9  |   purge_protection_enabled    = false
		10 |
		11 |   sku_name = "standard"
		12 |
		13 |   access_policy {
		14 |     tenant_id = data.azurerm_client_config.current.tenant_id
		15 |     object_id = data.azurerm_client_config.current.object_id
		16 |
		17 |     key_permissions = [
		18 |       "Get",
		19 |     ]
		20 |
		21 |     secret_permissions = [
		22 |       "Get",
		23 |     ]
		24 |
		25 |     storage_permissions = [
		26 |       "Get",
		27 |     ]
		28 |   }
		29 | }


Check: CKV_AZURE_42: "Ensure the key vault is recoverable"
	FAILED for resource: azurerm_key_vault.example
	File: /terraform/azurerm/keyvault/KeyVaultEnablesPurgeProtection.tf:2-28

		2  | resource "azurerm_key_vault" "example" {
		3  |   name                        = "examplekeyvault"
		4  |   location                    = azurerm_resource_group.example.location
		5  |   resource_group_name         = azurerm_resource_group.example.name
		6  |   enabled_for_disk_encryption = true
		7  |   tenant_id                   = data.azurerm_client_config.current.tenant_id
		8  |   soft_delete_retention_days  = 7
		9  |
		10 |   sku_name = "standard"
		11 |
		12 |   access_policy {
		13 |     tenant_id = data.azurerm_client_config.current.tenant_id
		14 |     object_id = data.azurerm_client_config.current.object_id
		15 |
		16 |     key_permissions = [
		17 |       "Get",
		18 |     ]
		19 |
		20 |     secret_permissions = [
		21 |       "Get",
		22 |     ]
		23 |
		24 |     storage_permissions = [
		25 |       "Get",
		26 |     ]
		27 |   }
		28 | }


Check: CKV_AZURE_110: "Ensure that key vault enables purge protection"
	FAILED for resource: azurerm_key_vault.example
	File: /terraform/azurerm/keyvault/KeyVaultEnablesPurgeProtection.tf:2-28

		2  | resource "azurerm_key_vault" "example" {
		3  |   name                        = "examplekeyvault"
		4  |   location                    = azurerm_resource_group.example.location
		5  |   resource_group_name         = azurerm_resource_group.example.name
		6  |   enabled_for_disk_encryption = true
		7  |   tenant_id                   = data.azurerm_client_config.current.tenant_id
		8  |   soft_delete_retention_days  = 7
		9  |
		10 |   sku_name = "standard"
		11 |
		12 |   access_policy {
		13 |     tenant_id = data.azurerm_client_config.current.tenant_id
		14 |     object_id = data.azurerm_client_config.current.object_id
		15 |
		16 |     key_permissions = [
		17 |       "Get",
		18 |     ]
		19 |
		20 |     secret_permissions = [
		21 |       "Get",
		22 |     ]
		23 |
		24 |     storage_permissions = [
		25 |       "Get",
		26 |     ]
		27 |   }
		28 | }


Check: CKV_AZURE_109: "Ensure that key vault allows firewall rules settings"
	FAILED for resource: azurerm_key_vault.example
	File: /terraform/azurerm/keyvault/KeyVaultEnablesPurgeProtection.tf:2-28

		2  | resource "azurerm_key_vault" "example" {
		3  |   name                        = "examplekeyvault"
		4  |   location                    = azurerm_resource_group.example.location
		5  |   resource_group_name         = azurerm_resource_group.example.name
		6  |   enabled_for_disk_encryption = true
		7  |   tenant_id                   = data.azurerm_client_config.current.tenant_id
		8  |   soft_delete_retention_days  = 7
		9  |
		10 |   sku_name = "standard"
		11 |
		12 |   access_policy {
		13 |     tenant_id = data.azurerm_client_config.current.tenant_id
		14 |     object_id = data.azurerm_client_config.current.object_id
		15 |
		16 |     key_permissions = [
		17 |       "Get",
		18 |     ]
		19 |
		20 |     secret_permissions = [
		21 |       "Get",
		22 |     ]
		23 |
		24 |     storage_permissions = [
		25 |       "Get",
		26 |     ]
		27 |   }
		28 | }


Check: CKV_AZURE_42: "Ensure the key vault is recoverable"
	FAILED for resource: azurerm_key_vault.example
	File: /terraform/azurerm/keyvault/KeyVaultEnablesSoftDelete.tf:2-29

		2  | resource "azurerm_key_vault" "example" {
		3  |   name                        = "examplekeyvault"
		4  |   location                    = azurerm_resource_group.example.location
		5  |   resource_group_name         = azurerm_resource_group.example.name
		6  |   enabled_for_disk_encryption = true
		7  |   tenant_id                   = data.azurerm_client_config.current.tenant_id
		8  |   soft_delete_retention_days  = 7
		9  |   purge_protection_enabled    = false
		10 |   soft_delete_enabled         = false
		11 |   sku_name                    = "standard"
		12 |
		13 |   access_policy {
		14 |     tenant_id = data.azurerm_client_config.current.tenant_id
		15 |     object_id = data.azurerm_client_config.current.object_id
		16 |
		17 |     key_permissions = [
		18 |       "Get",
		19 |     ]
		20 |
		21 |     secret_permissions = [
		22 |       "Get",
		23 |     ]
		24 |
		25 |     storage_permissions = [
		26 |       "Get",
		27 |     ]
		28 |   }
		29 | }


Check: CKV_AZURE_111: "Ensure that key vault enables soft delete"
	FAILED for resource: azurerm_key_vault.example
	File: /terraform/azurerm/keyvault/KeyVaultEnablesSoftDelete.tf:2-29

		2  | resource "azurerm_key_vault" "example" {
		3  |   name                        = "examplekeyvault"
		4  |   location                    = azurerm_resource_group.example.location
		5  |   resource_group_name         = azurerm_resource_group.example.name
		6  |   enabled_for_disk_encryption = true
		7  |   tenant_id                   = data.azurerm_client_config.current.tenant_id
		8  |   soft_delete_retention_days  = 7
		9  |   purge_protection_enabled    = false
		10 |   soft_delete_enabled         = false
		11 |   sku_name                    = "standard"
		12 |
		13 |   access_policy {
		14 |     tenant_id = data.azurerm_client_config.current.tenant_id
		15 |     object_id = data.azurerm_client_config.current.object_id
		16 |
		17 |     key_permissions = [
		18 |       "Get",
		19 |     ]
		20 |
		21 |     secret_permissions = [
		22 |       "Get",
		23 |     ]
		24 |
		25 |     storage_permissions = [
		26 |       "Get",
		27 |     ]
		28 |   }
		29 | }


Check: CKV_AZURE_110: "Ensure that key vault enables purge protection"
	FAILED for resource: azurerm_key_vault.example
	File: /terraform/azurerm/keyvault/KeyVaultEnablesSoftDelete.tf:2-29

		2  | resource "azurerm_key_vault" "example" {
		3  |   name                        = "examplekeyvault"
		4  |   location                    = azurerm_resource_group.example.location
		5  |   resource_group_name         = azurerm_resource_group.example.name
		6  |   enabled_for_disk_encryption = true
		7  |   tenant_id                   = data.azurerm_client_config.current.tenant_id
		8  |   soft_delete_retention_days  = 7
		9  |   purge_protection_enabled    = false
		10 |   soft_delete_enabled         = false
		11 |   sku_name                    = "standard"
		12 |
		13 |   access_policy {
		14 |     tenant_id = data.azurerm_client_config.current.tenant_id
		15 |     object_id = data.azurerm_client_config.current.object_id
		16 |
		17 |     key_permissions = [
		18 |       "Get",
		19 |     ]
		20 |
		21 |     secret_permissions = [
		22 |       "Get",
		23 |     ]
		24 |
		25 |     storage_permissions = [
		26 |       "Get",
		27 |     ]
		28 |   }
		29 | }


Check: CKV_AZURE_109: "Ensure that key vault allows firewall rules settings"
	FAILED for resource: azurerm_key_vault.example
	File: /terraform/azurerm/keyvault/KeyVaultEnablesSoftDelete.tf:2-29

		2  | resource "azurerm_key_vault" "example" {
		3  |   name                        = "examplekeyvault"
		4  |   location                    = azurerm_resource_group.example.location
		5  |   resource_group_name         = azurerm_resource_group.example.name
		6  |   enabled_for_disk_encryption = true
		7  |   tenant_id                   = data.azurerm_client_config.current.tenant_id
		8  |   soft_delete_retention_days  = 7
		9  |   purge_protection_enabled    = false
		10 |   soft_delete_enabled         = false
		11 |   sku_name                    = "standard"
		12 |
		13 |   access_policy {
		14 |     tenant_id = data.azurerm_client_config.current.tenant_id
		15 |     object_id = data.azurerm_client_config.current.object_id
		16 |
		17 |     key_permissions = [
		18 |       "Get",
		19 |     ]
		20 |
		21 |     secret_permissions = [
		22 |       "Get",
		23 |     ]
		24 |
		25 |     storage_permissions = [
		26 |       "Get",
		27 |     ]
		28 |   }
		29 | }


Check: CKV_AZURE_42: "Ensure the key vault is recoverable"
	FAILED for resource: azurerm_key_vault.example
	File: /terraform/azurerm/keyvault/KeyVaultRecoveryEnabled.tf:2-9

		2 | resource "azurerm_key_vault" "example" {
		3 |   name                        = "testvault"
		4 |   location                    = azurerm_resource_group.example.location
		5 |   resource_group_name         = azurerm_resource_group.example.name
		6 |   enabled_for_disk_encryption = true
		7 |   tenant_id                   = data.azurerm_client_config.current.tenant_id
		8 |   sku_name                    = "standard"
		9 | }


Check: CKV_AZURE_110: "Ensure that key vault enables purge protection"
	FAILED for resource: azurerm_key_vault.example
	File: /terraform/azurerm/keyvault/KeyVaultRecoveryEnabled.tf:2-9

		2 | resource "azurerm_key_vault" "example" {
		3 |   name                        = "testvault"
		4 |   location                    = azurerm_resource_group.example.location
		5 |   resource_group_name         = azurerm_resource_group.example.name
		6 |   enabled_for_disk_encryption = true
		7 |   tenant_id                   = data.azurerm_client_config.current.tenant_id
		8 |   sku_name                    = "standard"
		9 | }


Check: CKV_AZURE_109: "Ensure that key vault allows firewall rules settings"
	FAILED for resource: azurerm_key_vault.example
	File: /terraform/azurerm/keyvault/KeyVaultRecoveryEnabled.tf:2-9

		2 | resource "azurerm_key_vault" "example" {
		3 |   name                        = "testvault"
		4 |   location                    = azurerm_resource_group.example.location
		5 |   resource_group_name         = azurerm_resource_group.example.name
		6 |   enabled_for_disk_encryption = true
		7 |   tenant_id                   = data.azurerm_client_config.current.tenant_id
		8 |   sku_name                    = "standard"
		9 | }


Check: CKV_AZURE_41: "Ensure that the expiration date is set on all secrets"
	FAILED for resource: azurerm_key_vault_secret.example
	File: /terraform/azurerm/keyvault/SecretContentType.tf:2-10

		2  | resource "azurerm_key_vault_secret" "example" {
		3  |   name         = "secret-sauce"
		4  |   value        = "szechuan"
		5  |   key_vault_id = azurerm_key_vault.example.id
		6  |
		7  |   tags = {
		8  |     environment = "Production"
		9  |   }
		10 | }


Check: CKV_AZURE_114: "Ensure that key vault secrets have "content_type" set"
	FAILED for resource: azurerm_key_vault_secret.example
	File: /terraform/azurerm/keyvault/SecretContentType.tf:2-10

		2  | resource "azurerm_key_vault_secret" "example" {
		3  |   name         = "secret-sauce"
		4  |   value        = "szechuan"
		5  |   key_vault_id = azurerm_key_vault.example.id
		6  |
		7  |   tags = {
		8  |     environment = "Production"
		9  |   }
		10 | }


Check: CKV_AZURE_41: "Ensure that the expiration date is set on all secrets"
	FAILED for resource: azurerm_key_vault_secret.example
	File: /terraform/azurerm/keyvault/SecretExpirationDate.tf:2-10

		2  | resource "azurerm_key_vault_secret" "example" {
		3  |   name         = "secret-sauce"
		4  |   value        = "szechuan"
		5  |   key_vault_id = azurerm_key_vault.example.id
		6  |
		7  |   tags = {
		8  |     environment = "Production"
		9  |   }
		10 | }


Check: CKV_AZURE_114: "Ensure that key vault secrets have "content_type" set"
	FAILED for resource: azurerm_key_vault_secret.example
	File: /terraform/azurerm/keyvault/SecretExpirationDate.tf:2-10

		2  | resource "azurerm_key_vault_secret" "example" {
		3  |   name         = "secret-sauce"
		4  |   value        = "szechuan"
		5  |   key_vault_id = azurerm_key_vault.example.id
		6  |
		7  |   tags = {
		8  |     environment = "Production"
		9  |   }
		10 | }


Check: CKV_AZURE_41: "Ensure that the expiration date is set on all secrets"
	FAILED for resource: azurerm_key_vault_secret.fail
	File: /terraform/azurerm/keyvault/content-type-for-secret.tf:3-7

		3 | resource "azurerm_key_vault_secret" "fail" {
		4 |   name         = "secret-sauce"
		5 |   value        = "szechuan"
		6 |   key_vault_id = azurerm_key_vault.example.id
		7 | }


Check: CKV_AZURE_114: "Ensure that key vault secrets have "content_type" set"
	FAILED for resource: azurerm_key_vault_secret.fail
	File: /terraform/azurerm/keyvault/content-type-for-secret.tf:3-7

		3 | resource "azurerm_key_vault_secret" "fail" {
		4 |   name         = "secret-sauce"
		5 |   value        = "szechuan"
		6 |   key_vault_id = azurerm_key_vault.example.id
		7 | }


Check: CKV_AZURE_40: "Ensure that the expiration date is set on all keys"
	FAILED for resource: azurerm_key_vault_key.fail
	File: /terraform/azurerm/keyvault/ensure-key-expiry.tf:3-17

		3  | resource "azurerm_key_vault_key" "fail" {
		4  |   name         = "generated-certificate"
		5  |   key_vault_id = azurerm_key_vault.example.id
		6  |   key_type     = "RSA"
		7  |   key_size     = 2048
		8  |
		9  |   key_opts = [
		10 |     "decrypt",
		11 |     "encrypt",
		12 |     "sign",
		13 |     "unwrapKey",
		14 |     "verify",
		15 |     "wrapKey",
		16 |   ]
		17 | }


Check: CKV_AZURE_112: "Ensure that key vault key is backed by HSM"
	FAILED for resource: azurerm_key_vault_key.fail
	File: /terraform/azurerm/keyvault/ensure-key-expiry.tf:3-17

		3  | resource "azurerm_key_vault_key" "fail" {
		4  |   name         = "generated-certificate"
		5  |   key_vault_id = azurerm_key_vault.example.id
		6  |   key_type     = "RSA"
		7  |   key_size     = 2048
		8  |
		9  |   key_opts = [
		10 |     "decrypt",
		11 |     "encrypt",
		12 |     "sign",
		13 |     "unwrapKey",
		14 |     "verify",
		15 |     "wrapKey",
		16 |   ]
		17 | }


Check: CKV_AZURE_41: "Ensure that the expiration date is set on all secrets"
	FAILED for resource: azurerm_key_vault_secret.fail
	File: /terraform/azurerm/keyvault/ensure-secret-expiry.tf:3-7

		3 | resource "azurerm_key_vault_secret" "fail" {
		4 |   name         = "secret-sauce"
		5 |   value        = "szechuan"
		6 |   key_vault_id = azurerm_key_vault.example.id
		7 | }


Check: CKV_AZURE_114: "Ensure that key vault secrets have "content_type" set"
	FAILED for resource: azurerm_key_vault_secret.fail
	File: /terraform/azurerm/keyvault/ensure-secret-expiry.tf:3-7

		3 | resource "azurerm_key_vault_secret" "fail" {
		4 |   name         = "secret-sauce"
		5 |   value        = "szechuan"
		6 |   key_vault_id = azurerm_key_vault.example.id
		7 | }


Check: CKV_AZURE_42: "Ensure the key vault is recoverable"
	FAILED for resource: azurerm_key_vault.fail
	File: /terraform/azurerm/keyvault/no-purge.tf:3-8

		3 | resource "azurerm_key_vault" "fail" {
		4 |   name                        = "examplekeyvault"
		5 |   location                    = azurerm_resource_group.fail.location
		6 |   enabled_for_disk_encryption = true
		7 |   purge_protection_enabled    = false
		8 | }


Check: CKV_AZURE_110: "Ensure that key vault enables purge protection"
	FAILED for resource: azurerm_key_vault.fail
	File: /terraform/azurerm/keyvault/no-purge.tf:3-8

		3 | resource "azurerm_key_vault" "fail" {
		4 |   name                        = "examplekeyvault"
		5 |   location                    = azurerm_resource_group.fail.location
		6 |   enabled_for_disk_encryption = true
		7 |   purge_protection_enabled    = false
		8 | }


Check: CKV_AZURE_109: "Ensure that key vault allows firewall rules settings"
	FAILED for resource: azurerm_key_vault.fail
	File: /terraform/azurerm/keyvault/no-purge.tf:3-8

		3 | resource "azurerm_key_vault" "fail" {
		4 |   name                        = "examplekeyvault"
		5 |   location                    = azurerm_resource_group.fail.location
		6 |   enabled_for_disk_encryption = true
		7 |   purge_protection_enabled    = false
		8 | }


Check: CKV_AZURE_42: "Ensure the key vault is recoverable"
	FAILED for resource: azurerm_key_vault.fail
	File: /terraform/azurerm/keyvault/specify-network-acl.tf:3-9

		3 | resource "azurerm_key_vault" "fail" {
		4 |   name                        = "examplekeyvault"
		5 |   location                    = azurerm_resource_group.fail.location
		6 |   enabled_for_disk_encryption = true
		7 |   soft_delete_retention_days  = 7
		8 |   purge_protection_enabled    = false
		9 | }


Check: CKV_AZURE_110: "Ensure that key vault enables purge protection"
	FAILED for resource: azurerm_key_vault.fail
	File: /terraform/azurerm/keyvault/specify-network-acl.tf:3-9

		3 | resource "azurerm_key_vault" "fail" {
		4 |   name                        = "examplekeyvault"
		5 |   location                    = azurerm_resource_group.fail.location
		6 |   enabled_for_disk_encryption = true
		7 |   soft_delete_retention_days  = 7
		8 |   purge_protection_enabled    = false
		9 | }


Check: CKV_AZURE_109: "Ensure that key vault allows firewall rules settings"
	FAILED for resource: azurerm_key_vault.fail
	File: /terraform/azurerm/keyvault/specify-network-acl.tf:3-9

		3 | resource "azurerm_key_vault" "fail" {
		4 |   name                        = "examplekeyvault"
		5 |   location                    = azurerm_resource_group.fail.location
		6 |   enabled_for_disk_encryption = true
		7 |   soft_delete_retention_days  = 7
		8 |   purge_protection_enabled    = false
		9 | }


Check: CKV_AZURE_115: "Ensure that AKS enables private clusters"
	FAILED for resource: azurerm_kubernetes_cluster.example
	File: /terraform/azurerm/kubernetes_cluster/kubernetes_cluster.tf:2-21

		2  | resource "azurerm_kubernetes_cluster" "example" {
		3  |   name                = "example-aks1"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   dns_prefix          = "exampleaks1"
		7  |
		8  |   default_node_pool {
		9  |     name       = "default"
		10 |     node_count = 1
		11 |     vm_size    = "Standard_D2_v2"
		12 |   }
		13 |
		14 |   identity {
		15 |     type = "SystemAssigned"
		16 |   }
		17 |
		18 |   tags = {
		19 |     Environment = "Production"
		20 |   }
		21 | }


Check: CKV_AZURE_117: "Ensure that AKS uses disk encryption set"
	FAILED for resource: azurerm_kubernetes_cluster.example
	File: /terraform/azurerm/kubernetes_cluster/kubernetes_cluster.tf:2-21

		2  | resource "azurerm_kubernetes_cluster" "example" {
		3  |   name                = "example-aks1"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   dns_prefix          = "exampleaks1"
		7  |
		8  |   default_node_pool {
		9  |     name       = "default"
		10 |     node_count = 1
		11 |     vm_size    = "Standard_D2_v2"
		12 |   }
		13 |
		14 |   identity {
		15 |     type = "SystemAssigned"
		16 |   }
		17 |
		18 |   tags = {
		19 |     Environment = "Production"
		20 |   }
		21 | }


Check: CKV_AZURE_7: "Ensure AKS cluster has Network Policy configured"
	FAILED for resource: azurerm_kubernetes_cluster.example
	File: /terraform/azurerm/kubernetes_cluster/kubernetes_cluster.tf:2-21

		2  | resource "azurerm_kubernetes_cluster" "example" {
		3  |   name                = "example-aks1"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   dns_prefix          = "exampleaks1"
		7  |
		8  |   default_node_pool {
		9  |     name       = "default"
		10 |     node_count = 1
		11 |     vm_size    = "Standard_D2_v2"
		12 |   }
		13 |
		14 |   identity {
		15 |     type = "SystemAssigned"
		16 |   }
		17 |
		18 |   tags = {
		19 |     Environment = "Production"
		20 |   }
		21 | }


Check: CKV_AZURE_116: "Ensure that AKS uses Azure Policies Add-on"
	FAILED for resource: azurerm_kubernetes_cluster.example
	File: /terraform/azurerm/kubernetes_cluster/kubernetes_cluster.tf:2-21

		2  | resource "azurerm_kubernetes_cluster" "example" {
		3  |   name                = "example-aks1"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   dns_prefix          = "exampleaks1"
		7  |
		8  |   default_node_pool {
		9  |     name       = "default"
		10 |     node_count = 1
		11 |     vm_size    = "Standard_D2_v2"
		12 |   }
		13 |
		14 |   identity {
		15 |     type = "SystemAssigned"
		16 |   }
		17 |
		18 |   tags = {
		19 |     Environment = "Production"
		20 |   }
		21 | }


Check: CKV_AZURE_6: "Ensure AKS has an API Server Authorized IP Ranges enabled"
	FAILED for resource: azurerm_kubernetes_cluster.example
	File: /terraform/azurerm/kubernetes_cluster/kubernetes_cluster.tf:2-21

		2  | resource "azurerm_kubernetes_cluster" "example" {
		3  |   name                = "example-aks1"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   dns_prefix          = "exampleaks1"
		7  |
		8  |   default_node_pool {
		9  |     name       = "default"
		10 |     node_count = 1
		11 |     vm_size    = "Standard_D2_v2"
		12 |   }
		13 |
		14 |   identity {
		15 |     type = "SystemAssigned"
		16 |   }
		17 |
		18 |   tags = {
		19 |     Environment = "Production"
		20 |   }
		21 | }


Check: CKV_AZURE_4: "Ensure AKS logging to Azure Monitoring is Configured"
	FAILED for resource: azurerm_kubernetes_cluster.example
	File: /terraform/azurerm/kubernetes_cluster/kubernetes_cluster.tf:2-21

		2  | resource "azurerm_kubernetes_cluster" "example" {
		3  |   name                = "example-aks1"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   dns_prefix          = "exampleaks1"
		7  |
		8  |   default_node_pool {
		9  |     name       = "default"
		10 |     node_count = 1
		11 |     vm_size    = "Standard_D2_v2"
		12 |   }
		13 |
		14 |   identity {
		15 |     type = "SystemAssigned"
		16 |   }
		17 |
		18 |   tags = {
		19 |     Environment = "Production"
		20 |   }
		21 | }


Check: CKV_AZURE_5: "Ensure RBAC is enabled on AKS clusters"
	FAILED for resource: azurerm_kubernetes_cluster.example
	File: /terraform/azurerm/kubernetes_cluster/kubernetes_cluster.tf:2-21

		2  | resource "azurerm_kubernetes_cluster" "example" {
		3  |   name                = "example-aks1"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |   dns_prefix          = "exampleaks1"
		7  |
		8  |   default_node_pool {
		9  |     name       = "default"
		10 |     node_count = 1
		11 |     vm_size    = "Standard_D2_v2"
		12 |   }
		13 |
		14 |   identity {
		15 |     type = "SystemAssigned"
		16 |   }
		17 |
		18 |   tags = {
		19 |     Environment = "Production"
		20 |   }
		21 | }


Check: CKV_AZURE_74: "Ensure that Azure Data Explorer uses disk encryption"
	FAILED for resource: azurerm_kusto_cluster.example
	File: /terraform/azurerm/kusto/DataExplorerDoubleEncryptionEnabled.tf:2-15

		2  | resource "azurerm_kusto_cluster" "example" {
		3  |   name                = "kustocluster"
		4  |   location            = azurerm_resource_group.rg.location
		5  |   resource_group_name = azurerm_resource_group.rg.name
		6  |
		7  |   sku {
		8  |     name     = "Standard_D13_v2"
		9  |     capacity = 2
		10 |   }
		11 |
		12 |   tags = {
		13 |     Environment = "Production"
		14 |   }
		15 | }


Check: CKV_AZURE_75: "Ensure that Azure Data Explorer uses double encryption"
	FAILED for resource: azurerm_kusto_cluster.example
	File: /terraform/azurerm/kusto/DataExplorerDoubleEncryptionEnabled.tf:2-15

		2  | resource "azurerm_kusto_cluster" "example" {
		3  |   name                = "kustocluster"
		4  |   location            = azurerm_resource_group.rg.location
		5  |   resource_group_name = azurerm_resource_group.rg.name
		6  |
		7  |   sku {
		8  |     name     = "Standard_D13_v2"
		9  |     capacity = 2
		10 |   }
		11 |
		12 |   tags = {
		13 |     Environment = "Production"
		14 |   }
		15 | }


Check: CKV_AZURE_74: "Ensure that Azure Data Explorer uses disk encryption"
	FAILED for resource: azurerm_kusto_cluster.example
	File: /terraform/azurerm/kusto/DataExplorerUsesDiskEncryption.tf:2-15

		2  | resource "azurerm_kusto_cluster" "example" {
		3  |   name                = "kustocluster"
		4  |   location            = azurerm_resource_group.rg.location
		5  |   resource_group_name = azurerm_resource_group.rg.name
		6  |
		7  |   sku {
		8  |     name     = "Standard_D13_v2"
		9  |     capacity = 2
		10 |   }
		11 |
		12 |   tags = {
		13 |     Environment = "Production"
		14 |   }
		15 | }


Check: CKV_AZURE_75: "Ensure that Azure Data Explorer uses double encryption"
	FAILED for resource: azurerm_kusto_cluster.example
	File: /terraform/azurerm/kusto/DataExplorerUsesDiskEncryption.tf:2-15

		2  | resource "azurerm_kusto_cluster" "example" {
		3  |   name                = "kustocluster"
		4  |   location            = azurerm_resource_group.rg.location
		5  |   resource_group_name = azurerm_resource_group.rg.name
		6  |
		7  |   sku {
		8  |     name     = "Standard_D13_v2"
		9  |     capacity = 2
		10 |   }
		11 |
		12 |   tags = {
		13 |     Environment = "Production"
		14 |   }
		15 | }


Check: CKV_AZURE_93: "Ensure that managed disks use a specific set of disk encryption sets for the customer-managed key encryption"
	FAILED for resource: azurerm_managed_disk.example
	File: /terraform/azurerm/managed_disk/ManagedDiscEncryption.tf:2-13

		2  | resource "azurerm_managed_disk" "example" {
		3  |   name                 = var.disk_name
		4  |   location             = var.location
		5  |   resource_group_name  = var.resource_group_name
		6  |   storage_account_type = var.storage_account_type
		7  |   create_option        = "Empty"
		8  |   disk_size_gb         = var.disk_size_gb
		9  |   encryption_settings {
		10 |     enabled = false
		11 |   }
		12 |   tags = var.common_tags
		13 | }


Check: CKV_AZURE_2: "Ensure Azure managed disk has encryption enabled"
	FAILED for resource: azurerm_managed_disk.example
	File: /terraform/azurerm/managed_disk/ManagedDiscEncryption.tf:2-13

		2  | resource "azurerm_managed_disk" "example" {
		3  |   name                 = var.disk_name
		4  |   location             = var.location
		5  |   resource_group_name  = var.resource_group_name
		6  |   storage_account_type = var.storage_account_type
		7  |   create_option        = "Empty"
		8  |   disk_size_gb         = var.disk_size_gb
		9  |   encryption_settings {
		10 |     enabled = false
		11 |   }
		12 |   tags = var.common_tags
		13 | }


Check: CKV_AZURE_93: "Ensure that managed disks use a specific set of disk encryption sets for the customer-managed key encryption"
	FAILED for resource: azurerm_managed_disk.source
	File: /terraform/azurerm/managed_disk/ManagedDiskEncryptionSet.tf:2-13

		2  | resource "azurerm_managed_disk" "source" {
		3  |   name                 = "acctestmd1"
		4  |   location             = "West US 2"
		5  |   resource_group_name  = azurerm_resource_group.example.name
		6  |   storage_account_type = "Standard_LRS"
		7  |   create_option        = "Empty"
		8  |   disk_size_gb         = "1"
		9  |
		10 |   tags = {
		11 |     environment = "staging"
		12 |   }
		13 | }


Check: CKV_AZURE_48: "Ensure 'public network access enabled' is set to 'False' for MariaDB servers"
	FAILED for resource: azurerm_mariadb_server.example
	File: /terraform/azurerm/maria/MariaDBGeoBackupEnabled.tf:2-17

		2  | resource "azurerm_mariadb_server" "example" {
		3  |   name                          = var.server_name
		4  |   location                      = var.resource_group.location
		5  |   resource_group_name           = var.resource_group.name
		6  |   administrator_login           = var.admin_login
		7  |   administrator_login_password  = random_string.password.result
		8  |   sku_name                      = "B_Gen5_2"
		9  |   storage_mb                    = 5120
		10 |   version                       = "10.2"
		11 |   auto_grow_enabled             = true
		12 |   backup_retention_days         = 7
		13 |   geo_redundant_backup_enabled  = false
		14 |   public_network_access_enabled = true
		15 |   #test this i guess
		16 |   ssl_enforcement_enabled = false
		17 | }


Check: CKV_AZURE_129: "Ensure that MariaDB server enables geo-redundant backups"
	FAILED for resource: azurerm_mariadb_server.example
	File: /terraform/azurerm/maria/MariaDBGeoBackupEnabled.tf:2-17

		2  | resource "azurerm_mariadb_server" "example" {
		3  |   name                          = var.server_name
		4  |   location                      = var.resource_group.location
		5  |   resource_group_name           = var.resource_group.name
		6  |   administrator_login           = var.admin_login
		7  |   administrator_login_password  = random_string.password.result
		8  |   sku_name                      = "B_Gen5_2"
		9  |   storage_mb                    = 5120
		10 |   version                       = "10.2"
		11 |   auto_grow_enabled             = true
		12 |   backup_retention_days         = 7
		13 |   geo_redundant_backup_enabled  = false
		14 |   public_network_access_enabled = true
		15 |   #test this i guess
		16 |   ssl_enforcement_enabled = false
		17 | }


Check: CKV_AZURE_47: "Ensure 'Enforce SSL connection' is set to 'ENABLED' for MariaDB servers"
	FAILED for resource: azurerm_mariadb_server.example
	File: /terraform/azurerm/maria/MariaDBGeoBackupEnabled.tf:2-17

		2  | resource "azurerm_mariadb_server" "example" {
		3  |   name                          = var.server_name
		4  |   location                      = var.resource_group.location
		5  |   resource_group_name           = var.resource_group.name
		6  |   administrator_login           = var.admin_login
		7  |   administrator_login_password  = random_string.password.result
		8  |   sku_name                      = "B_Gen5_2"
		9  |   storage_mb                    = 5120
		10 |   version                       = "10.2"
		11 |   auto_grow_enabled             = true
		12 |   backup_retention_days         = 7
		13 |   geo_redundant_backup_enabled  = false
		14 |   public_network_access_enabled = true
		15 |   #test this i guess
		16 |   ssl_enforcement_enabled = false
		17 | }


Check: CKV_AZURE_48: "Ensure 'public network access enabled' is set to 'False' for MariaDB servers"
	FAILED for resource: azurerm_mariadb_server.example
	File: /terraform/azurerm/maria/MariaDBPublicAccessDisabled.tf:2-17

		2  | resource "azurerm_mariadb_server" "example" {
		3  |   name                          = var.server_name
		4  |   location                      = var.resource_group.location
		5  |   resource_group_name           = var.resource_group.name
		6  |   administrator_login           = var.admin_login
		7  |   administrator_login_password  = random_string.password.result
		8  |   sku_name                      = "B_Gen5_2"
		9  |   storage_mb                    = 5120
		10 |   version                       = "10.2"
		11 |   auto_grow_enabled             = true
		12 |   backup_retention_days         = 7
		13 |   geo_redundant_backup_enabled  = false
		14 |   public_network_access_enabled = true
		15 |   #test this i guess
		16 |   ssl_enforcement_enabled = false
		17 | }


Check: CKV_AZURE_129: "Ensure that MariaDB server enables geo-redundant backups"
	FAILED for resource: azurerm_mariadb_server.example
	File: /terraform/azurerm/maria/MariaDBPublicAccessDisabled.tf:2-17

		2  | resource "azurerm_mariadb_server" "example" {
		3  |   name                          = var.server_name
		4  |   location                      = var.resource_group.location
		5  |   resource_group_name           = var.resource_group.name
		6  |   administrator_login           = var.admin_login
		7  |   administrator_login_password  = random_string.password.result
		8  |   sku_name                      = "B_Gen5_2"
		9  |   storage_mb                    = 5120
		10 |   version                       = "10.2"
		11 |   auto_grow_enabled             = true
		12 |   backup_retention_days         = 7
		13 |   geo_redundant_backup_enabled  = false
		14 |   public_network_access_enabled = true
		15 |   #test this i guess
		16 |   ssl_enforcement_enabled = false
		17 | }


Check: CKV_AZURE_47: "Ensure 'Enforce SSL connection' is set to 'ENABLED' for MariaDB servers"
	FAILED for resource: azurerm_mariadb_server.example
	File: /terraform/azurerm/maria/MariaDBPublicAccessDisabled.tf:2-17

		2  | resource "azurerm_mariadb_server" "example" {
		3  |   name                          = var.server_name
		4  |   location                      = var.resource_group.location
		5  |   resource_group_name           = var.resource_group.name
		6  |   administrator_login           = var.admin_login
		7  |   administrator_login_password  = random_string.password.result
		8  |   sku_name                      = "B_Gen5_2"
		9  |   storage_mb                    = 5120
		10 |   version                       = "10.2"
		11 |   auto_grow_enabled             = true
		12 |   backup_retention_days         = 7
		13 |   geo_redundant_backup_enabled  = false
		14 |   public_network_access_enabled = true
		15 |   #test this i guess
		16 |   ssl_enforcement_enabled = false
		17 | }


Check: CKV_AZURE_129: "Ensure that MariaDB server enables geo-redundant backups"
	FAILED for resource: azurerm_mariadb_server.example
	File: /terraform/azurerm/maria/MariaDBSSLEnforcementEnabled.tf:1-16

		1  | resource "azurerm_mariadb_server" "example" {
		2  |   name                          = var.server_name
		3  |   location                      = var.resource_group.location
		4  |   resource_group_name           = var.resource_group.name
		5  |   administrator_login           = var.admin_login
		6  |   administrator_login_password  = random_string.password.result
		7  |   sku_name                      = "B_Gen5_2"
		8  |   storage_mb                    = 5120
		9  |   version                       = "10.2"
		10 |   auto_grow_enabled             = true
		11 |   backup_retention_days         = 7
		12 |   geo_redundant_backup_enabled  = false
		13 |   public_network_access_enabled = false
		14 |   #test this i guess
		15 |   ssl_enforcement_enabled = false
		16 | }


Check: CKV_AZURE_47: "Ensure 'Enforce SSL connection' is set to 'ENABLED' for MariaDB servers"
	FAILED for resource: azurerm_mariadb_server.example
	File: /terraform/azurerm/maria/MariaDBSSLEnforcementEnabled.tf:1-16

		1  | resource "azurerm_mariadb_server" "example" {
		2  |   name                          = var.server_name
		3  |   location                      = var.resource_group.location
		4  |   resource_group_name           = var.resource_group.name
		5  |   administrator_login           = var.admin_login
		6  |   administrator_login_password  = random_string.password.result
		7  |   sku_name                      = "B_Gen5_2"
		8  |   storage_mb                    = 5120
		9  |   version                       = "10.2"
		10 |   auto_grow_enabled             = true
		11 |   backup_retention_days         = 7
		12 |   geo_redundant_backup_enabled  = false
		13 |   public_network_access_enabled = false
		14 |   #test this i guess
		15 |   ssl_enforcement_enabled = false
		16 | }


Check: CKV_AZURE_38: "Ensure audit profile captures all the activities"
	FAILED for resource: azurerm_monitor_log_profile.example
	File: /terraform/azurerm/monitor/MonitorLogProfileCategories.tf:2-15

		2  | resource "azurerm_monitor_log_profile" "example" {
		3  |   name = "default"
		4  |   categories = [
		5  |     "Action"
		6  |   ]
		7  |   locations = [
		8  |     "westus",
		9  |     "global",
		10 |   ]
		11 |   retention_policy {
		12 |     enabled = true
		13 |     days    = 7
		14 |   }
		15 | }


Check: CKV_AZURE_37: "Ensure that Activity Log Retention is set 365 days or greater"
	FAILED for resource: azurerm_monitor_log_profile.example
	File: /terraform/azurerm/monitor/MonitorLogProfileCategories.tf:2-15

		2  | resource "azurerm_monitor_log_profile" "example" {
		3  |   name = "default"
		4  |   categories = [
		5  |     "Action"
		6  |   ]
		7  |   locations = [
		8  |     "westus",
		9  |     "global",
		10 |   ]
		11 |   retention_policy {
		12 |     enabled = true
		13 |     days    = 7
		14 |   }
		15 | }


Check: CKV_AZURE_37: "Ensure that Activity Log Retention is set 365 days or greater"
	FAILED for resource: azurerm_monitor_log_profile.example
	File: /terraform/azurerm/monitor/MonitorLogProfileRetentionDays.tf:2-17

		2  | resource "azurerm_monitor_log_profile" "example" {
		3  |   name = "default"
		4  |   categories = [
		5  |     "Action",
		6  |     "Delete",
		7  |     "Write",
		8  |   ]
		9  |   locations = [
		10 |     "westus",
		11 |     "global",
		12 |   ]
		13 |   retention_policy {
		14 |     enabled = true
		15 |     days    = 7
		16 |   }
		17 | }


Check: CKV_AZURE_38: "Ensure audit profile captures all the activities"
	FAILED for resource: azurerm_monitor_log_profile.fail
	File: /terraform/azurerm/monitor/activity-log-retention-set.tf:2-9

		2 | resource "azurerm_monitor_log_profile" "fail" {
		3 |   name = "fail"
		4 |
		5 |   retention_policy {
		6 |     enabled = true
		7 |     days    = 7
		8 |   }
		9 | }


Check: CKV_AZURE_37: "Ensure that Activity Log Retention is set 365 days or greater"
	FAILED for resource: azurerm_monitor_log_profile.fail
	File: /terraform/azurerm/monitor/activity-log-retention-set.tf:2-9

		2 | resource "azurerm_monitor_log_profile" "fail" {
		3 |   name = "fail"
		4 |
		5 |   retention_policy {
		6 |     enabled = true
		7 |     days    = 7
		8 |   }
		9 | }


Check: CKV_AZURE_38: "Ensure audit profile captures all the activities"
	FAILED for resource: azurerm_monitor_log_profile.fail
	File: /terraform/azurerm/monitor/capture-all-activities.tf:3-12

		3  | resource "azurerm_monitor_log_profile" "fail" {
		4  |   name = "fail"
		5  |
		6  |   categories = []
		7  |
		8  |   retention_policy {
		9  |     enabled = true
		10 |     days    = 7
		11 |   }
		12 | }


Check: CKV_AZURE_37: "Ensure that Activity Log Retention is set 365 days or greater"
	FAILED for resource: azurerm_monitor_log_profile.fail
	File: /terraform/azurerm/monitor/capture-all-activities.tf:3-12

		3  | resource "azurerm_monitor_log_profile" "fail" {
		4  |   name = "fail"
		5  |
		6  |   categories = []
		7  |
		8  |   retention_policy {
		9  |     enabled = true
		10 |     days    = 7
		11 |   }
		12 | }


Check: CKV_AZURE_38: "Ensure audit profile captures all the activities"
	FAILED for resource: azurerm_monitor_log_profile.fail
	File: /terraform/azurerm/monitor/capture-all-regions.tf:2-16

		2  | resource "azurerm_monitor_log_profile" "fail" {
		3  |   name = "fail"
		4  |
		5  |   categories = []
		6  |
		7  |   locations = [
		8  |     "westus",
		9  |     "global",
		10 |   ]
		11 |
		12 |   retention_policy {
		13 |     enabled = true
		14 |     days    = 7
		15 |   }
		16 | }


Check: CKV_AZURE_37: "Ensure that Activity Log Retention is set 365 days or greater"
	FAILED for resource: azurerm_monitor_log_profile.fail
	File: /terraform/azurerm/monitor/capture-all-regions.tf:2-16

		2  | resource "azurerm_monitor_log_profile" "fail" {
		3  |   name = "fail"
		4  |
		5  |   categories = []
		6  |
		7  |   locations = [
		8  |     "westus",
		9  |     "global",
		10 |   ]
		11 |
		12 |   retention_policy {
		13 |     enabled = true
		14 |     days    = 7
		15 |   }
		16 | }


Check: CKV_AZURE_24: "Ensure that 'Auditing' Retention is 'greater than 90 days' for SQL servers"
	FAILED for resource: azurerm_mssql_server.examplea
	File: /terraform/azurerm/mssql/MSSQLServerMinTLSVersion.tf:2-15

		2  | resource "azurerm_mssql_server" "examplea" {
		3  |   name                          = var.server_name
		4  |   resource_group_name           = var.resource_group.name
		5  |   location                      = var.resource_group.location
		6  |   version                       = var.sql["version"]
		7  |   administrator_login           = var.sql["administrator_login"]
		8  |   administrator_login_password  = local.administrator_login_password
		9  |   minimum_tls_version           = "1.1"
		10 |   public_network_access_enabled = var.sql["public_network_access_enabled"]
		11 |   identity {
		12 |     type = "SystemAssigned"
		13 |   }
		14 |   tags = var.common_tags
		15 | }


Check: CKV_AZURE_52: "Ensure MSSQL is using the latest version of TLS encryption"
	FAILED for resource: azurerm_mssql_server.examplea
	File: /terraform/azurerm/mssql/MSSQLServerMinTLSVersion.tf:2-15

		2  | resource "azurerm_mssql_server" "examplea" {
		3  |   name                          = var.server_name
		4  |   resource_group_name           = var.resource_group.name
		5  |   location                      = var.resource_group.location
		6  |   version                       = var.sql["version"]
		7  |   administrator_login           = var.sql["administrator_login"]
		8  |   administrator_login_password  = local.administrator_login_password
		9  |   minimum_tls_version           = "1.1"
		10 |   public_network_access_enabled = var.sql["public_network_access_enabled"]
		11 |   identity {
		12 |     type = "SystemAssigned"
		13 |   }
		14 |   tags = var.common_tags
		15 | }


Check: CKV_AZURE_46: "Specifies a retention period of less than 90 days."
	FAILED for resource: azurerm_mssql_database_extended_auditing_policy.example
	File: /terraform/azurerm/mssql/SQLServerAuditPolicyRetentionPeriod.tf:2-8

		2 | resource "azurerm_mssql_database_extended_auditing_policy" "example" {
		3 |   database_id                             = azurerm_mssql_database.examplea.id
		4 |   storage_endpoint                        = azurerm_storage_account.examplea.primary_blob_endpoint
		5 |   storage_account_access_key              = azurerm_storage_account.examplea.primary_access_key
		6 |   storage_account_access_key_is_secondary = false
		7 |   retention_in_days                       = 89
		8 | }


Check: CKV_AZURE_24: "Ensure that 'Auditing' Retention is 'greater than 90 days' for SQL servers"
	FAILED for resource: azurerm_sql_server.example
	File: /terraform/azurerm/mssql/SQLServerAuditingRetention90Days.tf:2-15

		2  | resource "azurerm_sql_server" "example" {
		3  |   name                         = "mssqlserver"
		4  |   resource_group_name          = azurerm_resource_group.example.name
		5  |   location                     = azurerm_resource_group.example.location
		6  |   version                      = "12.0"
		7  |   administrator_login          = "mradministrator"
		8  |   administrator_login_password = "thisIsDog11"
		9  |   extended_auditing_policy {
		10 |     storage_endpoint                        = azurerm_storage_account.example.primary_blob_endpoint
		11 |     storage_account_access_key              = azurerm_storage_account.example.primary_access_key
		12 |     storage_account_access_key_is_secondary = true
		13 |     retention_in_days                       = 6
		14 |   }
		15 | }


Check: CKV_AZURE_25: "Ensure that 'Threat Detection types' is set to 'All'"
	FAILED for resource: azurerm_mssql_server_security_alert_policy.example
	File: /terraform/azurerm/mssql/SQLServerEmailAlertsToAdminsEnabled.tf:2-13

		2  | resource "azurerm_mssql_server_security_alert_policy" "example" {
		3  |   resource_group_name        = azurerm_resource_group.example.name
		4  |   server_name                = azurerm_sql_server.example.name
		5  |   state                      = "Enabled"
		6  |   storage_endpoint           = azurerm_storage_account.example.primary_blob_endpoint
		7  |   storage_account_access_key = azurerm_storage_account.example.primary_access_key
		8  |   disabled_alerts = [
		9  |     "Sql_Injection",
		10 |     "Data_Exfiltration"
		11 |   ]
		12 |   retention_days = 20
		13 | }


Check: CKV_AZURE_26: "Ensure that 'Send Alerts To' is enabled for MSSQL servers"
	FAILED for resource: azurerm_mssql_server_security_alert_policy.example
	File: /terraform/azurerm/mssql/SQLServerEmailAlertsToAdminsEnabled.tf:2-13

		2  | resource "azurerm_mssql_server_security_alert_policy" "example" {
		3  |   resource_group_name        = azurerm_resource_group.example.name
		4  |   server_name                = azurerm_sql_server.example.name
		5  |   state                      = "Enabled"
		6  |   storage_endpoint           = azurerm_storage_account.example.primary_blob_endpoint
		7  |   storage_account_access_key = azurerm_storage_account.example.primary_access_key
		8  |   disabled_alerts = [
		9  |     "Sql_Injection",
		10 |     "Data_Exfiltration"
		11 |   ]
		12 |   retention_days = 20
		13 | }


Check: CKV_AZURE_27: "Ensure that 'Email service and co-administrators' is 'Enabled' for MSSQL servers"
	FAILED for resource: azurerm_mssql_server_security_alert_policy.example
	File: /terraform/azurerm/mssql/SQLServerEmailAlertsToAdminsEnabled.tf:2-13

		2  | resource "azurerm_mssql_server_security_alert_policy" "example" {
		3  |   resource_group_name        = azurerm_resource_group.example.name
		4  |   server_name                = azurerm_sql_server.example.name
		5  |   state                      = "Enabled"
		6  |   storage_endpoint           = azurerm_storage_account.example.primary_blob_endpoint
		7  |   storage_account_access_key = azurerm_storage_account.example.primary_access_key
		8  |   disabled_alerts = [
		9  |     "Sql_Injection",
		10 |     "Data_Exfiltration"
		11 |   ]
		12 |   retention_days = 20
		13 | }


Check: CKV_AZURE_11: "Ensure no SQL Databases allow ingress from 0.0.0.0/0 (ANY IP)"
	FAILED for resource: azurerm_mysql_firewall_rule.example
	File: /terraform/azurerm/mssql/SQLServerNoPublicAccess.tf:2-8

		2 | resource "azurerm_mysql_firewall_rule" "example" {
		3 |   name                = "office"
		4 |   resource_group_name = azurerm_resource_group.example.name
		5 |   server_name         = azurerm_mysql_server.example.name
		6 |   start_ip_address    = "0.0.0.0"
		7 |   end_ip_address      = "255.255.255.255"
		8 | }


Check: CKV_AZURE_113: "Ensure that SQL server disables public network access"
	FAILED for resource: azurerm_mssql_server.example
	File: /terraform/azurerm/mssql/SQLServerPublicAccessDisabled.tf:2-15

		2  | resource "azurerm_mssql_server" "example" {
		3  |   name                          = "mssqlserver"
		4  |   resource_group_name           = azurerm_resource_group.example.name
		5  |   location                      = azurerm_resource_group.example.location
		6  |   version                       = "12.0"
		7  |   administrator_login           = "missadministrator"
		8  |   administrator_login_password  = "thisIsKat11"
		9  |   minimum_tls_version           = "1.2"
		10 |   public_network_access_enabled = true
		11 |   azuread_administrator {
		12 |     login_username = "AzureAD Admin"
		13 |     object_id      = "00000000-0000-0000-0000-000000000000"
		14 |   }
		15 | }


Check: CKV_AZURE_24: "Ensure that 'Auditing' Retention is 'greater than 90 days' for SQL servers"
	FAILED for resource: azurerm_mssql_server.example
	File: /terraform/azurerm/mssql/SQLServerPublicAccessDisabled.tf:2-15

		2  | resource "azurerm_mssql_server" "example" {
		3  |   name                          = "mssqlserver"
		4  |   resource_group_name           = azurerm_resource_group.example.name
		5  |   location                      = azurerm_resource_group.example.location
		6  |   version                       = "12.0"
		7  |   administrator_login           = "missadministrator"
		8  |   administrator_login_password  = "thisIsKat11"
		9  |   minimum_tls_version           = "1.2"
		10 |   public_network_access_enabled = true
		11 |   azuread_administrator {
		12 |     login_username = "AzureAD Admin"
		13 |     object_id      = "00000000-0000-0000-0000-000000000000"
		14 |   }
		15 | }


Check: CKV_AZURE_25: "Ensure that 'Threat Detection types' is set to 'All'"
	FAILED for resource: azurerm_mssql_server_security_alert_policy.example
	File: /terraform/azurerm/mssql/SQLServerThreatDetectionTypes.tf:2-13

		2  | resource "azurerm_mssql_server_security_alert_policy" "example" {
		3  |   resource_group_name        = azurerm_resource_group.example.name
		4  |   server_name                = azurerm_sql_server.example.name
		5  |   state                      = "Enabled"
		6  |   storage_endpoint           = azurerm_storage_account.example.primary_blob_endpoint
		7  |   storage_account_access_key = azurerm_storage_account.example.primary_access_key
		8  |   disabled_alerts = [
		9  |     "Sql_Injection",
		10 |     "Data_Exfiltration"
		11 |   ]
		12 |   retention_days = 20
		13 | }


Check: CKV_AZURE_26: "Ensure that 'Send Alerts To' is enabled for MSSQL servers"
	FAILED for resource: azurerm_mssql_server_security_alert_policy.example
	File: /terraform/azurerm/mssql/SQLServerThreatDetectionTypes.tf:2-13

		2  | resource "azurerm_mssql_server_security_alert_policy" "example" {
		3  |   resource_group_name        = azurerm_resource_group.example.name
		4  |   server_name                = azurerm_sql_server.example.name
		5  |   state                      = "Enabled"
		6  |   storage_endpoint           = azurerm_storage_account.example.primary_blob_endpoint
		7  |   storage_account_access_key = azurerm_storage_account.example.primary_access_key
		8  |   disabled_alerts = [
		9  |     "Sql_Injection",
		10 |     "Data_Exfiltration"
		11 |   ]
		12 |   retention_days = 20
		13 | }


Check: CKV_AZURE_27: "Ensure that 'Email service and co-administrators' is 'Enabled' for MSSQL servers"
	FAILED for resource: azurerm_mssql_server_security_alert_policy.example
	File: /terraform/azurerm/mssql/SQLServerThreatDetectionTypes.tf:2-13

		2  | resource "azurerm_mssql_server_security_alert_policy" "example" {
		3  |   resource_group_name        = azurerm_resource_group.example.name
		4  |   server_name                = azurerm_sql_server.example.name
		5  |   state                      = "Enabled"
		6  |   storage_endpoint           = azurerm_storage_account.example.primary_blob_endpoint
		7  |   storage_account_access_key = azurerm_storage_account.example.primary_access_key
		8  |   disabled_alerts = [
		9  |     "Sql_Injection",
		10 |     "Data_Exfiltration"
		11 |   ]
		12 |   retention_days = 20
		13 | }


Check: CKV_AZURE_25: "Ensure that 'Threat Detection types' is set to 'All'"
	FAILED for resource: azurerm_mssql_server_security_alert_policy.fail
	File: /terraform/azurerm/mssql/all-threat-alerts-enabled.tf:3-14

		3  | resource "azurerm_mssql_server_security_alert_policy" "fail" {
		4  |   resource_group_name        = azurerm_resource_group.example.name
		5  |   server_name                = azurerm_sql_server.example.name
		6  |   state                      = "Enabled"
		7  |   storage_endpoint           = azurerm_storage_account.example.primary_blob_endpoint
		8  |   storage_account_access_key = azurerm_storage_account.example.primary_access_key
		9  |   disabled_alerts = [
		10 |     "Sql_Injection",
		11 |     "Data_Exfiltration"
		12 |   ]
		13 |   retention_days = 20
		14 | }


Check: CKV_AZURE_26: "Ensure that 'Send Alerts To' is enabled for MSSQL servers"
	FAILED for resource: azurerm_mssql_server_security_alert_policy.fail
	File: /terraform/azurerm/mssql/all-threat-alerts-enabled.tf:3-14

		3  | resource "azurerm_mssql_server_security_alert_policy" "fail" {
		4  |   resource_group_name        = azurerm_resource_group.example.name
		5  |   server_name                = azurerm_sql_server.example.name
		6  |   state                      = "Enabled"
		7  |   storage_endpoint           = azurerm_storage_account.example.primary_blob_endpoint
		8  |   storage_account_access_key = azurerm_storage_account.example.primary_access_key
		9  |   disabled_alerts = [
		10 |     "Sql_Injection",
		11 |     "Data_Exfiltration"
		12 |   ]
		13 |   retention_days = 20
		14 | }


Check: CKV_AZURE_27: "Ensure that 'Email service and co-administrators' is 'Enabled' for MSSQL servers"
	FAILED for resource: azurerm_mssql_server_security_alert_policy.fail
	File: /terraform/azurerm/mssql/all-threat-alerts-enabled.tf:3-14

		3  | resource "azurerm_mssql_server_security_alert_policy" "fail" {
		4  |   resource_group_name        = azurerm_resource_group.example.name
		5  |   server_name                = azurerm_sql_server.example.name
		6  |   state                      = "Enabled"
		7  |   storage_endpoint           = azurerm_storage_account.example.primary_blob_endpoint
		8  |   storage_account_access_key = azurerm_storage_account.example.primary_access_key
		9  |   disabled_alerts = [
		10 |     "Sql_Injection",
		11 |     "Data_Exfiltration"
		12 |   ]
		13 |   retention_days = 20
		14 | }


Check: CKV_AZURE_25: "Ensure that 'Threat Detection types' is set to 'All'"
	FAILED for resource: azurerm_mssql_server_security_alert_policy.fail
	File: /terraform/azurerm/mssql/threat-alert-email-set.tf:3-14

		3  | resource "azurerm_mssql_server_security_alert_policy" "fail" {
		4  |   resource_group_name        = azurerm_resource_group.example.name
		5  |   server_name                = azurerm_sql_server.example.name
		6  |   state                      = "Enabled"
		7  |   storage_endpoint           = azurerm_storage_account.example.primary_blob_endpoint
		8  |   storage_account_access_key = azurerm_storage_account.example.primary_access_key
		9  |   disabled_alerts = [
		10 |     "Sql_Injection",
		11 |     "Data_Exfiltration"
		12 |   ]
		13 |   email_addresses = []
		14 | }


Check: CKV_AZURE_27: "Ensure that 'Email service and co-administrators' is 'Enabled' for MSSQL servers"
	FAILED for resource: azurerm_mssql_server_security_alert_policy.fail
	File: /terraform/azurerm/mssql/threat-alert-email-set.tf:3-14

		3  | resource "azurerm_mssql_server_security_alert_policy" "fail" {
		4  |   resource_group_name        = azurerm_resource_group.example.name
		5  |   server_name                = azurerm_sql_server.example.name
		6  |   state                      = "Enabled"
		7  |   storage_endpoint           = azurerm_storage_account.example.primary_blob_endpoint
		8  |   storage_account_access_key = azurerm_storage_account.example.primary_access_key
		9  |   disabled_alerts = [
		10 |     "Sql_Injection",
		11 |     "Data_Exfiltration"
		12 |   ]
		13 |   email_addresses = []
		14 | }


Check: CKV_AZURE_26: "Ensure that 'Send Alerts To' is enabled for MSSQL servers"
	FAILED for resource: azurerm_mssql_server_security_alert_policy.fail
	File: /terraform/azurerm/mssql/threat-alert-email-to-owner.tf:3-12

		3  | resource "azurerm_mssql_server_security_alert_policy" "fail" {
		4  |   resource_group_name        = azurerm_resource_group.example.name
		5  |   server_name                = azurerm_sql_server.example.name
		6  |   state                      = "Enabled"
		7  |   storage_endpoint           = azurerm_storage_account.example.primary_blob_endpoint
		8  |   storage_account_access_key = azurerm_storage_account.example.primary_access_key
		9  |   disabled_alerts = [
		10 |   ]
		11 |   email_account_admins = false
		12 | }


Check: CKV_AZURE_27: "Ensure that 'Email service and co-administrators' is 'Enabled' for MSSQL servers"
	FAILED for resource: azurerm_mssql_server_security_alert_policy.fail
	File: /terraform/azurerm/mssql/threat-alert-email-to-owner.tf:3-12

		3  | resource "azurerm_mssql_server_security_alert_policy" "fail" {
		4  |   resource_group_name        = azurerm_resource_group.example.name
		5  |   server_name                = azurerm_sql_server.example.name
		6  |   state                      = "Enabled"
		7  |   storage_endpoint           = azurerm_storage_account.example.primary_blob_endpoint
		8  |   storage_account_access_key = azurerm_storage_account.example.primary_access_key
		9  |   disabled_alerts = [
		10 |   ]
		11 |   email_account_admins = false
		12 | }


Check: CKV_AZURE_96: "Ensure that MySQL server enables infrastructure encryption"
	FAILED for resource: azurerm_mysql_server.example
	File: /terraform/azurerm/mysql/MySQLEncryptionEnaled.tf:2-20

		2  | resource "azurerm_mysql_server" "example" {
		3  |   name                = "example-psqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "psqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "GP_Gen5_4"
		11 |   version    = "9.6"
		12 |   storage_mb = 640000
		13 |
		14 |   backup_retention_days             = 7
		15 |   infrastructure_encryption_enabled = false
		16 |   auto_grow_enabled                 = true
		17 |   public_network_access_enabled     = true
		18 |   ssl_enforcement_enabled           = true
		19 |   ssl_minimal_tls_version_enforced  = "TLS1_2"
		20 | }


Check: CKV_AZURE_127: "Ensure that My SQL server enables Threat detection policy"
	FAILED for resource: azurerm_mysql_server.example
	File: /terraform/azurerm/mysql/MySQLEncryptionEnaled.tf:2-20

		2  | resource "azurerm_mysql_server" "example" {
		3  |   name                = "example-psqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "psqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "GP_Gen5_4"
		11 |   version    = "9.6"
		12 |   storage_mb = 640000
		13 |
		14 |   backup_retention_days             = 7
		15 |   infrastructure_encryption_enabled = false
		16 |   auto_grow_enabled                 = true
		17 |   public_network_access_enabled     = true
		18 |   ssl_enforcement_enabled           = true
		19 |   ssl_minimal_tls_version_enforced  = "TLS1_2"
		20 | }


Check: CKV_AZURE_94: "Ensure that My SQL server enables geo-redundant backups"
	FAILED for resource: azurerm_mysql_server.example
	File: /terraform/azurerm/mysql/MySQLEncryptionEnaled.tf:2-20

		2  | resource "azurerm_mysql_server" "example" {
		3  |   name                = "example-psqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "psqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "GP_Gen5_4"
		11 |   version    = "9.6"
		12 |   storage_mb = 640000
		13 |
		14 |   backup_retention_days             = 7
		15 |   infrastructure_encryption_enabled = false
		16 |   auto_grow_enabled                 = true
		17 |   public_network_access_enabled     = true
		18 |   ssl_enforcement_enabled           = true
		19 |   ssl_minimal_tls_version_enforced  = "TLS1_2"
		20 | }


Check: CKV_AZURE_53: "Ensure 'public network access enabled' is set to 'False' for mySQL servers"
	FAILED for resource: azurerm_mysql_server.example
	File: /terraform/azurerm/mysql/MySQLEncryptionEnaled.tf:2-20

		2  | resource "azurerm_mysql_server" "example" {
		3  |   name                = "example-psqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "psqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "GP_Gen5_4"
		11 |   version    = "9.6"
		12 |   storage_mb = 640000
		13 |
		14 |   backup_retention_days             = 7
		15 |   infrastructure_encryption_enabled = false
		16 |   auto_grow_enabled                 = true
		17 |   public_network_access_enabled     = true
		18 |   ssl_enforcement_enabled           = true
		19 |   ssl_minimal_tls_version_enforced  = "TLS1_2"
		20 | }


Check: CKV_AZURE_54: "Ensure MySQL is using the latest version of TLS encryption"
	FAILED for resource: azurerm_mysql_server.example
	File: /terraform/azurerm/mysql/MySQLGeoBackupEnabled.tf:2-18

		2  | resource "azurerm_mysql_server" "example" {
		3  |   name                = var.mysqlserver_name
		4  |   location            = var.resource_group.location
		5  |   resource_group_name = var.resource_group.name
		6  |
		7  |   administrator_login          = var.admin_name
		8  |   administrator_login_password = var.password
		9  |   sku_name                     = var.sku_name
		10 |   storage_mb                   = var.storage_mb
		11 |   version                      = var.server_version
		12 |
		13 |   auto_grow_enabled                 = true
		14 |   backup_retention_days             = 7
		15 |   geo_redundant_backup_enabled      = false
		16 |   infrastructure_encryption_enabled = false
		17 |   public_network_access_enabled     = true
		18 | }


Check: CKV_AZURE_96: "Ensure that MySQL server enables infrastructure encryption"
	FAILED for resource: azurerm_mysql_server.example
	File: /terraform/azurerm/mysql/MySQLGeoBackupEnabled.tf:2-18

		2  | resource "azurerm_mysql_server" "example" {
		3  |   name                = var.mysqlserver_name
		4  |   location            = var.resource_group.location
		5  |   resource_group_name = var.resource_group.name
		6  |
		7  |   administrator_login          = var.admin_name
		8  |   administrator_login_password = var.password
		9  |   sku_name                     = var.sku_name
		10 |   storage_mb                   = var.storage_mb
		11 |   version                      = var.server_version
		12 |
		13 |   auto_grow_enabled                 = true
		14 |   backup_retention_days             = 7
		15 |   geo_redundant_backup_enabled      = false
		16 |   infrastructure_encryption_enabled = false
		17 |   public_network_access_enabled     = true
		18 | }


Check: CKV_AZURE_127: "Ensure that My SQL server enables Threat detection policy"
	FAILED for resource: azurerm_mysql_server.example
	File: /terraform/azurerm/mysql/MySQLGeoBackupEnabled.tf:2-18

		2  | resource "azurerm_mysql_server" "example" {
		3  |   name                = var.mysqlserver_name
		4  |   location            = var.resource_group.location
		5  |   resource_group_name = var.resource_group.name
		6  |
		7  |   administrator_login          = var.admin_name
		8  |   administrator_login_password = var.password
		9  |   sku_name                     = var.sku_name
		10 |   storage_mb                   = var.storage_mb
		11 |   version                      = var.server_version
		12 |
		13 |   auto_grow_enabled                 = true
		14 |   backup_retention_days             = 7
		15 |   geo_redundant_backup_enabled      = false
		16 |   infrastructure_encryption_enabled = false
		17 |   public_network_access_enabled     = true
		18 | }


Check: CKV_AZURE_28: "Ensure 'Enforce SSL connection' is set to 'ENABLED' for MySQL Database Server"
	FAILED for resource: azurerm_mysql_server.example
	File: /terraform/azurerm/mysql/MySQLGeoBackupEnabled.tf:2-18

		2  | resource "azurerm_mysql_server" "example" {
		3  |   name                = var.mysqlserver_name
		4  |   location            = var.resource_group.location
		5  |   resource_group_name = var.resource_group.name
		6  |
		7  |   administrator_login          = var.admin_name
		8  |   administrator_login_password = var.password
		9  |   sku_name                     = var.sku_name
		10 |   storage_mb                   = var.storage_mb
		11 |   version                      = var.server_version
		12 |
		13 |   auto_grow_enabled                 = true
		14 |   backup_retention_days             = 7
		15 |   geo_redundant_backup_enabled      = false
		16 |   infrastructure_encryption_enabled = false
		17 |   public_network_access_enabled     = true
		18 | }


Check: CKV_AZURE_94: "Ensure that My SQL server enables geo-redundant backups"
	FAILED for resource: azurerm_mysql_server.example
	File: /terraform/azurerm/mysql/MySQLGeoBackupEnabled.tf:2-18

		2  | resource "azurerm_mysql_server" "example" {
		3  |   name                = var.mysqlserver_name
		4  |   location            = var.resource_group.location
		5  |   resource_group_name = var.resource_group.name
		6  |
		7  |   administrator_login          = var.admin_name
		8  |   administrator_login_password = var.password
		9  |   sku_name                     = var.sku_name
		10 |   storage_mb                   = var.storage_mb
		11 |   version                      = var.server_version
		12 |
		13 |   auto_grow_enabled                 = true
		14 |   backup_retention_days             = 7
		15 |   geo_redundant_backup_enabled      = false
		16 |   infrastructure_encryption_enabled = false
		17 |   public_network_access_enabled     = true
		18 | }


Check: CKV_AZURE_53: "Ensure 'public network access enabled' is set to 'False' for mySQL servers"
	FAILED for resource: azurerm_mysql_server.example
	File: /terraform/azurerm/mysql/MySQLGeoBackupEnabled.tf:2-18

		2  | resource "azurerm_mysql_server" "example" {
		3  |   name                = var.mysqlserver_name
		4  |   location            = var.resource_group.location
		5  |   resource_group_name = var.resource_group.name
		6  |
		7  |   administrator_login          = var.admin_name
		8  |   administrator_login_password = var.password
		9  |   sku_name                     = var.sku_name
		10 |   storage_mb                   = var.storage_mb
		11 |   version                      = var.server_version
		12 |
		13 |   auto_grow_enabled                 = true
		14 |   backup_retention_days             = 7
		15 |   geo_redundant_backup_enabled      = false
		16 |   infrastructure_encryption_enabled = false
		17 |   public_network_access_enabled     = true
		18 | }


Check: CKV_AZURE_54: "Ensure MySQL is using the latest version of TLS encryption"
	FAILED for resource: azurerm_mysql_server.examplea
	File: /terraform/azurerm/mysql/MySQLPublicAccessDisabled.tf:2-18

		2  | resource "azurerm_mysql_server" "examplea" {
		3  |   name                = var.mysqlserver_name
		4  |   location            = var.resource_group.location
		5  |   resource_group_name = var.resource_group.name
		6  |
		7  |   administrator_login          = var.admin_name
		8  |   administrator_login_password = var.password
		9  |   sku_name                     = var.sku_name
		10 |   storage_mb                   = var.storage_mb
		11 |   version                      = var.server_version
		12 |
		13 |   auto_grow_enabled                 = true
		14 |   backup_retention_days             = 7
		15 |   geo_redundant_backup_enabled      = false
		16 |   infrastructure_encryption_enabled = false
		17 |   public_network_access_enabled     = true
		18 | }


Check: CKV_AZURE_96: "Ensure that MySQL server enables infrastructure encryption"
	FAILED for resource: azurerm_mysql_server.examplea
	File: /terraform/azurerm/mysql/MySQLPublicAccessDisabled.tf:2-18

		2  | resource "azurerm_mysql_server" "examplea" {
		3  |   name                = var.mysqlserver_name
		4  |   location            = var.resource_group.location
		5  |   resource_group_name = var.resource_group.name
		6  |
		7  |   administrator_login          = var.admin_name
		8  |   administrator_login_password = var.password
		9  |   sku_name                     = var.sku_name
		10 |   storage_mb                   = var.storage_mb
		11 |   version                      = var.server_version
		12 |
		13 |   auto_grow_enabled                 = true
		14 |   backup_retention_days             = 7
		15 |   geo_redundant_backup_enabled      = false
		16 |   infrastructure_encryption_enabled = false
		17 |   public_network_access_enabled     = true
		18 | }


Check: CKV_AZURE_127: "Ensure that My SQL server enables Threat detection policy"
	FAILED for resource: azurerm_mysql_server.examplea
	File: /terraform/azurerm/mysql/MySQLPublicAccessDisabled.tf:2-18

		2  | resource "azurerm_mysql_server" "examplea" {
		3  |   name                = var.mysqlserver_name
		4  |   location            = var.resource_group.location
		5  |   resource_group_name = var.resource_group.name
		6  |
		7  |   administrator_login          = var.admin_name
		8  |   administrator_login_password = var.password
		9  |   sku_name                     = var.sku_name
		10 |   storage_mb                   = var.storage_mb
		11 |   version                      = var.server_version
		12 |
		13 |   auto_grow_enabled                 = true
		14 |   backup_retention_days             = 7
		15 |   geo_redundant_backup_enabled      = false
		16 |   infrastructure_encryption_enabled = false
		17 |   public_network_access_enabled     = true
		18 | }


Check: CKV_AZURE_28: "Ensure 'Enforce SSL connection' is set to 'ENABLED' for MySQL Database Server"
	FAILED for resource: azurerm_mysql_server.examplea
	File: /terraform/azurerm/mysql/MySQLPublicAccessDisabled.tf:2-18

		2  | resource "azurerm_mysql_server" "examplea" {
		3  |   name                = var.mysqlserver_name
		4  |   location            = var.resource_group.location
		5  |   resource_group_name = var.resource_group.name
		6  |
		7  |   administrator_login          = var.admin_name
		8  |   administrator_login_password = var.password
		9  |   sku_name                     = var.sku_name
		10 |   storage_mb                   = var.storage_mb
		11 |   version                      = var.server_version
		12 |
		13 |   auto_grow_enabled                 = true
		14 |   backup_retention_days             = 7
		15 |   geo_redundant_backup_enabled      = false
		16 |   infrastructure_encryption_enabled = false
		17 |   public_network_access_enabled     = true
		18 | }


Check: CKV_AZURE_94: "Ensure that My SQL server enables geo-redundant backups"
	FAILED for resource: azurerm_mysql_server.examplea
	File: /terraform/azurerm/mysql/MySQLPublicAccessDisabled.tf:2-18

		2  | resource "azurerm_mysql_server" "examplea" {
		3  |   name                = var.mysqlserver_name
		4  |   location            = var.resource_group.location
		5  |   resource_group_name = var.resource_group.name
		6  |
		7  |   administrator_login          = var.admin_name
		8  |   administrator_login_password = var.password
		9  |   sku_name                     = var.sku_name
		10 |   storage_mb                   = var.storage_mb
		11 |   version                      = var.server_version
		12 |
		13 |   auto_grow_enabled                 = true
		14 |   backup_retention_days             = 7
		15 |   geo_redundant_backup_enabled      = false
		16 |   infrastructure_encryption_enabled = false
		17 |   public_network_access_enabled     = true
		18 | }


Check: CKV_AZURE_53: "Ensure 'public network access enabled' is set to 'False' for mySQL servers"
	FAILED for resource: azurerm_mysql_server.examplea
	File: /terraform/azurerm/mysql/MySQLPublicAccessDisabled.tf:2-18

		2  | resource "azurerm_mysql_server" "examplea" {
		3  |   name                = var.mysqlserver_name
		4  |   location            = var.resource_group.location
		5  |   resource_group_name = var.resource_group.name
		6  |
		7  |   administrator_login          = var.admin_name
		8  |   administrator_login_password = var.password
		9  |   sku_name                     = var.sku_name
		10 |   storage_mb                   = var.storage_mb
		11 |   version                      = var.server_version
		12 |
		13 |   auto_grow_enabled                 = true
		14 |   backup_retention_days             = 7
		15 |   geo_redundant_backup_enabled      = false
		16 |   infrastructure_encryption_enabled = false
		17 |   public_network_access_enabled     = true
		18 | }


Check: CKV_AZURE_54: "Ensure MySQL is using the latest version of TLS encryption"
	FAILED for resource: azurerm_mysql_server.examplea
	File: /terraform/azurerm/mysql/MySQLServerMinTLSVersion.tf:2-21

		2  | resource "azurerm_mysql_server" "examplea" {
		3  |   name                = "example-mysqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "mysqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "B_Gen5_2"
		11 |   storage_mb = 5120
		12 |   version    = "5.7"
		13 |
		14 |   auto_grow_enabled                 = true
		15 |   backup_retention_days             = 7
		16 |   geo_redundant_backup_enabled      = true
		17 |   infrastructure_encryption_enabled = true
		18 |   public_network_access_enabled     = false
		19 |   ssl_enforcement_enabled           = false
		20 |   ssl_minimal_tls_version_enforced  = "TLS1_1"
		21 | }


Check: CKV_AZURE_127: "Ensure that My SQL server enables Threat detection policy"
	FAILED for resource: azurerm_mysql_server.examplea
	File: /terraform/azurerm/mysql/MySQLServerMinTLSVersion.tf:2-21

		2  | resource "azurerm_mysql_server" "examplea" {
		3  |   name                = "example-mysqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "mysqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "B_Gen5_2"
		11 |   storage_mb = 5120
		12 |   version    = "5.7"
		13 |
		14 |   auto_grow_enabled                 = true
		15 |   backup_retention_days             = 7
		16 |   geo_redundant_backup_enabled      = true
		17 |   infrastructure_encryption_enabled = true
		18 |   public_network_access_enabled     = false
		19 |   ssl_enforcement_enabled           = false
		20 |   ssl_minimal_tls_version_enforced  = "TLS1_1"
		21 | }


Check: CKV_AZURE_28: "Ensure 'Enforce SSL connection' is set to 'ENABLED' for MySQL Database Server"
	FAILED for resource: azurerm_mysql_server.examplea
	File: /terraform/azurerm/mysql/MySQLServerMinTLSVersion.tf:2-21

		2  | resource "azurerm_mysql_server" "examplea" {
		3  |   name                = "example-mysqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "mysqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "B_Gen5_2"
		11 |   storage_mb = 5120
		12 |   version    = "5.7"
		13 |
		14 |   auto_grow_enabled                 = true
		15 |   backup_retention_days             = 7
		16 |   geo_redundant_backup_enabled      = true
		17 |   infrastructure_encryption_enabled = true
		18 |   public_network_access_enabled     = false
		19 |   ssl_enforcement_enabled           = false
		20 |   ssl_minimal_tls_version_enforced  = "TLS1_1"
		21 | }


Check: CKV_AZURE_127: "Ensure that My SQL server enables Threat detection policy"
	FAILED for resource: azurerm_mysql_server.example
	File: /terraform/azurerm/mysql/MySQLServerSSLEnforcementEnabled.tf:2-21

		2  | resource "azurerm_mysql_server" "example" {
		3  |   name                = "example-mysqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "mysqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "B_Gen5_2"
		11 |   storage_mb = 5120
		12 |   version    = "5.7"
		13 |
		14 |   auto_grow_enabled                 = true
		15 |   backup_retention_days             = 7
		16 |   geo_redundant_backup_enabled      = true
		17 |   infrastructure_encryption_enabled = true
		18 |   public_network_access_enabled     = false
		19 |   ssl_enforcement_enabled           = false
		20 |   ssl_minimal_tls_version_enforced  = "TLS1_2"
		21 | }


Check: CKV_AZURE_28: "Ensure 'Enforce SSL connection' is set to 'ENABLED' for MySQL Database Server"
	FAILED for resource: azurerm_mysql_server.example
	File: /terraform/azurerm/mysql/MySQLServerSSLEnforcementEnabled.tf:2-21

		2  | resource "azurerm_mysql_server" "example" {
		3  |   name                = "example-mysqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "mysqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "B_Gen5_2"
		11 |   storage_mb = 5120
		12 |   version    = "5.7"
		13 |
		14 |   auto_grow_enabled                 = true
		15 |   backup_retention_days             = 7
		16 |   geo_redundant_backup_enabled      = true
		17 |   infrastructure_encryption_enabled = true
		18 |   public_network_access_enabled     = false
		19 |   ssl_enforcement_enabled           = false
		20 |   ssl_minimal_tls_version_enforced  = "TLS1_2"
		21 | }


Check: CKV_AZURE_127: "Ensure that My SQL server enables Threat detection policy"
	FAILED for resource: azurerm_mysql_server.example
	File: /terraform/azurerm/mysql/MySQLTreatDetectionEnabled.tf:2-25

		2  | resource "azurerm_mysql_server" "example" {
		3  |   name                = "example-mysqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "mysqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "B_Gen5_2"
		11 |   storage_mb = 5120
		12 |   version    = "5.7"
		13 |
		14 |   auto_grow_enabled                 = true
		15 |   backup_retention_days             = 7
		16 |   geo_redundant_backup_enabled      = true
		17 |   infrastructure_encryption_enabled = true
		18 |   public_network_access_enabled     = false
		19 |   ssl_enforcement_enabled           = false
		20 |   ssl_minimal_tls_version_enforced  = "TLS1_2"
		21 |
		22 |   threat_detection_policy {
		23 |     enabled = false
		24 |   }
		25 | }


Check: CKV_AZURE_28: "Ensure 'Enforce SSL connection' is set to 'ENABLED' for MySQL Database Server"
	FAILED for resource: azurerm_mysql_server.example
	File: /terraform/azurerm/mysql/MySQLTreatDetectionEnabled.tf:2-25

		2  | resource "azurerm_mysql_server" "example" {
		3  |   name                = "example-mysqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "mysqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "B_Gen5_2"
		11 |   storage_mb = 5120
		12 |   version    = "5.7"
		13 |
		14 |   auto_grow_enabled                 = true
		15 |   backup_retention_days             = 7
		16 |   geo_redundant_backup_enabled      = true
		17 |   infrastructure_encryption_enabled = true
		18 |   public_network_access_enabled     = false
		19 |   ssl_enforcement_enabled           = false
		20 |   ssl_minimal_tls_version_enforced  = "TLS1_2"
		21 |
		22 |   threat_detection_policy {
		23 |     enabled = false
		24 |   }
		25 | }


Check: CKV_AZURE_10: "Ensure that SSH access is restricted from the internet"
	FAILED for resource: azurerm_network_security_rule.example
	File: /terraform/azurerm/network/NSGRuleRDPAccessRestricted.tf:2-14

		2  | resource "azurerm_network_security_rule" "example" {
		3  |   name                        = "test123"
		4  |   priority                    = 100
		5  |   direction                   = "Inbound"
		6  |   access                      = "Allow"
		7  |   protocol                    = "TCP"
		8  |   source_port_range           = "*"
		9  |   destination_port_range      = ["3380-3390", "22"]
		10 |   source_address_prefix       = "*"
		11 |   destination_address_prefix  = "*"
		12 |   resource_group_name         = azurerm_resource_group.example.name
		13 |   network_security_group_name = azurerm_network_security_group.example.name
		14 | }


Check: CKV_AZURE_10: "Ensure that SSH access is restricted from the internet"
	FAILED for resource: azurerm_network_security_rule.example
	File: /terraform/azurerm/network/NSGRuleSSHAccessRestricted.tf:2-14

		2  | resource "azurerm_network_security_rule" "example" {
		3  |   name                        = "test123"
		4  |   priority                    = 100
		5  |   direction                   = "Inbound"
		6  |   access                      = "Allow"
		7  |   protocol                    = "TCP"
		8  |   source_port_range           = "*"
		9  |   destination_port_range      = "22"
		10 |   source_address_prefix       = "*"
		11 |   destination_address_prefix  = "*"
		12 |   resource_group_name         = azurerm_resource_group.example.name
		13 |   network_security_group_name = azurerm_network_security_group.example.name
		14 | }


Check: CKV_AZURE_77: "Ensure that UDP Services are restricted from the Internet "
	FAILED for resource: azurerm_network_security_group.example
	File: /terraform/azurerm/network/NSGRuleUDPAccessRestricted.tf:2-22

		2  | resource "azurerm_network_security_group" "example" {
		3  |   name                = "acceptanceTestSecurityGroup1"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   security_rule {
		8  |     name                       = "test123"
		9  |     priority                   = 100
		10 |     direction                  = "Inbound"
		11 |     access                     = "Allow"
		12 |     protocol                   = "Udp"
		13 |     source_port_range          = "*"
		14 |     destination_port_range     = "*"
		15 |     source_address_prefix      = "*"
		16 |     destination_address_prefix = "*"
		17 |   }
		18 |
		19 |   tags = {
		20 |     environment = "Production"
		21 |   }
		22 | }


Check: CKV_AZURE_118: "Ensure that Network Interfaces disable IP forwarding"
	FAILED for resource: azurerm_network_interface.example
	File: /terraform/azurerm/network/NetworkInterfaceEnableIPForwarding.tf:2-13

		2  | resource "azurerm_network_interface" "example" {
		3  |   name                = "example-nic"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   ip_configuration {
		8  |     name                          = "internal"
		9  |     subnet_id                     = azurerm_subnet.example.id
		10 |     private_ip_address_allocation = "Dynamic"
		11 |   }
		12 |   enable_ip_forwarding = true
		13 | }


Check: CKV_AZURE_12: "Ensure that Network Security Group Flow Log retention period is 'greater than 90 days'"
	FAILED for resource: azurerm_network_watcher_flow_log.test
	File: /terraform/azurerm/network/NetworkWatcherFlowLogPeriod.tf:2-13

		2  | resource "azurerm_network_watcher_flow_log" "test" {
		3  |   network_watcher_name      = azurerm_network_watcher.test.name
		4  |   resource_group_name       = azurerm_resource_group.test.name
		5  |   network_security_group_id = azurerm_network_security_group.test.id
		6  |   storage_account_id        = azurerm_storage_account.test.id
		7  |   enabled                   = true
		8  |
		9  |   retention_policy {
		10 |     enabled = true
		11 |     days    = 7
		12 |   }
		13 | }


Check: CKV_AZURE_9: "Ensure that RDP access is restricted from the internet"
	FAILED for resource: azurerm_network_security_rule.fail
	File: /terraform/azurerm/network/disable-rdp-from-internet.tf:3-12

		3  | resource "azurerm_network_security_rule" "fail" {
		4  |   name                       = "fail_security_rule"
		5  |   direction                  = "Inbound"
		6  |   access                     = "Allow"
		7  |   protocol                   = "TCP"
		8  |   source_port_range          = "*"
		9  |   destination_port_range     = ["3389"]
		10 |   source_address_prefix      = "*"
		11 |   destination_address_prefix = "*"
		12 | }


Check: CKV_AZURE_12: "Ensure that Network Security Group Flow Log retention period is 'greater than 90 days'"
	FAILED for resource: azurerm_network_watcher_flow_log.bad_watcher
	File: /terraform/azurerm/network/retention-policy-set.tf:3-15

		3  | resource "azurerm_network_watcher_flow_log" "bad_watcher" {
		4  |   network_watcher_name = "bad_watcher"
		5  |   resource_group_name  = "resource-group"
		6  |
		7  |   network_security_group_id = azurerm_network_security_group.test.id
		8  |   storage_account_id        = azurerm_storage_account.test.id
		9  |   enabled                   = true
		10 |
		11 |   retention_policy {
		12 |     enabled = true
		13 |     days    = 7
		14 |   }
		15 | }


Check: CKV_AZURE_10: "Ensure that SSH access is restricted from the internet"
	FAILED for resource: azurerm_network_security_rule.fail
	File: /terraform/azurerm/network/ssh-blocked-from-internet.tf:2-11

		2  | resource "azurerm_network_security_rule" "fail" {
		3  |   name                       = "fail_security_rule"
		4  |   direction                  = "Inbound"
		5  |   access                     = "Allow"
		6  |   protocol                   = "TCP"
		7  |   source_port_range          = "*"
		8  |   destination_port_range     = ["22"]
		9  |   source_address_prefix      = "*"
		10 |   destination_address_prefix = "*"
		11 | }


Check: CKV_AZURE_68: "Ensure that PostgreSQL server disables public network access"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/postgreSQL/PostgersSQLEncryptionEnaled.tf:2-20

		2  | resource "azurerm_postgresql_server" "example" {
		3  |   name                = "example-psqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "psqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "GP_Gen5_4"
		11 |   version    = "9.6"
		12 |   storage_mb = 640000
		13 |
		14 |   backup_retention_days             = 7
		15 |   infrastructure_encryption_enabled = false
		16 |   auto_grow_enabled                 = true
		17 |   public_network_access_enabled     = true
		18 |   ssl_enforcement_enabled           = true
		19 |   ssl_minimal_tls_version_enforced  = "TLS1_2"
		20 | }


Check: CKV_AZURE_128: "Ensure that PostgreSQL server enables Threat detection policy"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/postgreSQL/PostgersSQLEncryptionEnaled.tf:2-20

		2  | resource "azurerm_postgresql_server" "example" {
		3  |   name                = "example-psqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "psqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "GP_Gen5_4"
		11 |   version    = "9.6"
		12 |   storage_mb = 640000
		13 |
		14 |   backup_retention_days             = 7
		15 |   infrastructure_encryption_enabled = false
		16 |   auto_grow_enabled                 = true
		17 |   public_network_access_enabled     = true
		18 |   ssl_enforcement_enabled           = true
		19 |   ssl_minimal_tls_version_enforced  = "TLS1_2"
		20 | }


Check: CKV_AZURE_130: "Ensure that PostgreSQL server enables infrastructure encryption"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/postgreSQL/PostgersSQLEncryptionEnaled.tf:2-20

		2  | resource "azurerm_postgresql_server" "example" {
		3  |   name                = "example-psqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "psqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "GP_Gen5_4"
		11 |   version    = "9.6"
		12 |   storage_mb = 640000
		13 |
		14 |   backup_retention_days             = 7
		15 |   infrastructure_encryption_enabled = false
		16 |   auto_grow_enabled                 = true
		17 |   public_network_access_enabled     = true
		18 |   ssl_enforcement_enabled           = true
		19 |   ssl_minimal_tls_version_enforced  = "TLS1_2"
		20 | }


Check: CKV_AZURE_102: "Ensure that PostgreSQL server enables geo-redundant backups"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/postgreSQL/PostgersSQLEncryptionEnaled.tf:2-20

		2  | resource "azurerm_postgresql_server" "example" {
		3  |   name                = "example-psqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "psqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "GP_Gen5_4"
		11 |   version    = "9.6"
		12 |   storage_mb = 640000
		13 |
		14 |   backup_retention_days             = 7
		15 |   infrastructure_encryption_enabled = false
		16 |   auto_grow_enabled                 = true
		17 |   public_network_access_enabled     = true
		18 |   ssl_enforcement_enabled           = true
		19 |   ssl_minimal_tls_version_enforced  = "TLS1_2"
		20 | }


Check: CKV_AZURE_32: "Ensure server parameter 'connection_throttling' is set to 'ON' for PostgreSQL Database Server"
	FAILED for resource: azurerm_postgresql_configuration.example
	File: /terraform/azurerm/postgreSQL/PostgreSQLServerConnectionThrottlingEnabled.tf:2-7

		2 | resource "azurerm_postgresql_configuration" "example" {
		3 |   name                = "connection_throttling"
		4 |   resource_group_name = data.azurerm_resource_group.example.name
		5 |   server_name         = azurerm_postgresql_server.example.name
		6 |   value               = "off"
		7 | }


Check: CKV_AZURE_30: "Ensure server parameter 'log_checkpoints' is set to 'ON' for PostgreSQL Database Server"
	FAILED for resource: azurerm_postgresql_configuration.example
	File: /terraform/azurerm/postgreSQL/PostgreSQLServerLogCheckpointEnabled.tf:2-7

		2 | resource "azurerm_postgresql_configuration" "example" {
		3 |   name                = "log_checkpoints"
		4 |   resource_group_name = data.azurerm_resource_group.example.name
		5 |   server_name         = azurerm_postgresql_server.example.name
		6 |   value               = "off"
		7 | }


Check: CKV_AZURE_31: "Ensure server parameter 'log_connections' is set to 'ON' for PostgreSQL Database Server"
	FAILED for resource: azurerm_postgresql_configuration.example
	File: /terraform/azurerm/postgreSQL/PostgreSQLServerLogConnectionsEnabled.tf:2-7

		2 | resource "azurerm_postgresql_configuration" "example" {
		3 |   name                = "log_connections"
		4 |   resource_group_name = data.azurerm_resource_group.example.name
		5 |   server_name         = azurerm_postgresql_server.example.name
		6 |   value               = "off"
		7 | }


Check: CKV_AZURE_68: "Ensure that PostgreSQL server disables public network access"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/postgreSQL/PostgreSQLServerPublicAccessDisabled.tf:2-21

		2  | resource "azurerm_postgresql_server" "example" {
		3  |   name                = "example-psqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "psqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "GP_Gen5_4"
		11 |   version    = "9.6"
		12 |   storage_mb = 640000
		13 |
		14 |   backup_retention_days        = 7
		15 |   geo_redundant_backup_enabled = true
		16 |   auto_grow_enabled            = true
		17 |
		18 |   public_network_access_enabled    = true
		19 |   ssl_enforcement_enabled          = true
		20 |   ssl_minimal_tls_version_enforced = "TLS1_2"
		21 | }


Check: CKV_AZURE_128: "Ensure that PostgreSQL server enables Threat detection policy"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/postgreSQL/PostgreSQLServerPublicAccessDisabled.tf:2-21

		2  | resource "azurerm_postgresql_server" "example" {
		3  |   name                = "example-psqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "psqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "GP_Gen5_4"
		11 |   version    = "9.6"
		12 |   storage_mb = 640000
		13 |
		14 |   backup_retention_days        = 7
		15 |   geo_redundant_backup_enabled = true
		16 |   auto_grow_enabled            = true
		17 |
		18 |   public_network_access_enabled    = true
		19 |   ssl_enforcement_enabled          = true
		20 |   ssl_minimal_tls_version_enforced = "TLS1_2"
		21 | }


Check: CKV_AZURE_130: "Ensure that PostgreSQL server enables infrastructure encryption"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/postgreSQL/PostgreSQLServerPublicAccessDisabled.tf:2-21

		2  | resource "azurerm_postgresql_server" "example" {
		3  |   name                = "example-psqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "psqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "GP_Gen5_4"
		11 |   version    = "9.6"
		12 |   storage_mb = 640000
		13 |
		14 |   backup_retention_days        = 7
		15 |   geo_redundant_backup_enabled = true
		16 |   auto_grow_enabled            = true
		17 |
		18 |   public_network_access_enabled    = true
		19 |   ssl_enforcement_enabled          = true
		20 |   ssl_minimal_tls_version_enforced = "TLS1_2"
		21 | }


Check: CKV_AZURE_128: "Ensure that PostgreSQL server enables Threat detection policy"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/postgreSQL/PostgreSQLServerSSLEnforcementEnabled.tf:2-21

		2  | resource "azurerm_postgresql_server" "example" {
		3  |   name                = "example-psqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "psqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "GP_Gen5_4"
		11 |   version    = "9.6"
		12 |   storage_mb = 640000
		13 |
		14 |   backup_retention_days        = 7
		15 |   geo_redundant_backup_enabled = true
		16 |   auto_grow_enabled            = true
		17 |
		18 |   public_network_access_enabled    = false
		19 |   ssl_enforcement_enabled          = false
		20 |   ssl_minimal_tls_version_enforced = "TLS1_2"
		21 | }


Check: CKV_AZURE_130: "Ensure that PostgreSQL server enables infrastructure encryption"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/postgreSQL/PostgreSQLServerSSLEnforcementEnabled.tf:2-21

		2  | resource "azurerm_postgresql_server" "example" {
		3  |   name                = "example-psqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "psqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "GP_Gen5_4"
		11 |   version    = "9.6"
		12 |   storage_mb = 640000
		13 |
		14 |   backup_retention_days        = 7
		15 |   geo_redundant_backup_enabled = true
		16 |   auto_grow_enabled            = true
		17 |
		18 |   public_network_access_enabled    = false
		19 |   ssl_enforcement_enabled          = false
		20 |   ssl_minimal_tls_version_enforced = "TLS1_2"
		21 | }


Check: CKV_AZURE_29: "Ensure 'Enforce SSL connection' is set to 'ENABLED' for PostgreSQL Database Server"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/postgreSQL/PostgreSQLServerSSLEnforcementEnabled.tf:2-21

		2  | resource "azurerm_postgresql_server" "example" {
		3  |   name                = "example-psqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "psqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "GP_Gen5_4"
		11 |   version    = "9.6"
		12 |   storage_mb = 640000
		13 |
		14 |   backup_retention_days        = 7
		15 |   geo_redundant_backup_enabled = true
		16 |   auto_grow_enabled            = true
		17 |
		18 |   public_network_access_enabled    = false
		19 |   ssl_enforcement_enabled          = false
		20 |   ssl_minimal_tls_version_enforced = "TLS1_2"
		21 | }


Check: CKV_AZURE_68: "Ensure that PostgreSQL server disables public network access"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/postgreSQL/PostgresSQLGeoBackupEnabled.tf:2-21

		2  | resource "azurerm_postgresql_server" "example" {
		3  |   name                = "example-psqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "psqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "GP_Gen5_4"
		11 |   version    = "9.6"
		12 |   storage_mb = 640000
		13 |
		14 |   backup_retention_days        = 7
		15 |   geo_redundant_backup_enabled = false
		16 |   auto_grow_enabled            = true
		17 |
		18 |   public_network_access_enabled    = true
		19 |   ssl_enforcement_enabled          = true
		20 |   ssl_minimal_tls_version_enforced = "TLS1_2"
		21 | }


Check: CKV_AZURE_128: "Ensure that PostgreSQL server enables Threat detection policy"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/postgreSQL/PostgresSQLGeoBackupEnabled.tf:2-21

		2  | resource "azurerm_postgresql_server" "example" {
		3  |   name                = "example-psqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "psqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "GP_Gen5_4"
		11 |   version    = "9.6"
		12 |   storage_mb = 640000
		13 |
		14 |   backup_retention_days        = 7
		15 |   geo_redundant_backup_enabled = false
		16 |   auto_grow_enabled            = true
		17 |
		18 |   public_network_access_enabled    = true
		19 |   ssl_enforcement_enabled          = true
		20 |   ssl_minimal_tls_version_enforced = "TLS1_2"
		21 | }


Check: CKV_AZURE_130: "Ensure that PostgreSQL server enables infrastructure encryption"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/postgreSQL/PostgresSQLGeoBackupEnabled.tf:2-21

		2  | resource "azurerm_postgresql_server" "example" {
		3  |   name                = "example-psqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "psqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "GP_Gen5_4"
		11 |   version    = "9.6"
		12 |   storage_mb = 640000
		13 |
		14 |   backup_retention_days        = 7
		15 |   geo_redundant_backup_enabled = false
		16 |   auto_grow_enabled            = true
		17 |
		18 |   public_network_access_enabled    = true
		19 |   ssl_enforcement_enabled          = true
		20 |   ssl_minimal_tls_version_enforced = "TLS1_2"
		21 | }


Check: CKV_AZURE_102: "Ensure that PostgreSQL server enables geo-redundant backups"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/postgreSQL/PostgresSQLGeoBackupEnabled.tf:2-21

		2  | resource "azurerm_postgresql_server" "example" {
		3  |   name                = "example-psqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "psqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "GP_Gen5_4"
		11 |   version    = "9.6"
		12 |   storage_mb = 640000
		13 |
		14 |   backup_retention_days        = 7
		15 |   geo_redundant_backup_enabled = false
		16 |   auto_grow_enabled            = true
		17 |
		18 |   public_network_access_enabled    = true
		19 |   ssl_enforcement_enabled          = true
		20 |   ssl_minimal_tls_version_enforced = "TLS1_2"
		21 | }


Check: CKV_AZURE_128: "Ensure that PostgreSQL server enables Threat detection policy"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/postgreSQL/PostgresSQLTreatDetectionEnabled.tf:2-25

		2  | resource "azurerm_postgresql_server" "example" {
		3  |   name                = "example-mysqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "mysqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "B_Gen5_2"
		11 |   storage_mb = 5120
		12 |   version    = "5.7"
		13 |
		14 |   auto_grow_enabled                 = true
		15 |   backup_retention_days             = 7
		16 |   geo_redundant_backup_enabled      = true
		17 |   infrastructure_encryption_enabled = true
		18 |   public_network_access_enabled     = false
		19 |   ssl_enforcement_enabled           = false
		20 |   ssl_minimal_tls_version_enforced  = "TLS1_2"
		21 |
		22 |   threat_detection_policy {
		23 |     enabled = false
		24 |   }
		25 | }


Check: CKV_AZURE_29: "Ensure 'Enforce SSL connection' is set to 'ENABLED' for PostgreSQL Database Server"
	FAILED for resource: azurerm_postgresql_server.example
	File: /terraform/azurerm/postgreSQL/PostgresSQLTreatDetectionEnabled.tf:2-25

		2  | resource "azurerm_postgresql_server" "example" {
		3  |   name                = "example-mysqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "mysqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "B_Gen5_2"
		11 |   storage_mb = 5120
		12 |   version    = "5.7"
		13 |
		14 |   auto_grow_enabled                 = true
		15 |   backup_retention_days             = 7
		16 |   geo_redundant_backup_enabled      = true
		17 |   infrastructure_encryption_enabled = true
		18 |   public_network_access_enabled     = false
		19 |   ssl_enforcement_enabled           = false
		20 |   ssl_minimal_tls_version_enforced  = "TLS1_2"
		21 |
		22 |   threat_detection_policy {
		23 |     enabled = false
		24 |   }
		25 | }


Check: CKV_AZURE_91: "Ensure that only SSL are enabled for Cache for Redis"
	FAILED for resource: azurerm_redis_cache.example
	File: /terraform/azurerm/redis/RedisCacheEnableNonSSLPort.tf:2-14

		2  | resource "azurerm_redis_cache" "example" {
		3  |   name                          = "example-cache"
		4  |   location                      = azurerm_resource_group.example.location
		5  |   resource_group_name           = azurerm_resource_group.example.name
		6  |   capacity                      = 2
		7  |   family                        = "C"
		8  |   sku_name                      = "Standard"
		9  |   enable_non_ssl_port           = true
		10 |   minimum_tls_version           = "1.2"
		11 |   public_network_access_enabled = true
		12 |   redis_configuration {
		13 |   }
		14 | }


Check: CKV_AZURE_89: "Ensure that Azure Cache for Redis disables public network access"
	FAILED for resource: azurerm_redis_cache.example
	File: /terraform/azurerm/redis/RedisCacheEnableNonSSLPort.tf:2-14

		2  | resource "azurerm_redis_cache" "example" {
		3  |   name                          = "example-cache"
		4  |   location                      = azurerm_resource_group.example.location
		5  |   resource_group_name           = azurerm_resource_group.example.name
		6  |   capacity                      = 2
		7  |   family                        = "C"
		8  |   sku_name                      = "Standard"
		9  |   enable_non_ssl_port           = true
		10 |   minimum_tls_version           = "1.2"
		11 |   public_network_access_enabled = true
		12 |   redis_configuration {
		13 |   }
		14 | }


Check: CKV_AZURE_89: "Ensure that Azure Cache for Redis disables public network access"
	FAILED for resource: azurerm_redis_cache.example
	File: /terraform/azurerm/redis/RedisCachePublicNetworkAccessEnabled.tf:2-14

		2  | resource "azurerm_redis_cache" "example" {
		3  |   name                          = "example-cache"
		4  |   location                      = azurerm_resource_group.example.location
		5  |   resource_group_name           = azurerm_resource_group.example.name
		6  |   capacity                      = 2
		7  |   family                        = "C"
		8  |   sku_name                      = "Standard"
		9  |   enable_non_ssl_port           = false
		10 |   minimum_tls_version           = "1.2"
		11 |   public_network_access_enabled = true
		12 |   redis_configuration {
		13 |   }
		14 | }


Check: CKV_AZURE_61: "Ensure that Azure Defender is set to On for App Service"
	FAILED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnAppServices.tf:2-5

		2 | resource "azurerm_security_center_subscription_pricing" "example" {
		3 |   tier          = "Free"
		4 |   resource_type = "AppServices"
		5 | }


Check: CKV_AZURE_19: "Ensure that standard pricing tier is selected"
	FAILED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnAppServices.tf:2-5

		2 | resource "azurerm_security_center_subscription_pricing" "example" {
		3 |   tier          = "Free"
		4 |   resource_type = "AppServices"
		5 | }


Check: CKV_AZURE_86: "Ensure that Azure Defender is set to On for Container Registries"
	FAILED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnContainerRegistry.tf:2-5

		2 | resource "azurerm_security_center_subscription_pricing" "example" {
		3 |   tier          = "Free"
		4 |   resource_type = "ContainerRegistry"
		5 | }


Check: CKV_AZURE_19: "Ensure that standard pricing tier is selected"
	FAILED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnContainerRegistry.tf:2-5

		2 | resource "azurerm_security_center_subscription_pricing" "example" {
		3 |   tier          = "Free"
		4 |   resource_type = "ContainerRegistry"
		5 | }


Check: CKV_AZURE_87: "Ensure that Azure Defender is set to On for Key Vault"
	FAILED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnKeyVaults.tf:2-5

		2 | resource "azurerm_security_center_subscription_pricing" "example" {
		3 |   tier          = "Free"
		4 |   resource_type = "KeyVaults"
		5 | }


Check: CKV_AZURE_19: "Ensure that standard pricing tier is selected"
	FAILED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnKeyVaults.tf:2-5

		2 | resource "azurerm_security_center_subscription_pricing" "example" {
		3 |   tier          = "Free"
		4 |   resource_type = "KeyVaults"
		5 | }


Check: CKV_AZURE_85: "Ensure that Azure Defender is set to On for Kubernetes"
	FAILED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnKubernetes.tf:2-5

		2 | resource "azurerm_security_center_subscription_pricing" "example" {
		3 |   tier          = "Free"
		4 |   resource_type = "KubernetesService"
		5 | }


Check: CKV_AZURE_19: "Ensure that standard pricing tier is selected"
	FAILED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnKubernetes.tf:2-5

		2 | resource "azurerm_security_center_subscription_pricing" "example" {
		3 |   tier          = "Free"
		4 |   resource_type = "KubernetesService"
		5 | }


Check: CKV_AZURE_55: "Ensure that Azure Defender is set to On for Servers"
	FAILED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnServers.tf:2-5

		2 | resource "azurerm_security_center_subscription_pricing" "example" {
		3 |   tier          = "Free"
		4 |   resource_type = "VirtualMachines"
		5 | }


Check: CKV_AZURE_19: "Ensure that standard pricing tier is selected"
	FAILED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnServers.tf:2-5

		2 | resource "azurerm_security_center_subscription_pricing" "example" {
		3 |   tier          = "Free"
		4 |   resource_type = "VirtualMachines"
		5 | }


Check: CKV_AZURE_69: "Ensure that Azure Defender is set to On for Azure SQL database servers"
	FAILED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnSqlServers.tf:2-5

		2 | resource "azurerm_security_center_subscription_pricing" "example" {
		3 |   tier          = "Free"
		4 |   resource_type = "SqlServers"
		5 | }


Check: CKV_AZURE_19: "Ensure that standard pricing tier is selected"
	FAILED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnSqlServers.tf:2-5

		2 | resource "azurerm_security_center_subscription_pricing" "example" {
		3 |   tier          = "Free"
		4 |   resource_type = "SqlServers"
		5 | }


Check: CKV_AZURE_79: "Ensure that Azure Defender is set to On for SQL servers on machines"
	FAILED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnSqlServersVMS.tf:2-5

		2 | resource "azurerm_security_center_subscription_pricing" "example" {
		3 |   tier          = "Free"
		4 |   resource_type = "SqlServerVirtualMachines"
		5 | }


Check: CKV_AZURE_19: "Ensure that standard pricing tier is selected"
	FAILED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnSqlServersVMS.tf:2-5

		2 | resource "azurerm_security_center_subscription_pricing" "example" {
		3 |   tier          = "Free"
		4 |   resource_type = "SqlServerVirtualMachines"
		5 | }


Check: CKV_AZURE_84: "Ensure that Azure Defender is set to On for Storage"
	FAILED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnStorage.tf:2-5

		2 | resource "azurerm_security_center_subscription_pricing" "example" {
		3 |   tier          = "Free"
		4 |   resource_type = "StorageAccounts"
		5 | }


Check: CKV_AZURE_19: "Ensure that standard pricing tier is selected"
	FAILED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/DefenderOnStorage.tf:2-5

		2 | resource "azurerm_security_center_subscription_pricing" "example" {
		3 |   tier          = "Free"
		4 |   resource_type = "StorageAccounts"
		5 | }


Check: CKV_AZURE_25: "Ensure that 'Threat Detection types' is set to 'All'"
	FAILED for resource: azurerm_mssql_server_security_alert_policy.example
	File: /terraform/azurerm/security_center/SQLServerEmailAlertsEnabled.tf:2-13

		2  | resource "azurerm_mssql_server_security_alert_policy" "example" {
		3  |   resource_group_name        = azurerm_resource_group.example.name
		4  |   server_name                = azurerm_sql_server.example.name
		5  |   state                      = "Enabled"
		6  |   storage_endpoint           = azurerm_storage_account.example.primary_blob_endpoint
		7  |   storage_account_access_key = azurerm_storage_account.example.primary_access_key
		8  |   disabled_alerts = [
		9  |     "Sql_Injection",
		10 |     "Data_Exfiltration"
		11 |   ]
		12 |   retention_days = 20
		13 | }


Check: CKV_AZURE_26: "Ensure that 'Send Alerts To' is enabled for MSSQL servers"
	FAILED for resource: azurerm_mssql_server_security_alert_policy.example
	File: /terraform/azurerm/security_center/SQLServerEmailAlertsEnabled.tf:2-13

		2  | resource "azurerm_mssql_server_security_alert_policy" "example" {
		3  |   resource_group_name        = azurerm_resource_group.example.name
		4  |   server_name                = azurerm_sql_server.example.name
		5  |   state                      = "Enabled"
		6  |   storage_endpoint           = azurerm_storage_account.example.primary_blob_endpoint
		7  |   storage_account_access_key = azurerm_storage_account.example.primary_access_key
		8  |   disabled_alerts = [
		9  |     "Sql_Injection",
		10 |     "Data_Exfiltration"
		11 |   ]
		12 |   retention_days = 20
		13 | }


Check: CKV_AZURE_27: "Ensure that 'Email service and co-administrators' is 'Enabled' for MSSQL servers"
	FAILED for resource: azurerm_mssql_server_security_alert_policy.example
	File: /terraform/azurerm/security_center/SQLServerEmailAlertsEnabled.tf:2-13

		2  | resource "azurerm_mssql_server_security_alert_policy" "example" {
		3  |   resource_group_name        = azurerm_resource_group.example.name
		4  |   server_name                = azurerm_sql_server.example.name
		5  |   state                      = "Enabled"
		6  |   storage_endpoint           = azurerm_storage_account.example.primary_blob_endpoint
		7  |   storage_account_access_key = azurerm_storage_account.example.primary_access_key
		8  |   disabled_alerts = [
		9  |     "Sql_Injection",
		10 |     "Data_Exfiltration"
		11 |   ]
		12 |   retention_days = 20
		13 | }


Check: CKV_AZURE_131: "Ensure that 'Security contact emails' is set"
	FAILED for resource: azurerm_security_center_contact.example
	File: /terraform/azurerm/security_center/SecurityCenterContactEmails.tf:2-7

		2 | resource "azurerm_security_center_contact" "example" {
		3 |   phone = "+1-555-555-5555"
		4 |
		5 |   alert_notifications = true
		6 |   alerts_to_admins    = true
		7 | }


Check: CKV_AZURE_20: "Ensure that security contact 'Phone number' is set"
	FAILED for resource: azurerm_security_center_contact.example
	File: /terraform/azurerm/security_center/SecurityCenterContactPhone.tf:2-4

		2 | resource "azurerm_security_center_contact" "example" {
		3 |   email = "contact@example.com"
		4 | }


Check: CKV_AZURE_22: "Ensure that 'Send email notification for high severity alerts' is set to 'On'"
	FAILED for resource: azurerm_security_center_contact.example
	File: /terraform/azurerm/security_center/SecurityCenterContactPhone.tf:2-4

		2 | resource "azurerm_security_center_contact" "example" {
		3 |   email = "contact@example.com"
		4 | }


Check: CKV_AZURE_21: "Ensure that 'Send email notification for high severity alerts' is set to 'On'"
	FAILED for resource: azurerm_security_center_contact.example
	File: /terraform/azurerm/security_center/SecurityCenterContactPhone.tf:2-4

		2 | resource "azurerm_security_center_contact" "example" {
		3 |   email = "contact@example.com"
		4 | }


Check: CKV_AZURE_20: "Ensure that security contact 'Phone number' is set"
	FAILED for resource: azurerm_security_center_contact.example
	File: /terraform/azurerm/security_center/SecurityCenterEmailAlert.tf:2-4

		2 | resource "azurerm_security_center_contact" "example" {
		3 |   email = "contact@example.com"
		4 | }


Check: CKV_AZURE_22: "Ensure that 'Send email notification for high severity alerts' is set to 'On'"
	FAILED for resource: azurerm_security_center_contact.example
	File: /terraform/azurerm/security_center/SecurityCenterEmailAlert.tf:2-4

		2 | resource "azurerm_security_center_contact" "example" {
		3 |   email = "contact@example.com"
		4 | }


Check: CKV_AZURE_21: "Ensure that 'Send email notification for high severity alerts' is set to 'On'"
	FAILED for resource: azurerm_security_center_contact.example
	File: /terraform/azurerm/security_center/SecurityCenterEmailAlert.tf:2-4

		2 | resource "azurerm_security_center_contact" "example" {
		3 |   email = "contact@example.com"
		4 | }


Check: CKV_AZURE_20: "Ensure that security contact 'Phone number' is set"
	FAILED for resource: azurerm_security_center_contact.example
	File: /terraform/azurerm/security_center/SecurityCenterEmailAlertAdmins.tf:2-5

		2 | resource "azurerm_security_center_contact" "example" {
		3 |   email            = "contact@example.com"
		4 |   alerts_to_admins = false
		5 | }


Check: CKV_AZURE_22: "Ensure that 'Send email notification for high severity alerts' is set to 'On'"
	FAILED for resource: azurerm_security_center_contact.example
	File: /terraform/azurerm/security_center/SecurityCenterEmailAlertAdmins.tf:2-5

		2 | resource "azurerm_security_center_contact" "example" {
		3 |   email            = "contact@example.com"
		4 |   alerts_to_admins = false
		5 | }


Check: CKV_AZURE_21: "Ensure that 'Send email notification for high severity alerts' is set to 'On'"
	FAILED for resource: azurerm_security_center_contact.example
	File: /terraform/azurerm/security_center/SecurityCenterEmailAlertAdmins.tf:2-5

		2 | resource "azurerm_security_center_contact" "example" {
		3 |   email            = "contact@example.com"
		4 |   alerts_to_admins = false
		5 | }


Check: CKV_AZURE_19: "Ensure that standard pricing tier is selected"
	FAILED for resource: azurerm_security_center_subscription_pricing.example
	File: /terraform/azurerm/security_center/SecurityCenterStandardPricing.tf:2-4

		2 | resource "azurerm_security_center_subscription_pricing" "example" {
		3 |   tier = "Free"
		4 | }


Check: CKV_AZURE_22: "Ensure that 'Send email notification for high severity alerts' is set to 'On'"
	FAILED for resource: azurerm_security_center_contact.fail
	File: /terraform/azurerm/security_center/alert-on-severe-notifications.tf:3-9

		3 | resource "azurerm_security_center_contact" "fail" {
		4 |   email = "fail@example.com"
		5 |   phone = "+1-555-555-5555"
		6 |
		7 |   alert_notifications = false
		8 |   alerts_to_admins    = false
		9 | }


Check: CKV_AZURE_21: "Ensure that 'Send email notification for high severity alerts' is set to 'On'"
	FAILED for resource: azurerm_security_center_contact.fail
	File: /terraform/azurerm/security_center/alert-on-severe-notifications.tf:3-9

		3 | resource "azurerm_security_center_contact" "fail" {
		4 |   email = "fail@example.com"
		5 |   phone = "+1-555-555-5555"
		6 |
		7 |   alert_notifications = false
		8 |   alerts_to_admins    = false
		9 | }


Check: CKV_AZURE_55: "Ensure that Azure Defender is set to On for Servers"
	FAILED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-appservices.tf:2-5

		2 | resource "azurerm_security_center_subscription_pricing" "fail" {
		3 |   tier          = "Free"
		4 |   resource_type = "VirtualMachines"
		5 | }


Check: CKV_AZURE_19: "Ensure that standard pricing tier is selected"
	FAILED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-appservices.tf:2-5

		2 | resource "azurerm_security_center_subscription_pricing" "fail" {
		3 |   tier          = "Free"
		4 |   resource_type = "VirtualMachines"
		5 | }


Check: CKV_AZURE_55: "Ensure that Azure Defender is set to On for Servers"
	FAILED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-container-registry.tf:2-5

		2 | resource "azurerm_security_center_subscription_pricing" "fail" {
		3 |   tier          = "Free"
		4 |   resource_type = "VirtualMachines"
		5 | }


Check: CKV_AZURE_19: "Ensure that standard pricing tier is selected"
	FAILED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-container-registry.tf:2-5

		2 | resource "azurerm_security_center_subscription_pricing" "fail" {
		3 |   tier          = "Free"
		4 |   resource_type = "VirtualMachines"
		5 | }


Check: CKV_AZURE_55: "Ensure that Azure Defender is set to On for Servers"
	FAILED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-keyvault.tf:3-6

		3 | resource "azurerm_security_center_subscription_pricing" "fail" {
		4 |   tier          = "Free"
		5 |   resource_type = "VirtualMachines"
		6 | }


Check: CKV_AZURE_19: "Ensure that standard pricing tier is selected"
	FAILED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-keyvault.tf:3-6

		3 | resource "azurerm_security_center_subscription_pricing" "fail" {
		4 |   tier          = "Free"
		5 |   resource_type = "VirtualMachines"
		6 | }


Check: CKV_AZURE_55: "Ensure that Azure Defender is set to On for Servers"
	FAILED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-kubernetes.tf:2-5

		2 | resource "azurerm_security_center_subscription_pricing" "fail" {
		3 |   tier          = "Free"
		4 |   resource_type = "VirtualMachines"
		5 | }


Check: CKV_AZURE_19: "Ensure that standard pricing tier is selected"
	FAILED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-kubernetes.tf:2-5

		2 | resource "azurerm_security_center_subscription_pricing" "fail" {
		3 |   tier          = "Free"
		4 |   resource_type = "VirtualMachines"
		5 | }


Check: CKV_AZURE_61: "Ensure that Azure Defender is set to On for App Service"
	FAILED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-servers.tf:2-5

		2 | resource "azurerm_security_center_subscription_pricing" "fail" {
		3 |   tier          = "Free"
		4 |   resource_type = "AppServices"
		5 | }


Check: CKV_AZURE_19: "Ensure that standard pricing tier is selected"
	FAILED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-servers.tf:2-5

		2 | resource "azurerm_security_center_subscription_pricing" "fail" {
		3 |   tier          = "Free"
		4 |   resource_type = "AppServices"
		5 | }


Check: CKV_AZURE_55: "Ensure that Azure Defender is set to On for Servers"
	FAILED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-sql-servers-vms.tf:3-6

		3 | resource "azurerm_security_center_subscription_pricing" "fail" {
		4 |   tier          = "Free"
		5 |   resource_type = "VirtualMachines"
		6 | }


Check: CKV_AZURE_19: "Ensure that standard pricing tier is selected"
	FAILED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-sql-servers-vms.tf:3-6

		3 | resource "azurerm_security_center_subscription_pricing" "fail" {
		4 |   tier          = "Free"
		5 |   resource_type = "VirtualMachines"
		6 | }


Check: CKV_AZURE_55: "Ensure that Azure Defender is set to On for Servers"
	FAILED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-sql-servers.tf:3-6

		3 | resource "azurerm_security_center_subscription_pricing" "fail" {
		4 |   tier          = "Free"
		5 |   resource_type = "VirtualMachines"
		6 | }


Check: CKV_AZURE_19: "Ensure that standard pricing tier is selected"
	FAILED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-sql-servers.tf:3-6

		3 | resource "azurerm_security_center_subscription_pricing" "fail" {
		4 |   tier          = "Free"
		5 |   resource_type = "VirtualMachines"
		6 | }


Check: CKV_AZURE_55: "Ensure that Azure Defender is set to On for Servers"
	FAILED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-storage.tf:3-6

		3 | resource "azurerm_security_center_subscription_pricing" "fail" {
		4 |   tier          = "Free"
		5 |   resource_type = "VirtualMachines"
		6 | }


Check: CKV_AZURE_19: "Ensure that standard pricing tier is selected"
	FAILED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/defender-on-storage.tf:3-6

		3 | resource "azurerm_security_center_subscription_pricing" "fail" {
		4 |   tier          = "Free"
		5 |   resource_type = "VirtualMachines"
		6 | }


Check: CKV_AZURE_55: "Ensure that Azure Defender is set to On for Servers"
	FAILED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/enable-standard-subscription.tf:2-5

		2 | resource "azurerm_security_center_subscription_pricing" "fail" {
		3 |   tier          = "Free"
		4 |   resource_type = "VirtualMachines"
		5 | }


Check: CKV_AZURE_19: "Ensure that standard pricing tier is selected"
	FAILED for resource: azurerm_security_center_subscription_pricing.fail
	File: /terraform/azurerm/security_center/enable-standard-subscription.tf:2-5

		2 | resource "azurerm_security_center_subscription_pricing" "fail" {
		3 |   tier          = "Free"
		4 |   resource_type = "VirtualMachines"
		5 | }


Check: CKV_AZURE_20: "Ensure that security contact 'Phone number' is set"
	FAILED for resource: azurerm_security_center_contact.fail
	File: /terraform/azurerm/security_center/set-required-contact-details.tf:3-9

		3 | resource "azurerm_security_center_contact" "fail" {
		4 |   email = "bad_contact@example.com"
		5 |   phone = ""
		6 |
		7 |   alert_notifications = true
		8 |   alerts_to_admins    = true
		9 | }


Check: CKV_AZURE_126: "Ensures that Active Directory is used for authentication for Service Fabric"
	FAILED for resource: azurerm_service_fabric_cluster.example
	File: /terraform/azurerm/service_fabric_cluster/service_fabric_cluster.tf:2-19

		2  | resource "azurerm_service_fabric_cluster" "example" {
		3  |   name                 = "example-servicefabric"
		4  |   resource_group_name  = azurerm_resource_group.example.name
		5  |   location             = azurerm_resource_group.example.location
		6  |   reliability_level    = "Bronze"
		7  |   upgrade_mode         = "Manual"
		8  |   cluster_code_version = "7.1.456.959"
		9  |   vm_image             = "Windows"
		10 |   management_endpoint  = "https://example:80"
		11 |
		12 |   node_type {
		13 |     name                 = "first"
		14 |     instance_count       = 3
		15 |     is_primary           = true
		16 |     client_endpoint_port = 2020
		17 |     http_endpoint_port   = 80
		18 |   }
		19 | }


Check: CKV_AZURE_125: "Ensures that Service Fabric use three levels of protection available"
	FAILED for resource: azurerm_service_fabric_cluster.example
	File: /terraform/azurerm/service_fabric_cluster/service_fabric_cluster.tf:2-19

		2  | resource "azurerm_service_fabric_cluster" "example" {
		3  |   name                 = "example-servicefabric"
		4  |   resource_group_name  = azurerm_resource_group.example.name
		5  |   location             = azurerm_resource_group.example.location
		6  |   reliability_level    = "Bronze"
		7  |   upgrade_mode         = "Manual"
		8  |   cluster_code_version = "7.1.456.959"
		9  |   vm_image             = "Windows"
		10 |   management_endpoint  = "https://example:80"
		11 |
		12 |   node_type {
		13 |     name                 = "first"
		14 |     instance_count       = 3
		15 |     is_primary           = true
		16 |     client_endpoint_port = 2020
		17 |     http_endpoint_port   = 80
		18 |   }
		19 | }


Check: CKV_AZURE_36: "Ensure 'Trusted Microsoft Services' is enabled for Storage Account access"
	FAILED for resource: azurerm_storage_account_network_rules.test
	File: /terraform/azurerm/storage/StorageAccountAzureServicesAccessEnabled.tf:2-10

		2  | resource "azurerm_storage_account_network_rules" "test" {
		3  |   resource_group_name  = azurerm_resource_group.test.name
		4  |   storage_account_name = azurerm_storage_account.test.name
		5  |
		6  |   default_action             = "Deny"
		7  |   ip_rules                   = ["127.0.0.1"]
		8  |   virtual_network_subnet_ids = [azurerm_subnet.test.id]
		9  |   bypass                     = ["Metrics"]
		10 | }


Check: CKV_AZURE_33: "Ensure Storage logging is enabled for Queue service for read, write and delete requests"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountDefaultNetworkAccessDeny.tf:2-8

		2 | resource "azurerm_storage_account" "example" {
		3 |   name                     = "example"
		4 |   resource_group_name      = data.azurerm_resource_group.example.name
		5 |   location                 = data.azurerm_resource_group.example.location
		6 |   account_tier             = "Standard"
		7 |   account_replication_type = "GRS"
		8 | }


Check: CKV_AZURE_35: "Ensure default network access rule for Storage Accounts is set to deny"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountDefaultNetworkAccessDeny.tf:2-8

		2 | resource "azurerm_storage_account" "example" {
		3 |   name                     = "example"
		4 |   resource_group_name      = data.azurerm_resource_group.example.name
		5 |   location                 = data.azurerm_resource_group.example.location
		6 |   account_tier             = "Standard"
		7 |   account_replication_type = "GRS"
		8 | }


Check: CKV_AZURE_44: "Ensure Storage Account is using the latest version of TLS encryption"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountDefaultNetworkAccessDeny.tf:2-8

		2 | resource "azurerm_storage_account" "example" {
		3 |   name                     = "example"
		4 |   resource_group_name      = data.azurerm_resource_group.example.name
		5 |   location                 = data.azurerm_resource_group.example.location
		6 |   account_tier             = "Standard"
		7 |   account_replication_type = "GRS"
		8 | }


Check: CKV_AZURE_3: "Ensure that 'Secure transfer required' is set to 'Enabled'"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountDefaultNetworkAccessDeny.tf:2-8

		2 | resource "azurerm_storage_account" "example" {
		3 |   name                     = "example"
		4 |   resource_group_name      = data.azurerm_resource_group.example.name
		5 |   location                 = data.azurerm_resource_group.example.location
		6 |   account_tier             = "Standard"
		7 |   account_replication_type = "GRS"
		8 | }


Check: CKV_AZURE_33: "Ensure Storage logging is enabled for Queue service for read, write and delete requests"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountDisablePublicAccess.tf:2-14

		2  | resource "azurerm_storage_account" "example" {
		3  |   name                      = "storageaccountname"
		4  |   resource_group_name       = azurerm_resource_group.example.name
		5  |   location                  = azurerm_resource_group.example.location
		6  |   account_tier              = "Standard"
		7  |   account_replication_type  = "GRS"
		8  |   enable_https_traffic_only = false
		9  |   allow_blob_public_access  = true
		10 |
		11 |   tags = {
		12 |     environment = "staging"
		13 |   }
		14 | }


Check: CKV_AZURE_59: "Ensure that Storage accounts disallow public access"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountDisablePublicAccess.tf:2-14

		2  | resource "azurerm_storage_account" "example" {
		3  |   name                      = "storageaccountname"
		4  |   resource_group_name       = azurerm_resource_group.example.name
		5  |   location                  = azurerm_resource_group.example.location
		6  |   account_tier              = "Standard"
		7  |   account_replication_type  = "GRS"
		8  |   enable_https_traffic_only = false
		9  |   allow_blob_public_access  = true
		10 |
		11 |   tags = {
		12 |     environment = "staging"
		13 |   }
		14 | }


Check: CKV_AZURE_60: "Ensure that storage account enables secure transfer"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountDisablePublicAccess.tf:2-14

		2  | resource "azurerm_storage_account" "example" {
		3  |   name                      = "storageaccountname"
		4  |   resource_group_name       = azurerm_resource_group.example.name
		5  |   location                  = azurerm_resource_group.example.location
		6  |   account_tier              = "Standard"
		7  |   account_replication_type  = "GRS"
		8  |   enable_https_traffic_only = false
		9  |   allow_blob_public_access  = true
		10 |
		11 |   tags = {
		12 |     environment = "staging"
		13 |   }
		14 | }


Check: CKV_AZURE_35: "Ensure default network access rule for Storage Accounts is set to deny"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountDisablePublicAccess.tf:2-14

		2  | resource "azurerm_storage_account" "example" {
		3  |   name                      = "storageaccountname"
		4  |   resource_group_name       = azurerm_resource_group.example.name
		5  |   location                  = azurerm_resource_group.example.location
		6  |   account_tier              = "Standard"
		7  |   account_replication_type  = "GRS"
		8  |   enable_https_traffic_only = false
		9  |   allow_blob_public_access  = true
		10 |
		11 |   tags = {
		12 |     environment = "staging"
		13 |   }
		14 | }


Check: CKV_AZURE_44: "Ensure Storage Account is using the latest version of TLS encryption"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountDisablePublicAccess.tf:2-14

		2  | resource "azurerm_storage_account" "example" {
		3  |   name                      = "storageaccountname"
		4  |   resource_group_name       = azurerm_resource_group.example.name
		5  |   location                  = azurerm_resource_group.example.location
		6  |   account_tier              = "Standard"
		7  |   account_replication_type  = "GRS"
		8  |   enable_https_traffic_only = false
		9  |   allow_blob_public_access  = true
		10 |
		11 |   tags = {
		12 |     environment = "staging"
		13 |   }
		14 | }


Check: CKV_AZURE_3: "Ensure that 'Secure transfer required' is set to 'Enabled'"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountDisablePublicAccess.tf:2-14

		2  | resource "azurerm_storage_account" "example" {
		3  |   name                      = "storageaccountname"
		4  |   resource_group_name       = azurerm_resource_group.example.name
		5  |   location                  = azurerm_resource_group.example.location
		6  |   account_tier              = "Standard"
		7  |   account_replication_type  = "GRS"
		8  |   enable_https_traffic_only = false
		9  |   allow_blob_public_access  = true
		10 |
		11 |   tags = {
		12 |     environment = "staging"
		13 |   }
		14 | }


Check: CKV_AZURE_33: "Ensure Storage logging is enabled for Queue service for read, write and delete requests"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountEnablesSecureTransfer.tf:2-13

		2  | resource "azurerm_storage_account" "example" {
		3  |   name                      = "storageaccountname"
		4  |   resource_group_name       = azurerm_resource_group.example.name
		5  |   location                  = azurerm_resource_group.example.location
		6  |   account_tier              = "Standard"
		7  |   account_replication_type  = "GRS"
		8  |   enable_https_traffic_only = false
		9  |
		10 |   tags = {
		11 |     environment = "staging"
		12 |   }
		13 | }


Check: CKV_AZURE_60: "Ensure that storage account enables secure transfer"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountEnablesSecureTransfer.tf:2-13

		2  | resource "azurerm_storage_account" "example" {
		3  |   name                      = "storageaccountname"
		4  |   resource_group_name       = azurerm_resource_group.example.name
		5  |   location                  = azurerm_resource_group.example.location
		6  |   account_tier              = "Standard"
		7  |   account_replication_type  = "GRS"
		8  |   enable_https_traffic_only = false
		9  |
		10 |   tags = {
		11 |     environment = "staging"
		12 |   }
		13 | }


Check: CKV_AZURE_35: "Ensure default network access rule for Storage Accounts is set to deny"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountEnablesSecureTransfer.tf:2-13

		2  | resource "azurerm_storage_account" "example" {
		3  |   name                      = "storageaccountname"
		4  |   resource_group_name       = azurerm_resource_group.example.name
		5  |   location                  = azurerm_resource_group.example.location
		6  |   account_tier              = "Standard"
		7  |   account_replication_type  = "GRS"
		8  |   enable_https_traffic_only = false
		9  |
		10 |   tags = {
		11 |     environment = "staging"
		12 |   }
		13 | }


Check: CKV_AZURE_44: "Ensure Storage Account is using the latest version of TLS encryption"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountEnablesSecureTransfer.tf:2-13

		2  | resource "azurerm_storage_account" "example" {
		3  |   name                      = "storageaccountname"
		4  |   resource_group_name       = azurerm_resource_group.example.name
		5  |   location                  = azurerm_resource_group.example.location
		6  |   account_tier              = "Standard"
		7  |   account_replication_type  = "GRS"
		8  |   enable_https_traffic_only = false
		9  |
		10 |   tags = {
		11 |     environment = "staging"
		12 |   }
		13 | }


Check: CKV_AZURE_3: "Ensure that 'Secure transfer required' is set to 'Enabled'"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountEnablesSecureTransfer.tf:2-13

		2  | resource "azurerm_storage_account" "example" {
		3  |   name                      = "storageaccountname"
		4  |   resource_group_name       = azurerm_resource_group.example.name
		5  |   location                  = azurerm_resource_group.example.location
		6  |   account_tier              = "Standard"
		7  |   account_replication_type  = "GRS"
		8  |   enable_https_traffic_only = false
		9  |
		10 |   tags = {
		11 |     environment = "staging"
		12 |   }
		13 | }


Check: CKV_AZURE_33: "Ensure Storage logging is enabled for Queue service for read, write and delete requests"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountLoggingQueueServiceEnabled.tf:2-8

		2 | resource "azurerm_storage_account" "example" {
		3 |   name                     = "example"
		4 |   resource_group_name      = data.azurerm_resource_group.example.name
		5 |   location                 = data.azurerm_resource_group.example.location
		6 |   account_tier             = "Standard"
		7 |   account_replication_type = "GRS"
		8 | }


Check: CKV_AZURE_35: "Ensure default network access rule for Storage Accounts is set to deny"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountLoggingQueueServiceEnabled.tf:2-8

		2 | resource "azurerm_storage_account" "example" {
		3 |   name                     = "example"
		4 |   resource_group_name      = data.azurerm_resource_group.example.name
		5 |   location                 = data.azurerm_resource_group.example.location
		6 |   account_tier             = "Standard"
		7 |   account_replication_type = "GRS"
		8 | }


Check: CKV_AZURE_44: "Ensure Storage Account is using the latest version of TLS encryption"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountLoggingQueueServiceEnabled.tf:2-8

		2 | resource "azurerm_storage_account" "example" {
		3 |   name                     = "example"
		4 |   resource_group_name      = data.azurerm_resource_group.example.name
		5 |   location                 = data.azurerm_resource_group.example.location
		6 |   account_tier             = "Standard"
		7 |   account_replication_type = "GRS"
		8 | }


Check: CKV_AZURE_3: "Ensure that 'Secure transfer required' is set to 'Enabled'"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountLoggingQueueServiceEnabled.tf:2-8

		2 | resource "azurerm_storage_account" "example" {
		3 |   name                     = "example"
		4 |   resource_group_name      = data.azurerm_resource_group.example.name
		5 |   location                 = data.azurerm_resource_group.example.location
		6 |   account_tier             = "Standard"
		7 |   account_replication_type = "GRS"
		8 | }


Check: CKV_AZURE_33: "Ensure Storage logging is enabled for Queue service for read, write and delete requests"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountMinimumTlsVersion.tf:2-13

		2  | resource "azurerm_storage_account" "example" {
		3  |   name                     = "example"
		4  |   resource_group_name      = data.azurerm_resource_group.example.name
		5  |   location                 = data.azurerm_resource_group.example.location
		6  |   account_tier             = "Standard"
		7  |   account_replication_type = "GRS"
		8  |   network_rules {
		9  |     default_action             = "Allow"
		10 |     ip_rules                   = ["100.0.0.1"]
		11 |     virtual_network_subnet_ids = [azurerm_subnet.example.id]
		12 |   }
		13 | }


Check: CKV_AZURE_35: "Ensure default network access rule for Storage Accounts is set to deny"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountMinimumTlsVersion.tf:2-13

		2  | resource "azurerm_storage_account" "example" {
		3  |   name                     = "example"
		4  |   resource_group_name      = data.azurerm_resource_group.example.name
		5  |   location                 = data.azurerm_resource_group.example.location
		6  |   account_tier             = "Standard"
		7  |   account_replication_type = "GRS"
		8  |   network_rules {
		9  |     default_action             = "Allow"
		10 |     ip_rules                   = ["100.0.0.1"]
		11 |     virtual_network_subnet_ids = [azurerm_subnet.example.id]
		12 |   }
		13 | }


Check: CKV_AZURE_44: "Ensure Storage Account is using the latest version of TLS encryption"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountMinimumTlsVersion.tf:2-13

		2  | resource "azurerm_storage_account" "example" {
		3  |   name                     = "example"
		4  |   resource_group_name      = data.azurerm_resource_group.example.name
		5  |   location                 = data.azurerm_resource_group.example.location
		6  |   account_tier             = "Standard"
		7  |   account_replication_type = "GRS"
		8  |   network_rules {
		9  |     default_action             = "Allow"
		10 |     ip_rules                   = ["100.0.0.1"]
		11 |     virtual_network_subnet_ids = [azurerm_subnet.example.id]
		12 |   }
		13 | }


Check: CKV_AZURE_3: "Ensure that 'Secure transfer required' is set to 'Enabled'"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountMinimumTlsVersion.tf:2-13

		2  | resource "azurerm_storage_account" "example" {
		3  |   name                     = "example"
		4  |   resource_group_name      = data.azurerm_resource_group.example.name
		5  |   location                 = data.azurerm_resource_group.example.location
		6  |   account_tier             = "Standard"
		7  |   account_replication_type = "GRS"
		8  |   network_rules {
		9  |     default_action             = "Allow"
		10 |     ip_rules                   = ["100.0.0.1"]
		11 |     virtual_network_subnet_ids = [azurerm_subnet.example.id]
		12 |   }
		13 | }


Check: CKV_AZURE_33: "Ensure Storage logging is enabled for Queue service for read, write and delete requests"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountName.tf:2-8

		2 | resource "azurerm_storage_account" "example" {
		3 |   name                     = "this-is-wrong"
		4 |   resource_group_name      = data.azurerm_resource_group.example.name
		5 |   location                 = data.azurerm_resource_group.example.location
		6 |   account_tier             = "Standard"
		7 |   account_replication_type = "GRS"
		8 | }


Check: CKV_AZURE_43: "Ensure Storage Accounts adhere to the naming rules"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountName.tf:2-8

		2 | resource "azurerm_storage_account" "example" {
		3 |   name                     = "this-is-wrong"
		4 |   resource_group_name      = data.azurerm_resource_group.example.name
		5 |   location                 = data.azurerm_resource_group.example.location
		6 |   account_tier             = "Standard"
		7 |   account_replication_type = "GRS"
		8 | }


Check: CKV_AZURE_35: "Ensure default network access rule for Storage Accounts is set to deny"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountName.tf:2-8

		2 | resource "azurerm_storage_account" "example" {
		3 |   name                     = "this-is-wrong"
		4 |   resource_group_name      = data.azurerm_resource_group.example.name
		5 |   location                 = data.azurerm_resource_group.example.location
		6 |   account_tier             = "Standard"
		7 |   account_replication_type = "GRS"
		8 | }


Check: CKV_AZURE_44: "Ensure Storage Account is using the latest version of TLS encryption"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountName.tf:2-8

		2 | resource "azurerm_storage_account" "example" {
		3 |   name                     = "this-is-wrong"
		4 |   resource_group_name      = data.azurerm_resource_group.example.name
		5 |   location                 = data.azurerm_resource_group.example.location
		6 |   account_tier             = "Standard"
		7 |   account_replication_type = "GRS"
		8 | }


Check: CKV_AZURE_3: "Ensure that 'Secure transfer required' is set to 'Enabled'"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/StorageAccountName.tf:2-8

		2 | resource "azurerm_storage_account" "example" {
		3 |   name                     = "this-is-wrong"
		4 |   resource_group_name      = data.azurerm_resource_group.example.name
		5 |   location                 = data.azurerm_resource_group.example.location
		6 |   account_tier             = "Standard"
		7 |   account_replication_type = "GRS"
		8 | }


Check: CKV_AZURE_34: "Ensure that 'Public access level' is set to Private for blob containers"
	FAILED for resource: azurerm_storage_container.example
	File: /terraform/azurerm/storage/StorageBlobServiceContainerPrivateAccess.tf:2-6

		2 | resource "azurerm_storage_container" "example" {
		3 |   name                  = "vhds"
		4 |   storage_account_name  = azurerm_storage_account.example.name
		5 |   container_access_type = "blob"
		6 | }


Check: CKV_AZURE_64: "Ensure that Azure File Sync disables public network access"
	FAILED for resource: azurerm_storage_sync.test
	File: /terraform/azurerm/storage/StorageSyncPublicAccessDisabled.tf:2-9

		2 | resource "azurerm_storage_sync" "test" {
		3 |   name                = "example-storage-sync"
		4 |   resource_group_name = azurerm_resource_group.test.name
		5 |   location            = azurerm_resource_group.test.location
		6 |   tags = {
		7 |     foo = "bar"
		8 |   }
		9 | }


Check: CKV_AZURE_33: "Ensure Storage logging is enabled for Queue service for read, write and delete requests"
	FAILED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/allow-microsoft-service-bypass.tf:3-21

		3  | resource "azurerm_storage_account" "fail" {
		4  |   name                = "storageaccountname"
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   location                 = azurerm_resource_group.example.location
		8  |   account_tier             = "Standard"
		9  |   account_replication_type = "LRS"
		10 |
		11 |   network_rules {
		12 |     default_action             = "Deny"
		13 |     ip_rules                   = ["100.0.0.1"]
		14 |     virtual_network_subnet_ids = [azurerm_subnet.example.id]
		15 |     bypass                     = ["Metrics"]
		16 |   }
		17 |
		18 |   tags = {
		19 |     environment = "staging"
		20 |   }
		21 | }


Check: CKV_AZURE_44: "Ensure Storage Account is using the latest version of TLS encryption"
	FAILED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/allow-microsoft-service-bypass.tf:3-21

		3  | resource "azurerm_storage_account" "fail" {
		4  |   name                = "storageaccountname"
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   location                 = azurerm_resource_group.example.location
		8  |   account_tier             = "Standard"
		9  |   account_replication_type = "LRS"
		10 |
		11 |   network_rules {
		12 |     default_action             = "Deny"
		13 |     ip_rules                   = ["100.0.0.1"]
		14 |     virtual_network_subnet_ids = [azurerm_subnet.example.id]
		15 |     bypass                     = ["Metrics"]
		16 |   }
		17 |
		18 |   tags = {
		19 |     environment = "staging"
		20 |   }
		21 | }


Check: CKV_AZURE_36: "Ensure 'Trusted Microsoft Services' is enabled for Storage Account access"
	FAILED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/allow-microsoft-service-bypass.tf:3-21

		3  | resource "azurerm_storage_account" "fail" {
		4  |   name                = "storageaccountname"
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   location                 = azurerm_resource_group.example.location
		8  |   account_tier             = "Standard"
		9  |   account_replication_type = "LRS"
		10 |
		11 |   network_rules {
		12 |     default_action             = "Deny"
		13 |     ip_rules                   = ["100.0.0.1"]
		14 |     virtual_network_subnet_ids = [azurerm_subnet.example.id]
		15 |     bypass                     = ["Metrics"]
		16 |   }
		17 |
		18 |   tags = {
		19 |     environment = "staging"
		20 |   }
		21 | }


Check: CKV_AZURE_3: "Ensure that 'Secure transfer required' is set to 'Enabled'"
	FAILED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/allow-microsoft-service-bypass.tf:3-21

		3  | resource "azurerm_storage_account" "fail" {
		4  |   name                = "storageaccountname"
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   location                 = azurerm_resource_group.example.location
		8  |   account_tier             = "Standard"
		9  |   account_replication_type = "LRS"
		10 |
		11 |   network_rules {
		12 |     default_action             = "Deny"
		13 |     ip_rules                   = ["100.0.0.1"]
		14 |     virtual_network_subnet_ids = [azurerm_subnet.example.id]
		15 |     bypass                     = ["Metrics"]
		16 |   }
		17 |
		18 |   tags = {
		19 |     environment = "staging"
		20 |   }
		21 | }


Check: CKV_AZURE_35: "Ensure default network access rule for Storage Accounts is set to deny"
	FAILED for resource: azurerm_storage_account_network_rules.test
	File: /terraform/azurerm/storage/allow-microsoft-service-bypass.tf:23-31

		23 | resource "azurerm_storage_account_network_rules" "test" {
		24 |   resource_group_name  = azurerm_resource_group.test.name
		25 |   storage_account_name = azurerm_storage_account.test.name
		26 |
		27 |   default_action             = "Allow"
		28 |   ip_rules                   = ["127.0.0.1"]
		29 |   virtual_network_subnet_ids = [azurerm_subnet.test.id]
		30 |   bypass                     = ["Metrics"]
		31 | }


Check: CKV_AZURE_34: "Ensure that 'Public access level' is set to Private for blob containers"
	FAILED for resource: azurerm_storage_container.fail
	File: /terraform/azurerm/storage/container-activity-logs-not-public.tf:3-6

		3 | resource "azurerm_storage_container" "fail" {
		4 |   name                  = "terraform-container-storage"
		5 |   container_access_type = "public"
		6 | }


Check: CKV_AZURE_35: "Ensure default network access rule for Storage Accounts is set to deny"
	FAILED for resource: azurerm_storage_account_network_rules.fail
	File: /terraform/azurerm/storage/default-action-deny.tf:2-8

		2 | resource "azurerm_storage_account_network_rules" "fail" {
		3 |
		4 |   default_action             = "Allow"
		5 |   ip_rules                   = ["127.0.0.1"]
		6 |   virtual_network_subnet_ids = [azurerm_subnet.test.id]
		7 |   bypass                     = ["Metrics"]
		8 | }


Check: CKV_AZURE_33: "Ensure Storage logging is enabled for Queue service for read, write and delete requests"
	FAILED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/enforce-https.tf:3-10

		3  | resource "azurerm_storage_account" "fail" {
		4  |   name                      = "storageaccountname"
		5  |   resource_group_name       = azurerm_resource_group.example.name
		6  |   location                  = azurerm_resource_group.example.location
		7  |   account_tier              = "Standard"
		8  |   account_replication_type  = "GRS"
		9  |   enable_https_traffic_only = false
		10 | }


Check: CKV_AZURE_60: "Ensure that storage account enables secure transfer"
	FAILED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/enforce-https.tf:3-10

		3  | resource "azurerm_storage_account" "fail" {
		4  |   name                      = "storageaccountname"
		5  |   resource_group_name       = azurerm_resource_group.example.name
		6  |   location                  = azurerm_resource_group.example.location
		7  |   account_tier              = "Standard"
		8  |   account_replication_type  = "GRS"
		9  |   enable_https_traffic_only = false
		10 | }


Check: CKV_AZURE_35: "Ensure default network access rule for Storage Accounts is set to deny"
	FAILED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/enforce-https.tf:3-10

		3  | resource "azurerm_storage_account" "fail" {
		4  |   name                      = "storageaccountname"
		5  |   resource_group_name       = azurerm_resource_group.example.name
		6  |   location                  = azurerm_resource_group.example.location
		7  |   account_tier              = "Standard"
		8  |   account_replication_type  = "GRS"
		9  |   enable_https_traffic_only = false
		10 | }


Check: CKV_AZURE_44: "Ensure Storage Account is using the latest version of TLS encryption"
	FAILED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/enforce-https.tf:3-10

		3  | resource "azurerm_storage_account" "fail" {
		4  |   name                      = "storageaccountname"
		5  |   resource_group_name       = azurerm_resource_group.example.name
		6  |   location                  = azurerm_resource_group.example.location
		7  |   account_tier              = "Standard"
		8  |   account_replication_type  = "GRS"
		9  |   enable_https_traffic_only = false
		10 | }


Check: CKV_AZURE_3: "Ensure that 'Secure transfer required' is set to 'Enabled'"
	FAILED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/enforce-https.tf:3-10

		3  | resource "azurerm_storage_account" "fail" {
		4  |   name                      = "storageaccountname"
		5  |   resource_group_name       = azurerm_resource_group.example.name
		6  |   location                  = azurerm_resource_group.example.location
		7  |   account_tier              = "Standard"
		8  |   account_replication_type  = "GRS"
		9  |   enable_https_traffic_only = false
		10 | }


Check: CKV_AZURE_36: "Ensure 'Trusted Microsoft Services' is enabled for Storage Account access"
	FAILED for resource: azurerm_storage_account_network_rules.test
	File: /terraform/azurerm/storage/netrules.tf:1-9

		1 | resource "azurerm_storage_account_network_rules" "test" {
		2 |   resource_group_name  = azurerm_resource_group.example.name
		3 |   storage_account_name = azurerm_storage_account.example.name
		4 |
		5 |   default_action             = "Deny"
		6 |   ip_rules                   = ["127.0.0.1"]
		7 |   virtual_network_subnet_ids = [azurerm_subnet.test.id]
		8 |   bypass                     = ["Metrics"]
		9 | }


Check: CKV_AZURE_33: "Ensure Storage logging is enabled for Queue service for read, write and delete requests"
	FAILED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/queue-services-logging-enabled.tf:3-11

		3  | resource "azurerm_storage_account" "fail" {
		4  |   name                     = "example"
		5  |   resource_group_name      = data.azurerm_resource_group.example.name
		6  |   location                 = data.azurerm_resource_group.example.location
		7  |   account_tier             = "Standard"
		8  |   account_replication_type = "GRS"
		9  |   queue_properties {
		10 |   }
		11 | }


Check: CKV_AZURE_35: "Ensure default network access rule for Storage Accounts is set to deny"
	FAILED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/queue-services-logging-enabled.tf:3-11

		3  | resource "azurerm_storage_account" "fail" {
		4  |   name                     = "example"
		5  |   resource_group_name      = data.azurerm_resource_group.example.name
		6  |   location                 = data.azurerm_resource_group.example.location
		7  |   account_tier             = "Standard"
		8  |   account_replication_type = "GRS"
		9  |   queue_properties {
		10 |   }
		11 | }


Check: CKV_AZURE_44: "Ensure Storage Account is using the latest version of TLS encryption"
	FAILED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/queue-services-logging-enabled.tf:3-11

		3  | resource "azurerm_storage_account" "fail" {
		4  |   name                     = "example"
		5  |   resource_group_name      = data.azurerm_resource_group.example.name
		6  |   location                 = data.azurerm_resource_group.example.location
		7  |   account_tier             = "Standard"
		8  |   account_replication_type = "GRS"
		9  |   queue_properties {
		10 |   }
		11 | }


Check: CKV_AZURE_3: "Ensure that 'Secure transfer required' is set to 'Enabled'"
	FAILED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/queue-services-logging-enabled.tf:3-11

		3  | resource "azurerm_storage_account" "fail" {
		4  |   name                     = "example"
		5  |   resource_group_name      = data.azurerm_resource_group.example.name
		6  |   location                 = data.azurerm_resource_group.example.location
		7  |   account_tier             = "Standard"
		8  |   account_replication_type = "GRS"
		9  |   queue_properties {
		10 |   }
		11 | }


Check: CKV_AZURE_33: "Ensure Storage logging is enabled for Queue service for read, write and delete requests"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/storage.tf:1-15

		1  | resource "azurerm_storage_account" "example" {
		2  |   name                      = "stor"
		3  |   resource_group_name       = azurerm_resource_group.example.name
		4  |   location                  = azurerm_resource_group.example.location
		5  |   account_tier              = "Standard"
		6  |   account_replication_type  = "GRS"
		7  |   enable_https_traffic_only = false
		8  |   allow_blob_public_access  = true
		9  |
		10 |   //to fail CKV_AZURE_35 && CKV_AZURE_36
		11 |   network_rules {
		12 |     default_action = "Deny"
		13 |     bypass         = ["Metrics"]
		14 |   }
		15 | }


Check: CKV_AZURE_59: "Ensure that Storage accounts disallow public access"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/storage.tf:1-15

		1  | resource "azurerm_storage_account" "example" {
		2  |   name                      = "stor"
		3  |   resource_group_name       = azurerm_resource_group.example.name
		4  |   location                  = azurerm_resource_group.example.location
		5  |   account_tier              = "Standard"
		6  |   account_replication_type  = "GRS"
		7  |   enable_https_traffic_only = false
		8  |   allow_blob_public_access  = true
		9  |
		10 |   //to fail CKV_AZURE_35 && CKV_AZURE_36
		11 |   network_rules {
		12 |     default_action = "Deny"
		13 |     bypass         = ["Metrics"]
		14 |   }
		15 | }


Check: CKV_AZURE_60: "Ensure that storage account enables secure transfer"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/storage.tf:1-15

		1  | resource "azurerm_storage_account" "example" {
		2  |   name                      = "stor"
		3  |   resource_group_name       = azurerm_resource_group.example.name
		4  |   location                  = azurerm_resource_group.example.location
		5  |   account_tier              = "Standard"
		6  |   account_replication_type  = "GRS"
		7  |   enable_https_traffic_only = false
		8  |   allow_blob_public_access  = true
		9  |
		10 |   //to fail CKV_AZURE_35 && CKV_AZURE_36
		11 |   network_rules {
		12 |     default_action = "Deny"
		13 |     bypass         = ["Metrics"]
		14 |   }
		15 | }


Check: CKV_AZURE_44: "Ensure Storage Account is using the latest version of TLS encryption"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/storage.tf:1-15

		1  | resource "azurerm_storage_account" "example" {
		2  |   name                      = "stor"
		3  |   resource_group_name       = azurerm_resource_group.example.name
		4  |   location                  = azurerm_resource_group.example.location
		5  |   account_tier              = "Standard"
		6  |   account_replication_type  = "GRS"
		7  |   enable_https_traffic_only = false
		8  |   allow_blob_public_access  = true
		9  |
		10 |   //to fail CKV_AZURE_35 && CKV_AZURE_36
		11 |   network_rules {
		12 |     default_action = "Deny"
		13 |     bypass         = ["Metrics"]
		14 |   }
		15 | }


Check: CKV_AZURE_36: "Ensure 'Trusted Microsoft Services' is enabled for Storage Account access"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/storage.tf:1-15

		1  | resource "azurerm_storage_account" "example" {
		2  |   name                      = "stor"
		3  |   resource_group_name       = azurerm_resource_group.example.name
		4  |   location                  = azurerm_resource_group.example.location
		5  |   account_tier              = "Standard"
		6  |   account_replication_type  = "GRS"
		7  |   enable_https_traffic_only = false
		8  |   allow_blob_public_access  = true
		9  |
		10 |   //to fail CKV_AZURE_35 && CKV_AZURE_36
		11 |   network_rules {
		12 |     default_action = "Deny"
		13 |     bypass         = ["Metrics"]
		14 |   }
		15 | }


Check: CKV_AZURE_3: "Ensure that 'Secure transfer required' is set to 'Enabled'"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/storage.tf:1-15

		1  | resource "azurerm_storage_account" "example" {
		2  |   name                      = "stor"
		3  |   resource_group_name       = azurerm_resource_group.example.name
		4  |   location                  = azurerm_resource_group.example.location
		5  |   account_tier              = "Standard"
		6  |   account_replication_type  = "GRS"
		7  |   enable_https_traffic_only = false
		8  |   allow_blob_public_access  = true
		9  |
		10 |   //to fail CKV_AZURE_35 && CKV_AZURE_36
		11 |   network_rules {
		12 |     default_action = "Deny"
		13 |     bypass         = ["Metrics"]
		14 |   }
		15 | }


Check: CKV_AZURE_33: "Ensure Storage logging is enabled for Queue service for read, write and delete requests"
	FAILED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/use-secure-tls-policy.tf:3-7

		3 | resource "azurerm_storage_account" "fail" {
		4 |   name                = "storageaccountname"
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   location            = azurerm_resource_group.example.location
		7 | }


Check: CKV_AZURE_35: "Ensure default network access rule for Storage Accounts is set to deny"
	FAILED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/use-secure-tls-policy.tf:3-7

		3 | resource "azurerm_storage_account" "fail" {
		4 |   name                = "storageaccountname"
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   location            = azurerm_resource_group.example.location
		7 | }


Check: CKV_AZURE_44: "Ensure Storage Account is using the latest version of TLS encryption"
	FAILED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/use-secure-tls-policy.tf:3-7

		3 | resource "azurerm_storage_account" "fail" {
		4 |   name                = "storageaccountname"
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   location            = azurerm_resource_group.example.location
		7 | }


Check: CKV_AZURE_3: "Ensure that 'Secure transfer required' is set to 'Enabled'"
	FAILED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/use-secure-tls-policy.tf:3-7

		3 | resource "azurerm_storage_account" "fail" {
		4 |   name                = "storageaccountname"
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   location            = azurerm_resource_group.example.location
		7 | }


Check: CKV_AZURE_58: "Ensure that Azure Synapse workspaces enables managed virtual networks"
	FAILED for resource: azurerm_synapse_workspace.example
	File: /terraform/azurerm/synapse/SynapseWorkspaceEnablesManagedVirtualNetworks.tf:2-19

		2  | resource "azurerm_synapse_workspace" "example" {
		3  |   name                                 = "example"
		4  |   resource_group_name                  = azurerm_resource_group.example.name
		5  |   location                             = azurerm_resource_group.example.location
		6  |   storage_data_lake_gen2_filesystem_id = azurerm_storage_data_lake_gen2_filesystem.example.id
		7  |   sql_administrator_login              = "sqladminuser"
		8  |   sql_administrator_login_password     = "H@Sh1CoR3!"
		9  |   managed_virtual_network_enabled      = false
		10 |   aad_admin {
		11 |     login     = "AzureAD Admin"
		12 |     object_id = "00000000-0000-0000-0000-000000000000"
		13 |     tenant_id = "00000000-0000-0000-0000-000000000000"
		14 |   }
		15 |
		16 |   tags = {
		17 |     Env = "production"
		18 |   }
		19 | }


Check: CKV_AZURE_58: "Ensure that Azure Synapse workspaces enables managed virtual networks"
	FAILED for resource: azurerm_synapse_workspace.fail
	File: /terraform/azurerm/synapse/virtual-network-enabled.tf:2-19

		2  | resource "azurerm_synapse_workspace" "fail" {
		3  |   name                                 = "example"
		4  |   resource_group_name                  = azurerm_resource_group.example.name
		5  |   location                             = azurerm_resource_group.example.location
		6  |   storage_data_lake_gen2_filesystem_id = azurerm_storage_data_lake_gen2_filesystem.example.id
		7  |   sql_administrator_login              = "sqladminuser"
		8  |   sql_administrator_login_password     = "H@Sh1CoR3!"
		9  |
		10 |   aad_admin {
		11 |     login     = "AzureAD Admin"
		12 |     object_id = "00000000-0000-0000-0000-000000000000"
		13 |     tenant_id = "00000000-0000-0000-0000-000000000000"
		14 |   }
		15 |
		16 |   tags = {
		17 |     Env = "production"
		18 |   }
		19 | }


Check: CKV_AZURE_97: "Ensure that Virtual machine scale sets have encryption at host enabled"
	FAILED for resource: azurerm_linux_virtual_machine_scale_set.example
	File: /terraform/azurerm/vms/ScaleSetPassword.tf:2-11

		2  | resource "azurerm_linux_virtual_machine_scale_set" "example" {
		3  |   name                            = var.scaleset_name
		4  |   resource_group_name             = var.resource_group.name
		5  |   location                        = var.resource_group.location
		6  |   sku                             = var.sku
		7  |   instances                       = var.instance_count
		8  |   admin_username                  = var.admin_username
		9  |   disable_password_authentication = false
		10 |   tags                            = var.common_tags
		11 | }


Check: CKV_AZURE_49: "Ensure Azure linux scale set does not use basic authentication(Use SSH Key Instead)"
	FAILED for resource: azurerm_linux_virtual_machine_scale_set.example
	File: /terraform/azurerm/vms/ScaleSetPassword.tf:2-11

		2  | resource "azurerm_linux_virtual_machine_scale_set" "example" {
		3  |   name                            = var.scaleset_name
		4  |   resource_group_name             = var.resource_group.name
		5  |   location                        = var.resource_group.location
		6  |   sku                             = var.sku
		7  |   instances                       = var.instance_count
		8  |   admin_username                  = var.admin_username
		9  |   disable_password_authentication = false
		10 |   tags                            = var.common_tags
		11 | }


Check: CKV_AZURE_45: "Ensure that no sensitive credentials are exposed in VM custom_data"
	FAILED for resource: azurerm_virtual_machine.secret
	File: /terraform/azurerm/vms/VMCredsInCustomData.tf:2-11

		2  | resource "azurerm_virtual_machine" "secret" {
		3  |   name = "${var.prefix}-vm"
		4  |
		5  |   os_profile {
		6  |     computer_name = "hostname"
		7  |     custom_data   = <<EOF
		8  | 0000-0000-0000-0000-000000000000
		9  | EOF
		10 |   }
		11 | }


Check: CKV_AZURE_97: "Ensure that Virtual machine scale sets have encryption at host enabled"
	FAILED for resource: azurerm_windows_virtual_machine_scale_set.example
	File: /terraform/azurerm/vms/VMEncryptionAtHostEnabled.tf:2-33

		2  | resource "azurerm_windows_virtual_machine_scale_set" "example" {
		3  |   name                = "example-vmss"
		4  |   resource_group_name = azurerm_resource_group.example.name
		5  |   location            = azurerm_resource_group.example.location
		6  |   sku                 = "Standard_F2"
		7  |   instances           = 1
		8  |   admin_password      = "P@55w0rd1234!"
		9  |   admin_username      = "adminuser"
		10 |
		11 |   source_image_reference {
		12 |     publisher = "MicrosoftWindowsServer"
		13 |     offer     = "WindowsServer"
		14 |     sku       = "2016-Datacenter-Server-Core"
		15 |     version   = "latest"
		16 |   }
		17 |
		18 |   os_disk {
		19 |     storage_account_type = "Standard_LRS"
		20 |     caching              = "ReadWrite"
		21 |   }
		22 |
		23 |   network_interface {
		24 |     name    = "example"
		25 |     primary = true
		26 |
		27 |     ip_configuration {
		28 |       name      = "internal"
		29 |       primary   = true
		30 |       subnet_id = azurerm_subnet.internal.id
		31 |     }
		32 |   }
		33 | }


Check: CKV_AZURE_95: "Ensure that automatic OS image patching is enabled for Virtual Machine Scale Sets"
	FAILED for resource: azurerm_virtual_machine_scale_set.example
	File: /terraform/azurerm/vms/VMScaleSetsAutoOSImagePatchingEnabled.tf:2-77

		2  | resource "azurerm_virtual_machine_scale_set" "example" {
		3  |   name                = "mytestscaleset-1"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   # automatic rolling upgrade
		8  |   upgrade_policy_mode = "Rolling"
		9  |
		10 |   rolling_upgrade_policy {
		11 |     max_batch_instance_percent              = 20
		12 |     max_unhealthy_instance_percent          = 20
		13 |     max_unhealthy_upgraded_instance_percent = 5
		14 |     pause_time_between_batches              = "PT0S"
		15 |   }
		16 |
		17 |   # required when using rolling upgrade policy
		18 |   health_probe_id = azurerm_lb_probe.example.id
		19 |
		20 |   sku {
		21 |     name     = "Standard_F2"
		22 |     tier     = "Standard"
		23 |     capacity = 2
		24 |   }
		25 |
		26 |   storage_profile_image_reference {
		27 |     publisher = "Canonical"
		28 |     offer     = "UbuntuServer"
		29 |     sku       = "16.04-LTS"
		30 |     version   = "latest"
		31 |   }
		32 |
		33 |   storage_profile_os_disk {
		34 |     name              = ""
		35 |     caching           = "ReadWrite"
		36 |     create_option     = "FromImage"
		37 |     managed_disk_type = "Standard_LRS"
		38 |   }
		39 |
		40 |   storage_profile_data_disk {
		41 |     lun           = 0
		42 |     caching       = "ReadWrite"
		43 |     create_option = "Empty"
		44 |     disk_size_gb  = 10
		45 |   }
		46 |
		47 |   os_profile {
		48 |     computer_name_prefix = "testvm"
		49 |     admin_username       = "myadmin"
		50 |   }
		51 |
		52 |   os_profile_linux_config {
		53 |     disable_password_authentication = true
		54 |
		55 |     ssh_keys {
		56 |       path     = "/home/myadmin/.ssh/authorized_keys"
		57 |       key_data = file("~/.ssh/demo_key.pub")
		58 |     }
		59 |   }
		60 |
		61 |   network_profile {
		62 |     name    = "terraformnetworkprofile"
		63 |     primary = true
		64 |
		65 |     ip_configuration {
		66 |       name                                   = "TestIPConfiguration"
		67 |       primary                                = true
		68 |       subnet_id                              = azurerm_subnet.example.id
		69 |       load_balancer_backend_address_pool_ids = [azurerm_lb_backend_address_pool.bpepool.id]
		70 |       load_balancer_inbound_nat_rules_ids    = [azurerm_lb_nat_pool.lbnatpool.id]
		71 |     }
		72 |   }
		73 |
		74 |   tags = {
		75 |     environment = "staging"
		76 |   }
		77 | }


Check: CKV_AZURE_92: "Ensure that Virtual Machines use managed disks"
	FAILED for resource: azurerm_linux_virtual_machine.example
	File: /terraform/azurerm/vms/VMStorageOsDisk.tf:2-30

		2  | resource "azurerm_linux_virtual_machine" "example" {
		3  |   name                  = "${var.prefix}-vm"
		4  |   location              = azurerm_resource_group.main.location
		5  |   resource_group_name   = azurerm_resource_group.main.name
		6  |   network_interface_ids = [azurerm_network_interface.main.id]
		7  |   vm_size               = "Standard_DS1_v2"
		8  |
		9  |   storage_image_reference {
		10 |     publisher = "Canonical"
		11 |     offer     = "UbuntuServer"
		12 |     sku       = "16.04-LTS"
		13 |     version   = "latest"
		14 |   }
		15 |   storage_os_disk {
		16 |     name              = "myosdisk1"
		17 |     caching           = "ReadWrite"
		18 |     create_option     = "FromImage"
		19 |     managed_disk_type = "Standard_LRS"
		20 |     vhd_uri           = "someURI"
		21 |   }
		22 |   os_profile {
		23 |     computer_name  = "hostname"
		24 |     admin_username = "testadmin"
		25 |     admin_password = "Password1234!"
		26 |   }
		27 |   tags = {
		28 |     environment = "staging"
		29 |   }
		30 | }


Check: CKV_AZURE_50: "Ensure Virtual Machine Extensions are not Installed"
	FAILED for resource: azurerm_linux_virtual_machine.example
	File: /terraform/azurerm/vms/VMStorageOsDisk.tf:2-30

		2  | resource "azurerm_linux_virtual_machine" "example" {
		3  |   name                  = "${var.prefix}-vm"
		4  |   location              = azurerm_resource_group.main.location
		5  |   resource_group_name   = azurerm_resource_group.main.name
		6  |   network_interface_ids = [azurerm_network_interface.main.id]
		7  |   vm_size               = "Standard_DS1_v2"
		8  |
		9  |   storage_image_reference {
		10 |     publisher = "Canonical"
		11 |     offer     = "UbuntuServer"
		12 |     sku       = "16.04-LTS"
		13 |     version   = "latest"
		14 |   }
		15 |   storage_os_disk {
		16 |     name              = "myosdisk1"
		17 |     caching           = "ReadWrite"
		18 |     create_option     = "FromImage"
		19 |     managed_disk_type = "Standard_LRS"
		20 |     vhd_uri           = "someURI"
		21 |   }
		22 |   os_profile {
		23 |     computer_name  = "hostname"
		24 |     admin_username = "testadmin"
		25 |     admin_password = "Password1234!"
		26 |   }
		27 |   tags = {
		28 |     environment = "staging"
		29 |   }
		30 | }


Check: CKV_AZURE_50: "Ensure Virtual Machine Extensions are not Installed"
	FAILED for resource: azurerm_linux_virtual_machine.default
	File: /terraform/azurerm/vms/linux_virtual_machine.tf:4-20

		4  | resource "azurerm_linux_virtual_machine" "default" {
		5  |   admin_password      = "admin"
		6  |   admin_username      = "admin123"
		7  |   location            = "azurerm_resource_group.test.location"
		8  |   name                = "linux-vm"
		9  |   resource_group_name = "azurerm_resource_group.test.name"
		10 |   size                = "Standard_F2"
		11 |
		12 |   network_interface_ids = [
		13 |     "azurerm_network_interface.test.id"
		14 |   ]
		15 |
		16 |   os_disk {
		17 |     caching              = "ReadWrite"
		18 |     storage_account_type = "Standard_LRS"
		19 |   }
		20 | }


Check: CKV_GIT_1: "Ensure Repository is Private"
	FAILED for resource: github_repository.fail
	File: /terraform/github/repositories/repository.tf:9-21

		9  | resource "github_repository" "fail" {
		10 |   name        = "example"
		11 |   description = "My awesome codebase"
		12 |
		13 |   visibility = "public"
		14 |
		15 |   template {
		16 |     owner      = "github"
		17 |     repository = "terraform-module-template"
		18 |   }
		19 |   vulnerability_alerts = false
		20 |
		21 | }


Check: CKV_GIT_2: "Ensure Repository Webhook uses secure Ssl"
	FAILED for resource: github_repository_webhook.foo
	File: /terraform/github/webhook/repository_webhook.tf:5-11

		5  | resource "github_repository_webhook" "foo" {
		6  |   repository = github_repository.repo.name
		7  |   name       = "web"
		8  |   configuration {
		9  |     insecure_ssl = true
		10 |   }
		11 | }


Check: CKV_GCP_15: "Ensure that BigQuery datasets are not anonymously or publicly accessible"
	FAILED for resource: google_bigquery_dataset.fail
	File: /terraform/google/bigquery/bigquery_dataset.tf:4-24

		4  | resource "google_bigquery_dataset" "fail" {
		5  |   dataset_id                  = "example_dataset"
		6  |   friendly_name               = "test"
		7  |   description                 = "This is a test description"
		8  |   location                    = "EU"
		9  |   default_table_expiration_ms = 3600000
		10 |
		11 |   labels = {
		12 |     env = "default"
		13 |   }
		14 |
		15 |   access {
		16 |     role          = "OWNER"
		17 |     special_group = "allAuthenticatedUsers"
		18 |   }
		19 |
		20 |   access {
		21 |     role   = "READER"
		22 |     domain = "hashicorp.com"
		23 |   }
		24 | }


Check: CKV_GCP_26: "Ensure that VPC Flow Logs is enabled for every subnet in a VPC Network"
	FAILED for resource: google_compute_subnetwork.without_logging
	File: /terraform/google/compute/SubnetworkLoggingEnabled.tf:3-8

		3 | resource "google_compute_subnetwork" "without_logging" {
		4 |   name          = "log-test-subnetwork"
		5 |   ip_cidr_range = "10.2.0.0/16"
		6 |   region        = "us-central1"
		7 |   network       = google_compute_network.custom-test.id
		8 | }


Check: CKV_GCP_37: "Ensure VM disks for critical VMs are encrypted with Customer Supplied Encryption Keys (CSEK)"
	FAILED for resource: google_compute_disk.default
	File: /terraform/google/compute/compute_disk.tf:4-10

		4  | resource "google_compute_disk" "default" {
		5  |   name                      = "test-disk"
		6  |   type                      = "pd-ssd"
		7  |   zone                      = "us-central1-a"
		8  |   image                     = "debian-8-jessie-v20170523"
		9  |   physical_block_size_bytes = 4096
		10 | }


Check: CKV_GCP_3: "Ensure Google compute firewall ingress does not allow unrestricted rdp access"
	FAILED for resource: google_compute_firewall.allow_all
	File: /terraform/google/compute/compute_firewall.tf:7-16

		7  | resource "google_compute_firewall" "allow_all" {
		8  |   name          = "terragoat-${var.environment}-firewall"
		9  |   network       = google_compute_network.vpc.id
		10 |   destination_ranges = ["0.0.0.0/0"]
		11 |   source_ranges = ["0.0.0.0/0"]
		12 |   allow {
		13 |     protocol = "tcp"
		14 |     ports    = ["0-65535"]
		15 |   }
		16 | }


Check: CKV_GCP_2: "Ensure Google compute firewall ingress does not allow unrestricted ssh access"
	FAILED for resource: google_compute_firewall.allow_all
	File: /terraform/google/compute/compute_firewall.tf:7-16

		7  | resource "google_compute_firewall" "allow_all" {
		8  |   name          = "terragoat-${var.environment}-firewall"
		9  |   network       = google_compute_network.vpc.id
		10 |   destination_ranges = ["0.0.0.0/0"]
		11 |   source_ranges = ["0.0.0.0/0"]
		12 |   allow {
		13 |     protocol = "tcp"
		14 |     ports    = ["0-65535"]
		15 |   }
		16 | }


Check: CKV_GCP_31: "Ensure that instances are not configured to use the default service account with full access to all Cloud APIs"
	FAILED for resource: google_compute_instance.default
	File: /terraform/google/compute/compute_instance.tf:13-40

		13 | resource "google_compute_instance" "default" {
		14 |   name         = "test"
		15 |   machine_type = "n1-standard-1"
		16 |   zone         = "us-central1-a"
		17 |   boot_disk {}
		18 |
		19 |   service_account {
		20 |     scopes = ["https://www.googleapis.com/auth/cloud-platform", "compute-ro", "storage-ro"]
		21 |   }
		22 |
		23 |   access_config {
		24 |     network_tier = "STANDARD"
		25 |   }
		26 |
		27 |   metadata = {
		28 |     block-project-ssh-keys = false
		29 |     serial-port-enable = true
		30 |     enable-oslogin     = false
		31 |   }
		32 |
		33 |   can_ip_forward = true
		34 |   enable_flow_logs= false
		35 |     service_account {
		36 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		37 |     email  = "1234567890-compute@developer.gserviceaccount.com"
		38 |     scopes = ["cloud-platform"]
		39 |   }
		40 | }


Check: CKV_GCP_36: "Ensure that IP forwarding is not enabled on Instances"
	FAILED for resource: google_compute_instance.default
	File: /terraform/google/compute/compute_instance.tf:13-40

		13 | resource "google_compute_instance" "default" {
		14 |   name         = "test"
		15 |   machine_type = "n1-standard-1"
		16 |   zone         = "us-central1-a"
		17 |   boot_disk {}
		18 |
		19 |   service_account {
		20 |     scopes = ["https://www.googleapis.com/auth/cloud-platform", "compute-ro", "storage-ro"]
		21 |   }
		22 |
		23 |   access_config {
		24 |     network_tier = "STANDARD"
		25 |   }
		26 |
		27 |   metadata = {
		28 |     block-project-ssh-keys = false
		29 |     serial-port-enable = true
		30 |     enable-oslogin     = false
		31 |   }
		32 |
		33 |   can_ip_forward = true
		34 |   enable_flow_logs= false
		35 |     service_account {
		36 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		37 |     email  = "1234567890-compute@developer.gserviceaccount.com"
		38 |     scopes = ["cloud-platform"]
		39 |   }
		40 | }


Check: CKV_GCP_34: "Ensure that no instance in the project overrides the project setting for enabling OSLogin(OSLogin needs to be enabled in project metadata for all instances)"
	FAILED for resource: google_compute_instance.default
	File: /terraform/google/compute/compute_instance.tf:13-40

		13 | resource "google_compute_instance" "default" {
		14 |   name         = "test"
		15 |   machine_type = "n1-standard-1"
		16 |   zone         = "us-central1-a"
		17 |   boot_disk {}
		18 |
		19 |   service_account {
		20 |     scopes = ["https://www.googleapis.com/auth/cloud-platform", "compute-ro", "storage-ro"]
		21 |   }
		22 |
		23 |   access_config {
		24 |     network_tier = "STANDARD"
		25 |   }
		26 |
		27 |   metadata = {
		28 |     block-project-ssh-keys = false
		29 |     serial-port-enable = true
		30 |     enable-oslogin     = false
		31 |   }
		32 |
		33 |   can_ip_forward = true
		34 |   enable_flow_logs= false
		35 |     service_account {
		36 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		37 |     email  = "1234567890-compute@developer.gserviceaccount.com"
		38 |     scopes = ["cloud-platform"]
		39 |   }
		40 | }


Check: CKV_GCP_32: "Ensure 'Block Project-wide SSH keys' is enabled for VM instances"
	FAILED for resource: google_compute_instance.default
	File: /terraform/google/compute/compute_instance.tf:13-40

		13 | resource "google_compute_instance" "default" {
		14 |   name         = "test"
		15 |   machine_type = "n1-standard-1"
		16 |   zone         = "us-central1-a"
		17 |   boot_disk {}
		18 |
		19 |   service_account {
		20 |     scopes = ["https://www.googleapis.com/auth/cloud-platform", "compute-ro", "storage-ro"]
		21 |   }
		22 |
		23 |   access_config {
		24 |     network_tier = "STANDARD"
		25 |   }
		26 |
		27 |   metadata = {
		28 |     block-project-ssh-keys = false
		29 |     serial-port-enable = true
		30 |     enable-oslogin     = false
		31 |   }
		32 |
		33 |   can_ip_forward = true
		34 |   enable_flow_logs= false
		35 |     service_account {
		36 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		37 |     email  = "1234567890-compute@developer.gserviceaccount.com"
		38 |     scopes = ["cloud-platform"]
		39 |   }
		40 | }


Check: CKV_GCP_38: "Ensure VM disks for critical VMs are encrypted with Customer Supplied Encryption Keys (CSEK)"
	FAILED for resource: google_compute_instance.default
	File: /terraform/google/compute/compute_instance.tf:13-40

		13 | resource "google_compute_instance" "default" {
		14 |   name         = "test"
		15 |   machine_type = "n1-standard-1"
		16 |   zone         = "us-central1-a"
		17 |   boot_disk {}
		18 |
		19 |   service_account {
		20 |     scopes = ["https://www.googleapis.com/auth/cloud-platform", "compute-ro", "storage-ro"]
		21 |   }
		22 |
		23 |   access_config {
		24 |     network_tier = "STANDARD"
		25 |   }
		26 |
		27 |   metadata = {
		28 |     block-project-ssh-keys = false
		29 |     serial-port-enable = true
		30 |     enable-oslogin     = false
		31 |   }
		32 |
		33 |   can_ip_forward = true
		34 |   enable_flow_logs= false
		35 |     service_account {
		36 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		37 |     email  = "1234567890-compute@developer.gserviceaccount.com"
		38 |     scopes = ["cloud-platform"]
		39 |   }
		40 | }


Check: CKV_GCP_30: "Ensure that instances are not configured to use the default service account"
	FAILED for resource: google_compute_instance.default
	File: /terraform/google/compute/compute_instance.tf:13-40

		13 | resource "google_compute_instance" "default" {
		14 |   name         = "test"
		15 |   machine_type = "n1-standard-1"
		16 |   zone         = "us-central1-a"
		17 |   boot_disk {}
		18 |
		19 |   service_account {
		20 |     scopes = ["https://www.googleapis.com/auth/cloud-platform", "compute-ro", "storage-ro"]
		21 |   }
		22 |
		23 |   access_config {
		24 |     network_tier = "STANDARD"
		25 |   }
		26 |
		27 |   metadata = {
		28 |     block-project-ssh-keys = false
		29 |     serial-port-enable = true
		30 |     enable-oslogin     = false
		31 |   }
		32 |
		33 |   can_ip_forward = true
		34 |   enable_flow_logs= false
		35 |     service_account {
		36 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		37 |     email  = "1234567890-compute@developer.gserviceaccount.com"
		38 |     scopes = ["cloud-platform"]
		39 |   }
		40 | }


Check: CKV_GCP_35: "Ensure 'Enable connecting to serial ports' is not enabled for VM Instance"
	FAILED for resource: google_compute_instance.default
	File: /terraform/google/compute/compute_instance.tf:13-40

		13 | resource "google_compute_instance" "default" {
		14 |   name         = "test"
		15 |   machine_type = "n1-standard-1"
		16 |   zone         = "us-central1-a"
		17 |   boot_disk {}
		18 |
		19 |   service_account {
		20 |     scopes = ["https://www.googleapis.com/auth/cloud-platform", "compute-ro", "storage-ro"]
		21 |   }
		22 |
		23 |   access_config {
		24 |     network_tier = "STANDARD"
		25 |   }
		26 |
		27 |   metadata = {
		28 |     block-project-ssh-keys = false
		29 |     serial-port-enable = true
		30 |     enable-oslogin     = false
		31 |   }
		32 |
		33 |   can_ip_forward = true
		34 |   enable_flow_logs= false
		35 |     service_account {
		36 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		37 |     email  = "1234567890-compute@developer.gserviceaccount.com"
		38 |     scopes = ["cloud-platform"]
		39 |   }
		40 | }


Check: CKV_GCP_39: "Ensure Compute instances are launched with Shielded VM enabled"
	FAILED for resource: google_compute_instance.default
	File: /terraform/google/compute/compute_instance.tf:13-40

		13 | resource "google_compute_instance" "default" {
		14 |   name         = "test"
		15 |   machine_type = "n1-standard-1"
		16 |   zone         = "us-central1-a"
		17 |   boot_disk {}
		18 |
		19 |   service_account {
		20 |     scopes = ["https://www.googleapis.com/auth/cloud-platform", "compute-ro", "storage-ro"]
		21 |   }
		22 |
		23 |   access_config {
		24 |     network_tier = "STANDARD"
		25 |   }
		26 |
		27 |   metadata = {
		28 |     block-project-ssh-keys = false
		29 |     serial-port-enable = true
		30 |     enable-oslogin     = false
		31 |   }
		32 |
		33 |   can_ip_forward = true
		34 |   enable_flow_logs= false
		35 |     service_account {
		36 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		37 |     email  = "1234567890-compute@developer.gserviceaccount.com"
		38 |     scopes = ["cloud-platform"]
		39 |   }
		40 | }


Check: CKV_GCP_40: "Ensure that Compute instances do not have public IP addresses"
	FAILED for resource: google_compute_instance.default
	File: /terraform/google/compute/compute_instance.tf:13-40

		13 | resource "google_compute_instance" "default" {
		14 |   name         = "test"
		15 |   machine_type = "n1-standard-1"
		16 |   zone         = "us-central1-a"
		17 |   boot_disk {}
		18 |
		19 |   service_account {
		20 |     scopes = ["https://www.googleapis.com/auth/cloud-platform", "compute-ro", "storage-ro"]
		21 |   }
		22 |
		23 |   access_config {
		24 |     network_tier = "STANDARD"
		25 |   }
		26 |
		27 |   metadata = {
		28 |     block-project-ssh-keys = false
		29 |     serial-port-enable = true
		30 |     enable-oslogin     = false
		31 |   }
		32 |
		33 |   can_ip_forward = true
		34 |   enable_flow_logs= false
		35 |     service_account {
		36 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		37 |     email  = "1234567890-compute@developer.gserviceaccount.com"
		38 |     scopes = ["cloud-platform"]
		39 |   }
		40 | }


Check: CKV_GCP_4: "Ensure no HTTPS or SSL proxy load balancers permit SSL policies with weak cipher suites"
	FAILED for resource: google_compute_ssl_policy.modern-profile
	File: /terraform/google/compute/compute_ssl_policy.tf:4-8

		4 | resource "google_compute_ssl_policy" "modern-profile" {
		5 |   name    = "nonprod-ssl-policy"
		6 |   profile = "MODERN"
		7 |   min_tls_version = "TLS_1_1"
		8 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.fail-flowlogs
	File: /terraform/google/container_cluster/EnableVPCFlowLogs.tf:11-89

		11 | resource "google_container_cluster" "fail-flowlogs" {
		12 |   name               = var.name
		13 |   location           = var.location
		14 |   initial_node_count = 1
		15 |   project            = data.google_project.project.name
		16 |
		17 |   network    = var.network
		18 |   subnetwork = var.subnetwork
		19 |
		20 |   ip_allocation_policy {
		21 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		22 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		23 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		24 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		25 |   }
		26 |
		27 |   remove_default_node_pool = var.remove_default_node_pool
		28 |
		29 |   min_master_version = "1.12"
		30 |
		31 |   node_config {
		32 |     workload_metadata_config {
		33 |       # node_metadata = "GKE_METADATA_SERVER"
		34 |     }
		35 |     shielded_instance_config {
		36 |       enable_integrity_monitoring = true
		37 |       enable_secure_boot          = true
		38 |     }
		39 |   }
		40 |
		41 |   release_channel {
		42 |     channel = var.release_channel
		43 |   }
		44 |
		45 |   master_auth {
		46 |
		47 |     client_certificate_config {
		48 |       issue_client_certificate = false
		49 |     }
		50 |   }
		51 |
		52 |   addons_config {
		53 |     http_load_balancing {
		54 |       disabled = var.http_load_balancing_disabled
		55 |     }
		56 |
		57 |     network_policy_config {
		58 |       disabled = var.network_policy_config_disabled
		59 |     }
		60 |   }
		61 |
		62 |   maintenance_policy {
		63 |     daily_maintenance_window {
		64 |       start_time = var.maintenance_window
		65 |     }
		66 |   }
		67 |
		68 |   private_cluster_config {
		69 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		70 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		71 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		72 |   }
		73 |
		74 |   master_authorized_networks_config {
		75 |     cidr_blocks {
		76 |       cidr_block = var.master_authorized_network_cidr
		77 |     }
		78 |   }
		79 |
		80 |   network_policy {
		81 |     enabled = true
		82 |   }
		83 |
		84 |   pod_security_policy_config {
		85 |     enabled = var.pod_security_policy_config_enabled
		86 |   }
		87 |
		88 |   resource_labels = var.resource_labels
		89 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.fail-flowlogs
	File: /terraform/google/container_cluster/EnableVPCFlowLogs.tf:11-89

		11 | resource "google_container_cluster" "fail-flowlogs" {
		12 |   name               = var.name
		13 |   location           = var.location
		14 |   initial_node_count = 1
		15 |   project            = data.google_project.project.name
		16 |
		17 |   network    = var.network
		18 |   subnetwork = var.subnetwork
		19 |
		20 |   ip_allocation_policy {
		21 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		22 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		23 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		24 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		25 |   }
		26 |
		27 |   remove_default_node_pool = var.remove_default_node_pool
		28 |
		29 |   min_master_version = "1.12"
		30 |
		31 |   node_config {
		32 |     workload_metadata_config {
		33 |       # node_metadata = "GKE_METADATA_SERVER"
		34 |     }
		35 |     shielded_instance_config {
		36 |       enable_integrity_monitoring = true
		37 |       enable_secure_boot          = true
		38 |     }
		39 |   }
		40 |
		41 |   release_channel {
		42 |     channel = var.release_channel
		43 |   }
		44 |
		45 |   master_auth {
		46 |
		47 |     client_certificate_config {
		48 |       issue_client_certificate = false
		49 |     }
		50 |   }
		51 |
		52 |   addons_config {
		53 |     http_load_balancing {
		54 |       disabled = var.http_load_balancing_disabled
		55 |     }
		56 |
		57 |     network_policy_config {
		58 |       disabled = var.network_policy_config_disabled
		59 |     }
		60 |   }
		61 |
		62 |   maintenance_policy {
		63 |     daily_maintenance_window {
		64 |       start_time = var.maintenance_window
		65 |     }
		66 |   }
		67 |
		68 |   private_cluster_config {
		69 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		70 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		71 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		72 |   }
		73 |
		74 |   master_authorized_networks_config {
		75 |     cidr_blocks {
		76 |       cidr_block = var.master_authorized_network_cidr
		77 |     }
		78 |   }
		79 |
		80 |   network_policy {
		81 |     enabled = true
		82 |   }
		83 |
		84 |   pod_security_policy_config {
		85 |     enabled = var.pod_security_policy_config_enabled
		86 |   }
		87 |
		88 |   resource_labels = var.resource_labels
		89 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail-flowlogs
	File: /terraform/google/container_cluster/EnableVPCFlowLogs.tf:11-89

		11 | resource "google_container_cluster" "fail-flowlogs" {
		12 |   name               = var.name
		13 |   location           = var.location
		14 |   initial_node_count = 1
		15 |   project            = data.google_project.project.name
		16 |
		17 |   network    = var.network
		18 |   subnetwork = var.subnetwork
		19 |
		20 |   ip_allocation_policy {
		21 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		22 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		23 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		24 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		25 |   }
		26 |
		27 |   remove_default_node_pool = var.remove_default_node_pool
		28 |
		29 |   min_master_version = "1.12"
		30 |
		31 |   node_config {
		32 |     workload_metadata_config {
		33 |       # node_metadata = "GKE_METADATA_SERVER"
		34 |     }
		35 |     shielded_instance_config {
		36 |       enable_integrity_monitoring = true
		37 |       enable_secure_boot          = true
		38 |     }
		39 |   }
		40 |
		41 |   release_channel {
		42 |     channel = var.release_channel
		43 |   }
		44 |
		45 |   master_auth {
		46 |
		47 |     client_certificate_config {
		48 |       issue_client_certificate = false
		49 |     }
		50 |   }
		51 |
		52 |   addons_config {
		53 |     http_load_balancing {
		54 |       disabled = var.http_load_balancing_disabled
		55 |     }
		56 |
		57 |     network_policy_config {
		58 |       disabled = var.network_policy_config_disabled
		59 |     }
		60 |   }
		61 |
		62 |   maintenance_policy {
		63 |     daily_maintenance_window {
		64 |       start_time = var.maintenance_window
		65 |     }
		66 |   }
		67 |
		68 |   private_cluster_config {
		69 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		70 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		71 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		72 |   }
		73 |
		74 |   master_authorized_networks_config {
		75 |     cidr_blocks {
		76 |       cidr_block = var.master_authorized_network_cidr
		77 |     }
		78 |   }
		79 |
		80 |   network_policy {
		81 |     enabled = true
		82 |   }
		83 |
		84 |   pod_security_policy_config {
		85 |     enabled = var.pod_security_policy_config_enabled
		86 |   }
		87 |
		88 |   resource_labels = var.resource_labels
		89 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.fail-flowlogs
	File: /terraform/google/container_cluster/EnableVPCFlowLogs.tf:11-89

		11 | resource "google_container_cluster" "fail-flowlogs" {
		12 |   name               = var.name
		13 |   location           = var.location
		14 |   initial_node_count = 1
		15 |   project            = data.google_project.project.name
		16 |
		17 |   network    = var.network
		18 |   subnetwork = var.subnetwork
		19 |
		20 |   ip_allocation_policy {
		21 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		22 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		23 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		24 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		25 |   }
		26 |
		27 |   remove_default_node_pool = var.remove_default_node_pool
		28 |
		29 |   min_master_version = "1.12"
		30 |
		31 |   node_config {
		32 |     workload_metadata_config {
		33 |       # node_metadata = "GKE_METADATA_SERVER"
		34 |     }
		35 |     shielded_instance_config {
		36 |       enable_integrity_monitoring = true
		37 |       enable_secure_boot          = true
		38 |     }
		39 |   }
		40 |
		41 |   release_channel {
		42 |     channel = var.release_channel
		43 |   }
		44 |
		45 |   master_auth {
		46 |
		47 |     client_certificate_config {
		48 |       issue_client_certificate = false
		49 |     }
		50 |   }
		51 |
		52 |   addons_config {
		53 |     http_load_balancing {
		54 |       disabled = var.http_load_balancing_disabled
		55 |     }
		56 |
		57 |     network_policy_config {
		58 |       disabled = var.network_policy_config_disabled
		59 |     }
		60 |   }
		61 |
		62 |   maintenance_policy {
		63 |     daily_maintenance_window {
		64 |       start_time = var.maintenance_window
		65 |     }
		66 |   }
		67 |
		68 |   private_cluster_config {
		69 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		70 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		71 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		72 |   }
		73 |
		74 |   master_authorized_networks_config {
		75 |     cidr_blocks {
		76 |       cidr_block = var.master_authorized_network_cidr
		77 |     }
		78 |   }
		79 |
		80 |   network_policy {
		81 |     enabled = true
		82 |   }
		83 |
		84 |   pod_security_policy_config {
		85 |     enabled = var.pod_security_policy_config_enabled
		86 |   }
		87 |
		88 |   resource_labels = var.resource_labels
		89 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.fail-flowlogs
	File: /terraform/google/container_cluster/EnableVPCFlowLogs.tf:11-89

		11 | resource "google_container_cluster" "fail-flowlogs" {
		12 |   name               = var.name
		13 |   location           = var.location
		14 |   initial_node_count = 1
		15 |   project            = data.google_project.project.name
		16 |
		17 |   network    = var.network
		18 |   subnetwork = var.subnetwork
		19 |
		20 |   ip_allocation_policy {
		21 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		22 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		23 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		24 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		25 |   }
		26 |
		27 |   remove_default_node_pool = var.remove_default_node_pool
		28 |
		29 |   min_master_version = "1.12"
		30 |
		31 |   node_config {
		32 |     workload_metadata_config {
		33 |       # node_metadata = "GKE_METADATA_SERVER"
		34 |     }
		35 |     shielded_instance_config {
		36 |       enable_integrity_monitoring = true
		37 |       enable_secure_boot          = true
		38 |     }
		39 |   }
		40 |
		41 |   release_channel {
		42 |     channel = var.release_channel
		43 |   }
		44 |
		45 |   master_auth {
		46 |
		47 |     client_certificate_config {
		48 |       issue_client_certificate = false
		49 |     }
		50 |   }
		51 |
		52 |   addons_config {
		53 |     http_load_balancing {
		54 |       disabled = var.http_load_balancing_disabled
		55 |     }
		56 |
		57 |     network_policy_config {
		58 |       disabled = var.network_policy_config_disabled
		59 |     }
		60 |   }
		61 |
		62 |   maintenance_policy {
		63 |     daily_maintenance_window {
		64 |       start_time = var.maintenance_window
		65 |     }
		66 |   }
		67 |
		68 |   private_cluster_config {
		69 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		70 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		71 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		72 |   }
		73 |
		74 |   master_authorized_networks_config {
		75 |     cidr_blocks {
		76 |       cidr_block = var.master_authorized_network_cidr
		77 |     }
		78 |   }
		79 |
		80 |   network_policy {
		81 |     enabled = true
		82 |   }
		83 |
		84 |   pod_security_policy_config {
		85 |     enabled = var.pod_security_policy_config_enabled
		86 |   }
		87 |
		88 |   resource_labels = var.resource_labels
		89 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.fail-flowlogs
	File: /terraform/google/container_cluster/EnableVPCFlowLogs.tf:11-89

		11 | resource "google_container_cluster" "fail-flowlogs" {
		12 |   name               = var.name
		13 |   location           = var.location
		14 |   initial_node_count = 1
		15 |   project            = data.google_project.project.name
		16 |
		17 |   network    = var.network
		18 |   subnetwork = var.subnetwork
		19 |
		20 |   ip_allocation_policy {
		21 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		22 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		23 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		24 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		25 |   }
		26 |
		27 |   remove_default_node_pool = var.remove_default_node_pool
		28 |
		29 |   min_master_version = "1.12"
		30 |
		31 |   node_config {
		32 |     workload_metadata_config {
		33 |       # node_metadata = "GKE_METADATA_SERVER"
		34 |     }
		35 |     shielded_instance_config {
		36 |       enable_integrity_monitoring = true
		37 |       enable_secure_boot          = true
		38 |     }
		39 |   }
		40 |
		41 |   release_channel {
		42 |     channel = var.release_channel
		43 |   }
		44 |
		45 |   master_auth {
		46 |
		47 |     client_certificate_config {
		48 |       issue_client_certificate = false
		49 |     }
		50 |   }
		51 |
		52 |   addons_config {
		53 |     http_load_balancing {
		54 |       disabled = var.http_load_balancing_disabled
		55 |     }
		56 |
		57 |     network_policy_config {
		58 |       disabled = var.network_policy_config_disabled
		59 |     }
		60 |   }
		61 |
		62 |   maintenance_policy {
		63 |     daily_maintenance_window {
		64 |       start_time = var.maintenance_window
		65 |     }
		66 |   }
		67 |
		68 |   private_cluster_config {
		69 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		70 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		71 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		72 |   }
		73 |
		74 |   master_authorized_networks_config {
		75 |     cidr_blocks {
		76 |       cidr_block = var.master_authorized_network_cidr
		77 |     }
		78 |   }
		79 |
		80 |   network_policy {
		81 |     enabled = true
		82 |   }
		83 |
		84 |   pod_security_policy_config {
		85 |     enabled = var.pod_security_policy_config_enabled
		86 |   }
		87 |
		88 |   resource_labels = var.resource_labels
		89 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_cluster.fail-flowlogs
	File: /terraform/google/container_cluster/EnableVPCFlowLogs.tf:11-89

		11 | resource "google_container_cluster" "fail-flowlogs" {
		12 |   name               = var.name
		13 |   location           = var.location
		14 |   initial_node_count = 1
		15 |   project            = data.google_project.project.name
		16 |
		17 |   network    = var.network
		18 |   subnetwork = var.subnetwork
		19 |
		20 |   ip_allocation_policy {
		21 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		22 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		23 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		24 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		25 |   }
		26 |
		27 |   remove_default_node_pool = var.remove_default_node_pool
		28 |
		29 |   min_master_version = "1.12"
		30 |
		31 |   node_config {
		32 |     workload_metadata_config {
		33 |       # node_metadata = "GKE_METADATA_SERVER"
		34 |     }
		35 |     shielded_instance_config {
		36 |       enable_integrity_monitoring = true
		37 |       enable_secure_boot          = true
		38 |     }
		39 |   }
		40 |
		41 |   release_channel {
		42 |     channel = var.release_channel
		43 |   }
		44 |
		45 |   master_auth {
		46 |
		47 |     client_certificate_config {
		48 |       issue_client_certificate = false
		49 |     }
		50 |   }
		51 |
		52 |   addons_config {
		53 |     http_load_balancing {
		54 |       disabled = var.http_load_balancing_disabled
		55 |     }
		56 |
		57 |     network_policy_config {
		58 |       disabled = var.network_policy_config_disabled
		59 |     }
		60 |   }
		61 |
		62 |   maintenance_policy {
		63 |     daily_maintenance_window {
		64 |       start_time = var.maintenance_window
		65 |     }
		66 |   }
		67 |
		68 |   private_cluster_config {
		69 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		70 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		71 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		72 |   }
		73 |
		74 |   master_authorized_networks_config {
		75 |     cidr_blocks {
		76 |       cidr_block = var.master_authorized_network_cidr
		77 |     }
		78 |   }
		79 |
		80 |   network_policy {
		81 |     enabled = true
		82 |   }
		83 |
		84 |   pod_security_policy_config {
		85 |     enabled = var.pod_security_policy_config_enabled
		86 |   }
		87 |
		88 |   resource_labels = var.resource_labels
		89 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/IntegrityMonitoring.tf:1-78

		1  | resource "google_container_cluster" "fail" {
		2  |   name               = var.name
		3  |   location           = var.location
		4  |   initial_node_count = 1
		5  |   project            = data.google_project.project.name
		6  |
		7  |   network    = var.network
		8  |   subnetwork = var.subnetwork
		9  |
		10 |   ip_allocation_policy {
		11 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		12 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		13 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		14 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		15 |   }
		16 |
		17 |   remove_default_node_pool = var.remove_default_node_pool
		18 |
		19 |   node_config {
		20 |     workload_metadata_config {
		21 |       node_metadata = "GKE_METADATA_SERVER"
		22 |     }
		23 |
		24 |     shielded_instance_config {
		25 |       enable_integrity_monitoring = false
		26 |     }
		27 |   }
		28 |
		29 |
		30 |   release_channel {
		31 |     channel = var.release_channel
		32 |   }
		33 |
		34 |   master_auth {
		35 |
		36 |     client_certificate_config {
		37 |       issue_client_certificate = false
		38 |     }
		39 |   }
		40 |
		41 |   addons_config {
		42 |     http_load_balancing {
		43 |       disabled = var.http_load_balancing_disabled
		44 |     }
		45 |
		46 |     network_policy_config {
		47 |       disabled = var.network_policy_config_disabled
		48 |     }
		49 |   }
		50 |
		51 |   maintenance_policy {
		52 |     daily_maintenance_window {
		53 |       start_time = var.maintenance_window
		54 |     }
		55 |   }
		56 |
		57 |   private_cluster_config {
		58 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		59 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		60 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		61 |   }
		62 |
		63 |   master_authorized_networks_config {
		64 |     cidr_blocks {
		65 |       cidr_block = var.master_authorized_network_cidr
		66 |     }
		67 |   }
		68 |
		69 |   network_policy {
		70 |     enabled = true
		71 |   }
		72 |
		73 |   pod_security_policy_config {
		74 |     enabled = var.pod_security_policy_config_enabled
		75 |   }
		76 |
		77 |   resource_labels = var.resource_labels
		78 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/IntegrityMonitoring.tf:1-78

		1  | resource "google_container_cluster" "fail" {
		2  |   name               = var.name
		3  |   location           = var.location
		4  |   initial_node_count = 1
		5  |   project            = data.google_project.project.name
		6  |
		7  |   network    = var.network
		8  |   subnetwork = var.subnetwork
		9  |
		10 |   ip_allocation_policy {
		11 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		12 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		13 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		14 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		15 |   }
		16 |
		17 |   remove_default_node_pool = var.remove_default_node_pool
		18 |
		19 |   node_config {
		20 |     workload_metadata_config {
		21 |       node_metadata = "GKE_METADATA_SERVER"
		22 |     }
		23 |
		24 |     shielded_instance_config {
		25 |       enable_integrity_monitoring = false
		26 |     }
		27 |   }
		28 |
		29 |
		30 |   release_channel {
		31 |     channel = var.release_channel
		32 |   }
		33 |
		34 |   master_auth {
		35 |
		36 |     client_certificate_config {
		37 |       issue_client_certificate = false
		38 |     }
		39 |   }
		40 |
		41 |   addons_config {
		42 |     http_load_balancing {
		43 |       disabled = var.http_load_balancing_disabled
		44 |     }
		45 |
		46 |     network_policy_config {
		47 |       disabled = var.network_policy_config_disabled
		48 |     }
		49 |   }
		50 |
		51 |   maintenance_policy {
		52 |     daily_maintenance_window {
		53 |       start_time = var.maintenance_window
		54 |     }
		55 |   }
		56 |
		57 |   private_cluster_config {
		58 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		59 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		60 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		61 |   }
		62 |
		63 |   master_authorized_networks_config {
		64 |     cidr_blocks {
		65 |       cidr_block = var.master_authorized_network_cidr
		66 |     }
		67 |   }
		68 |
		69 |   network_policy {
		70 |     enabled = true
		71 |   }
		72 |
		73 |   pod_security_policy_config {
		74 |     enabled = var.pod_security_policy_config_enabled
		75 |   }
		76 |
		77 |   resource_labels = var.resource_labels
		78 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/IntegrityMonitoring.tf:1-78

		1  | resource "google_container_cluster" "fail" {
		2  |   name               = var.name
		3  |   location           = var.location
		4  |   initial_node_count = 1
		5  |   project            = data.google_project.project.name
		6  |
		7  |   network    = var.network
		8  |   subnetwork = var.subnetwork
		9  |
		10 |   ip_allocation_policy {
		11 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		12 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		13 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		14 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		15 |   }
		16 |
		17 |   remove_default_node_pool = var.remove_default_node_pool
		18 |
		19 |   node_config {
		20 |     workload_metadata_config {
		21 |       node_metadata = "GKE_METADATA_SERVER"
		22 |     }
		23 |
		24 |     shielded_instance_config {
		25 |       enable_integrity_monitoring = false
		26 |     }
		27 |   }
		28 |
		29 |
		30 |   release_channel {
		31 |     channel = var.release_channel
		32 |   }
		33 |
		34 |   master_auth {
		35 |
		36 |     client_certificate_config {
		37 |       issue_client_certificate = false
		38 |     }
		39 |   }
		40 |
		41 |   addons_config {
		42 |     http_load_balancing {
		43 |       disabled = var.http_load_balancing_disabled
		44 |     }
		45 |
		46 |     network_policy_config {
		47 |       disabled = var.network_policy_config_disabled
		48 |     }
		49 |   }
		50 |
		51 |   maintenance_policy {
		52 |     daily_maintenance_window {
		53 |       start_time = var.maintenance_window
		54 |     }
		55 |   }
		56 |
		57 |   private_cluster_config {
		58 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		59 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		60 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		61 |   }
		62 |
		63 |   master_authorized_networks_config {
		64 |     cidr_blocks {
		65 |       cidr_block = var.master_authorized_network_cidr
		66 |     }
		67 |   }
		68 |
		69 |   network_policy {
		70 |     enabled = true
		71 |   }
		72 |
		73 |   pod_security_policy_config {
		74 |     enabled = var.pod_security_policy_config_enabled
		75 |   }
		76 |
		77 |   resource_labels = var.resource_labels
		78 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/IntegrityMonitoring.tf:1-78

		1  | resource "google_container_cluster" "fail" {
		2  |   name               = var.name
		3  |   location           = var.location
		4  |   initial_node_count = 1
		5  |   project            = data.google_project.project.name
		6  |
		7  |   network    = var.network
		8  |   subnetwork = var.subnetwork
		9  |
		10 |   ip_allocation_policy {
		11 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		12 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		13 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		14 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		15 |   }
		16 |
		17 |   remove_default_node_pool = var.remove_default_node_pool
		18 |
		19 |   node_config {
		20 |     workload_metadata_config {
		21 |       node_metadata = "GKE_METADATA_SERVER"
		22 |     }
		23 |
		24 |     shielded_instance_config {
		25 |       enable_integrity_monitoring = false
		26 |     }
		27 |   }
		28 |
		29 |
		30 |   release_channel {
		31 |     channel = var.release_channel
		32 |   }
		33 |
		34 |   master_auth {
		35 |
		36 |     client_certificate_config {
		37 |       issue_client_certificate = false
		38 |     }
		39 |   }
		40 |
		41 |   addons_config {
		42 |     http_load_balancing {
		43 |       disabled = var.http_load_balancing_disabled
		44 |     }
		45 |
		46 |     network_policy_config {
		47 |       disabled = var.network_policy_config_disabled
		48 |     }
		49 |   }
		50 |
		51 |   maintenance_policy {
		52 |     daily_maintenance_window {
		53 |       start_time = var.maintenance_window
		54 |     }
		55 |   }
		56 |
		57 |   private_cluster_config {
		58 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		59 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		60 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		61 |   }
		62 |
		63 |   master_authorized_networks_config {
		64 |     cidr_blocks {
		65 |       cidr_block = var.master_authorized_network_cidr
		66 |     }
		67 |   }
		68 |
		69 |   network_policy {
		70 |     enabled = true
		71 |   }
		72 |
		73 |   pod_security_policy_config {
		74 |     enabled = var.pod_security_policy_config_enabled
		75 |   }
		76 |
		77 |   resource_labels = var.resource_labels
		78 | }


Check: CKV_GCP_68: "Ensure Secure Boot for Shielded GKE Nodes is Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/IntegrityMonitoring.tf:1-78

		1  | resource "google_container_cluster" "fail" {
		2  |   name               = var.name
		3  |   location           = var.location
		4  |   initial_node_count = 1
		5  |   project            = data.google_project.project.name
		6  |
		7  |   network    = var.network
		8  |   subnetwork = var.subnetwork
		9  |
		10 |   ip_allocation_policy {
		11 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		12 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		13 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		14 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		15 |   }
		16 |
		17 |   remove_default_node_pool = var.remove_default_node_pool
		18 |
		19 |   node_config {
		20 |     workload_metadata_config {
		21 |       node_metadata = "GKE_METADATA_SERVER"
		22 |     }
		23 |
		24 |     shielded_instance_config {
		25 |       enable_integrity_monitoring = false
		26 |     }
		27 |   }
		28 |
		29 |
		30 |   release_channel {
		31 |     channel = var.release_channel
		32 |   }
		33 |
		34 |   master_auth {
		35 |
		36 |     client_certificate_config {
		37 |       issue_client_certificate = false
		38 |     }
		39 |   }
		40 |
		41 |   addons_config {
		42 |     http_load_balancing {
		43 |       disabled = var.http_load_balancing_disabled
		44 |     }
		45 |
		46 |     network_policy_config {
		47 |       disabled = var.network_policy_config_disabled
		48 |     }
		49 |   }
		50 |
		51 |   maintenance_policy {
		52 |     daily_maintenance_window {
		53 |       start_time = var.maintenance_window
		54 |     }
		55 |   }
		56 |
		57 |   private_cluster_config {
		58 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		59 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		60 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		61 |   }
		62 |
		63 |   master_authorized_networks_config {
		64 |     cidr_blocks {
		65 |       cidr_block = var.master_authorized_network_cidr
		66 |     }
		67 |   }
		68 |
		69 |   network_policy {
		70 |     enabled = true
		71 |   }
		72 |
		73 |   pod_security_policy_config {
		74 |     enabled = var.pod_security_policy_config_enabled
		75 |   }
		76 |
		77 |   resource_labels = var.resource_labels
		78 | }


Check: CKV_GCP_72: "Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/IntegrityMonitoring.tf:1-78

		1  | resource "google_container_cluster" "fail" {
		2  |   name               = var.name
		3  |   location           = var.location
		4  |   initial_node_count = 1
		5  |   project            = data.google_project.project.name
		6  |
		7  |   network    = var.network
		8  |   subnetwork = var.subnetwork
		9  |
		10 |   ip_allocation_policy {
		11 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		12 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		13 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		14 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		15 |   }
		16 |
		17 |   remove_default_node_pool = var.remove_default_node_pool
		18 |
		19 |   node_config {
		20 |     workload_metadata_config {
		21 |       node_metadata = "GKE_METADATA_SERVER"
		22 |     }
		23 |
		24 |     shielded_instance_config {
		25 |       enable_integrity_monitoring = false
		26 |     }
		27 |   }
		28 |
		29 |
		30 |   release_channel {
		31 |     channel = var.release_channel
		32 |   }
		33 |
		34 |   master_auth {
		35 |
		36 |     client_certificate_config {
		37 |       issue_client_certificate = false
		38 |     }
		39 |   }
		40 |
		41 |   addons_config {
		42 |     http_load_balancing {
		43 |       disabled = var.http_load_balancing_disabled
		44 |     }
		45 |
		46 |     network_policy_config {
		47 |       disabled = var.network_policy_config_disabled
		48 |     }
		49 |   }
		50 |
		51 |   maintenance_policy {
		52 |     daily_maintenance_window {
		53 |       start_time = var.maintenance_window
		54 |     }
		55 |   }
		56 |
		57 |   private_cluster_config {
		58 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		59 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		60 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		61 |   }
		62 |
		63 |   master_authorized_networks_config {
		64 |     cidr_blocks {
		65 |       cidr_block = var.master_authorized_network_cidr
		66 |     }
		67 |   }
		68 |
		69 |   network_policy {
		70 |     enabled = true
		71 |   }
		72 |
		73 |   pod_security_policy_config {
		74 |     enabled = var.pod_security_policy_config_enabled
		75 |   }
		76 |
		77 |   resource_labels = var.resource_labels
		78 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/IntegrityMonitoring.tf:1-78

		1  | resource "google_container_cluster" "fail" {
		2  |   name               = var.name
		3  |   location           = var.location
		4  |   initial_node_count = 1
		5  |   project            = data.google_project.project.name
		6  |
		7  |   network    = var.network
		8  |   subnetwork = var.subnetwork
		9  |
		10 |   ip_allocation_policy {
		11 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		12 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		13 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		14 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		15 |   }
		16 |
		17 |   remove_default_node_pool = var.remove_default_node_pool
		18 |
		19 |   node_config {
		20 |     workload_metadata_config {
		21 |       node_metadata = "GKE_METADATA_SERVER"
		22 |     }
		23 |
		24 |     shielded_instance_config {
		25 |       enable_integrity_monitoring = false
		26 |     }
		27 |   }
		28 |
		29 |
		30 |   release_channel {
		31 |     channel = var.release_channel
		32 |   }
		33 |
		34 |   master_auth {
		35 |
		36 |     client_certificate_config {
		37 |       issue_client_certificate = false
		38 |     }
		39 |   }
		40 |
		41 |   addons_config {
		42 |     http_load_balancing {
		43 |       disabled = var.http_load_balancing_disabled
		44 |     }
		45 |
		46 |     network_policy_config {
		47 |       disabled = var.network_policy_config_disabled
		48 |     }
		49 |   }
		50 |
		51 |   maintenance_policy {
		52 |     daily_maintenance_window {
		53 |       start_time = var.maintenance_window
		54 |     }
		55 |   }
		56 |
		57 |   private_cluster_config {
		58 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		59 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		60 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		61 |   }
		62 |
		63 |   master_authorized_networks_config {
		64 |     cidr_blocks {
		65 |       cidr_block = var.master_authorized_network_cidr
		66 |     }
		67 |   }
		68 |
		69 |   network_policy {
		70 |     enabled = true
		71 |   }
		72 |
		73 |   pod_security_policy_config {
		74 |     enabled = var.pod_security_policy_config_enabled
		75 |   }
		76 |
		77 |   resource_labels = var.resource_labels
		78 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/IntegrityMonitoring.tf:1-78

		1  | resource "google_container_cluster" "fail" {
		2  |   name               = var.name
		3  |   location           = var.location
		4  |   initial_node_count = 1
		5  |   project            = data.google_project.project.name
		6  |
		7  |   network    = var.network
		8  |   subnetwork = var.subnetwork
		9  |
		10 |   ip_allocation_policy {
		11 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		12 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		13 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		14 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		15 |   }
		16 |
		17 |   remove_default_node_pool = var.remove_default_node_pool
		18 |
		19 |   node_config {
		20 |     workload_metadata_config {
		21 |       node_metadata = "GKE_METADATA_SERVER"
		22 |     }
		23 |
		24 |     shielded_instance_config {
		25 |       enable_integrity_monitoring = false
		26 |     }
		27 |   }
		28 |
		29 |
		30 |   release_channel {
		31 |     channel = var.release_channel
		32 |   }
		33 |
		34 |   master_auth {
		35 |
		36 |     client_certificate_config {
		37 |       issue_client_certificate = false
		38 |     }
		39 |   }
		40 |
		41 |   addons_config {
		42 |     http_load_balancing {
		43 |       disabled = var.http_load_balancing_disabled
		44 |     }
		45 |
		46 |     network_policy_config {
		47 |       disabled = var.network_policy_config_disabled
		48 |     }
		49 |   }
		50 |
		51 |   maintenance_policy {
		52 |     daily_maintenance_window {
		53 |       start_time = var.maintenance_window
		54 |     }
		55 |   }
		56 |
		57 |   private_cluster_config {
		58 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		59 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		60 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		61 |   }
		62 |
		63 |   master_authorized_networks_config {
		64 |     cidr_blocks {
		65 |       cidr_block = var.master_authorized_network_cidr
		66 |     }
		67 |   }
		68 |
		69 |   network_policy {
		70 |     enabled = true
		71 |   }
		72 |
		73 |   pod_security_policy_config {
		74 |     enabled = var.pod_security_policy_config_enabled
		75 |   }
		76 |
		77 |   resource_labels = var.resource_labels
		78 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/IntegrityMonitoring.tf:1-78

		1  | resource "google_container_cluster" "fail" {
		2  |   name               = var.name
		3  |   location           = var.location
		4  |   initial_node_count = 1
		5  |   project            = data.google_project.project.name
		6  |
		7  |   network    = var.network
		8  |   subnetwork = var.subnetwork
		9  |
		10 |   ip_allocation_policy {
		11 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		12 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		13 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		14 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		15 |   }
		16 |
		17 |   remove_default_node_pool = var.remove_default_node_pool
		18 |
		19 |   node_config {
		20 |     workload_metadata_config {
		21 |       node_metadata = "GKE_METADATA_SERVER"
		22 |     }
		23 |
		24 |     shielded_instance_config {
		25 |       enable_integrity_monitoring = false
		26 |     }
		27 |   }
		28 |
		29 |
		30 |   release_channel {
		31 |     channel = var.release_channel
		32 |   }
		33 |
		34 |   master_auth {
		35 |
		36 |     client_certificate_config {
		37 |       issue_client_certificate = false
		38 |     }
		39 |   }
		40 |
		41 |   addons_config {
		42 |     http_load_balancing {
		43 |       disabled = var.http_load_balancing_disabled
		44 |     }
		45 |
		46 |     network_policy_config {
		47 |       disabled = var.network_policy_config_disabled
		48 |     }
		49 |   }
		50 |
		51 |   maintenance_policy {
		52 |     daily_maintenance_window {
		53 |       start_time = var.maintenance_window
		54 |     }
		55 |   }
		56 |
		57 |   private_cluster_config {
		58 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		59 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		60 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		61 |   }
		62 |
		63 |   master_authorized_networks_config {
		64 |     cidr_blocks {
		65 |       cidr_block = var.master_authorized_network_cidr
		66 |     }
		67 |   }
		68 |
		69 |   network_policy {
		70 |     enabled = true
		71 |   }
		72 |
		73 |   pod_security_policy_config {
		74 |     enabled = var.pod_security_policy_config_enabled
		75 |   }
		76 |
		77 |   resource_labels = var.resource_labels
		78 | }


Check: CKV_GCP_10: "Ensure 'Automatic node upgrade' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/container_cluster/IntegrityMonitoring.tf:80-108

		80  | resource "google_container_node_pool" "fail" {
		81  |   project  = data.google_project.project.name
		82  |   name     = var.node_pool["name"]
		83  |   location = var.location
		84  |   cluster  = google_container_cluster.cluster.name
		85  |
		86  |   node_count        = var.node_pool["node_count"]
		87  |   max_pods_per_node = var.node_pool["max_pods_per_node"]
		88  |
		89  |   node_config {
		90  |     machine_type = var.node_pool["machine_type"]
		91  |     disk_size_gb = var.node_pool["disk_size_gb"]
		92  |     disk_type    = var.node_pool["disk_type"]
		93  |
		94  |     shielded_instance_config {
		95  |       enable_integrity_monitoring = false
		96  |     }
		97  |
		98  |     oauth_scopes = [
		99  |       "https://www.googleapis.com/auth/compute",
		100 |       "https://www.googleapis.com/auth/devstorage.read_only",
		101 |       "https://www.googleapis.com/auth/logging.write",
		102 |       "https://www.googleapis.com/auth/monitoring",
		103 |     ]
		104 |     workload_metadata_config {
		105 |       node_metadata = "GKE_METADATA_SERVER"
		106 |     }
		107 |   }
		108 | }


Check: CKV_GCP_22: "Ensure Container-Optimized OS (cos) is used for Kubernetes Engine Clusters Node image"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/container_cluster/IntegrityMonitoring.tf:80-108

		80  | resource "google_container_node_pool" "fail" {
		81  |   project  = data.google_project.project.name
		82  |   name     = var.node_pool["name"]
		83  |   location = var.location
		84  |   cluster  = google_container_cluster.cluster.name
		85  |
		86  |   node_count        = var.node_pool["node_count"]
		87  |   max_pods_per_node = var.node_pool["max_pods_per_node"]
		88  |
		89  |   node_config {
		90  |     machine_type = var.node_pool["machine_type"]
		91  |     disk_size_gb = var.node_pool["disk_size_gb"]
		92  |     disk_type    = var.node_pool["disk_type"]
		93  |
		94  |     shielded_instance_config {
		95  |       enable_integrity_monitoring = false
		96  |     }
		97  |
		98  |     oauth_scopes = [
		99  |       "https://www.googleapis.com/auth/compute",
		100 |       "https://www.googleapis.com/auth/devstorage.read_only",
		101 |       "https://www.googleapis.com/auth/logging.write",
		102 |       "https://www.googleapis.com/auth/monitoring",
		103 |     ]
		104 |     workload_metadata_config {
		105 |       node_metadata = "GKE_METADATA_SERVER"
		106 |     }
		107 |   }
		108 | }


Check: CKV_GCP_68: "Ensure Secure Boot for Shielded GKE Nodes is Enabled"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/container_cluster/IntegrityMonitoring.tf:80-108

		80  | resource "google_container_node_pool" "fail" {
		81  |   project  = data.google_project.project.name
		82  |   name     = var.node_pool["name"]
		83  |   location = var.location
		84  |   cluster  = google_container_cluster.cluster.name
		85  |
		86  |   node_count        = var.node_pool["node_count"]
		87  |   max_pods_per_node = var.node_pool["max_pods_per_node"]
		88  |
		89  |   node_config {
		90  |     machine_type = var.node_pool["machine_type"]
		91  |     disk_size_gb = var.node_pool["disk_size_gb"]
		92  |     disk_type    = var.node_pool["disk_type"]
		93  |
		94  |     shielded_instance_config {
		95  |       enable_integrity_monitoring = false
		96  |     }
		97  |
		98  |     oauth_scopes = [
		99  |       "https://www.googleapis.com/auth/compute",
		100 |       "https://www.googleapis.com/auth/devstorage.read_only",
		101 |       "https://www.googleapis.com/auth/logging.write",
		102 |       "https://www.googleapis.com/auth/monitoring",
		103 |     ]
		104 |     workload_metadata_config {
		105 |       node_metadata = "GKE_METADATA_SERVER"
		106 |     }
		107 |   }
		108 | }


Check: CKV_GCP_72: "Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/container_cluster/IntegrityMonitoring.tf:80-108

		80  | resource "google_container_node_pool" "fail" {
		81  |   project  = data.google_project.project.name
		82  |   name     = var.node_pool["name"]
		83  |   location = var.location
		84  |   cluster  = google_container_cluster.cluster.name
		85  |
		86  |   node_count        = var.node_pool["node_count"]
		87  |   max_pods_per_node = var.node_pool["max_pods_per_node"]
		88  |
		89  |   node_config {
		90  |     machine_type = var.node_pool["machine_type"]
		91  |     disk_size_gb = var.node_pool["disk_size_gb"]
		92  |     disk_type    = var.node_pool["disk_type"]
		93  |
		94  |     shielded_instance_config {
		95  |       enable_integrity_monitoring = false
		96  |     }
		97  |
		98  |     oauth_scopes = [
		99  |       "https://www.googleapis.com/auth/compute",
		100 |       "https://www.googleapis.com/auth/devstorage.read_only",
		101 |       "https://www.googleapis.com/auth/logging.write",
		102 |       "https://www.googleapis.com/auth/monitoring",
		103 |     ]
		104 |     workload_metadata_config {
		105 |       node_metadata = "GKE_METADATA_SERVER"
		106 |     }
		107 |   }
		108 | }


Check: CKV_GCP_9: "Ensure 'Automatic node repair' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/container_cluster/IntegrityMonitoring.tf:80-108

		80  | resource "google_container_node_pool" "fail" {
		81  |   project  = data.google_project.project.name
		82  |   name     = var.node_pool["name"]
		83  |   location = var.location
		84  |   cluster  = google_container_cluster.cluster.name
		85  |
		86  |   node_count        = var.node_pool["node_count"]
		87  |   max_pods_per_node = var.node_pool["max_pods_per_node"]
		88  |
		89  |   node_config {
		90  |     machine_type = var.node_pool["machine_type"]
		91  |     disk_size_gb = var.node_pool["disk_size_gb"]
		92  |     disk_type    = var.node_pool["disk_type"]
		93  |
		94  |     shielded_instance_config {
		95  |       enable_integrity_monitoring = false
		96  |     }
		97  |
		98  |     oauth_scopes = [
		99  |       "https://www.googleapis.com/auth/compute",
		100 |       "https://www.googleapis.com/auth/devstorage.read_only",
		101 |       "https://www.googleapis.com/auth/logging.write",
		102 |       "https://www.googleapis.com/auth/monitoring",
		103 |     ]
		104 |     workload_metadata_config {
		105 |       node_metadata = "GKE_METADATA_SERVER"
		106 |     }
		107 |   }
		108 | }


Check: CKV_GCP_24: "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/PrivateNodes.tf:2-10

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/PrivateNodes.tf:2-10

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 | }


Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/PrivateNodes.tf:2-10

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 | }


Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/PrivateNodes.tf:2-10

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 | }


Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/PrivateNodes.tf:2-10

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 | }


Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/PrivateNodes.tf:2-10

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/PrivateNodes.tf:2-10

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/PrivateNodes.tf:2-10

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/PrivateNodes.tf:2-10

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 | }


Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/PrivateNodes.tf:2-10

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/PrivateNodes.tf:2-10

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/PrivateNodes.tf:2-10

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 | }


Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/PrivateNodes.tf:2-10

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/PrivateNodes.tf:2-10

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/PrivateNodes.tf:2-10

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 | }


Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/PrivateNodes.tf:2-10

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 | }


Check: CKV_GCP_24: "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/RBAC.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/RBAC.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/RBAC.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/RBAC.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/RBAC.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/RBAC.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/RBAC.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/RBAC.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/RBAC.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/RBAC.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/RBAC.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/RBAC.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/RBAC.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/RBAC.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/RBAC.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_24: "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/ReleaseChannel.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/ReleaseChannel.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/ReleaseChannel.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/ReleaseChannel.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/ReleaseChannel.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/ReleaseChannel.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/ReleaseChannel.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/ReleaseChannel.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/ReleaseChannel.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/ReleaseChannel.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/ReleaseChannel.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/ReleaseChannel.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/ReleaseChannel.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/ReleaseChannel.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/ReleaseChannel.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/ShieldedNodes.tf:2-74

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 |
		18 |   remove_default_node_pool = var.remove_default_node_pool
		19 |
		20 |   node_config {
		21 |     workload_metadata_config {
		22 |       node_metadata = "GKE_METADATA_SERVER"
		23 |     }
		24 |   }
		25 |
		26 |   release_channel {
		27 |     channel = var.release_channel
		28 |   }
		29 |
		30 |   master_auth {
		31 |
		32 |     client_certificate_config {
		33 |       issue_client_certificate = false
		34 |     }
		35 |   }
		36 |
		37 |   addons_config {
		38 |     http_load_balancing {
		39 |       disabled = var.http_load_balancing_disabled
		40 |     }
		41 |
		42 |     network_policy_config {
		43 |       disabled = var.network_policy_config_disabled
		44 |     }
		45 |   }
		46 |
		47 |   maintenance_policy {
		48 |     daily_maintenance_window {
		49 |       start_time = var.maintenance_window
		50 |     }
		51 |   }
		52 |
		53 |   private_cluster_config {
		54 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		55 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		56 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		57 |   }
		58 |
		59 |   master_authorized_networks_config {
		60 |     cidr_blocks {
		61 |       cidr_block = var.master_authorized_network_cidr
		62 |     }
		63 |   }
		64 |
		65 |   network_policy {
		66 |     enabled = true
		67 |   }
		68 |
		69 |   pod_security_policy_config {
		70 |     enabled = var.pod_security_policy_config_enabled
		71 |   }
		72 |
		73 |   resource_labels = var.resource_labels
		74 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/ShieldedNodes.tf:2-74

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 |
		18 |   remove_default_node_pool = var.remove_default_node_pool
		19 |
		20 |   node_config {
		21 |     workload_metadata_config {
		22 |       node_metadata = "GKE_METADATA_SERVER"
		23 |     }
		24 |   }
		25 |
		26 |   release_channel {
		27 |     channel = var.release_channel
		28 |   }
		29 |
		30 |   master_auth {
		31 |
		32 |     client_certificate_config {
		33 |       issue_client_certificate = false
		34 |     }
		35 |   }
		36 |
		37 |   addons_config {
		38 |     http_load_balancing {
		39 |       disabled = var.http_load_balancing_disabled
		40 |     }
		41 |
		42 |     network_policy_config {
		43 |       disabled = var.network_policy_config_disabled
		44 |     }
		45 |   }
		46 |
		47 |   maintenance_policy {
		48 |     daily_maintenance_window {
		49 |       start_time = var.maintenance_window
		50 |     }
		51 |   }
		52 |
		53 |   private_cluster_config {
		54 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		55 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		56 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		57 |   }
		58 |
		59 |   master_authorized_networks_config {
		60 |     cidr_blocks {
		61 |       cidr_block = var.master_authorized_network_cidr
		62 |     }
		63 |   }
		64 |
		65 |   network_policy {
		66 |     enabled = true
		67 |   }
		68 |
		69 |   pod_security_policy_config {
		70 |     enabled = var.pod_security_policy_config_enabled
		71 |   }
		72 |
		73 |   resource_labels = var.resource_labels
		74 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/ShieldedNodes.tf:2-74

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 |
		18 |   remove_default_node_pool = var.remove_default_node_pool
		19 |
		20 |   node_config {
		21 |     workload_metadata_config {
		22 |       node_metadata = "GKE_METADATA_SERVER"
		23 |     }
		24 |   }
		25 |
		26 |   release_channel {
		27 |     channel = var.release_channel
		28 |   }
		29 |
		30 |   master_auth {
		31 |
		32 |     client_certificate_config {
		33 |       issue_client_certificate = false
		34 |     }
		35 |   }
		36 |
		37 |   addons_config {
		38 |     http_load_balancing {
		39 |       disabled = var.http_load_balancing_disabled
		40 |     }
		41 |
		42 |     network_policy_config {
		43 |       disabled = var.network_policy_config_disabled
		44 |     }
		45 |   }
		46 |
		47 |   maintenance_policy {
		48 |     daily_maintenance_window {
		49 |       start_time = var.maintenance_window
		50 |     }
		51 |   }
		52 |
		53 |   private_cluster_config {
		54 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		55 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		56 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		57 |   }
		58 |
		59 |   master_authorized_networks_config {
		60 |     cidr_blocks {
		61 |       cidr_block = var.master_authorized_network_cidr
		62 |     }
		63 |   }
		64 |
		65 |   network_policy {
		66 |     enabled = true
		67 |   }
		68 |
		69 |   pod_security_policy_config {
		70 |     enabled = var.pod_security_policy_config_enabled
		71 |   }
		72 |
		73 |   resource_labels = var.resource_labels
		74 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/ShieldedNodes.tf:2-74

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 |
		18 |   remove_default_node_pool = var.remove_default_node_pool
		19 |
		20 |   node_config {
		21 |     workload_metadata_config {
		22 |       node_metadata = "GKE_METADATA_SERVER"
		23 |     }
		24 |   }
		25 |
		26 |   release_channel {
		27 |     channel = var.release_channel
		28 |   }
		29 |
		30 |   master_auth {
		31 |
		32 |     client_certificate_config {
		33 |       issue_client_certificate = false
		34 |     }
		35 |   }
		36 |
		37 |   addons_config {
		38 |     http_load_balancing {
		39 |       disabled = var.http_load_balancing_disabled
		40 |     }
		41 |
		42 |     network_policy_config {
		43 |       disabled = var.network_policy_config_disabled
		44 |     }
		45 |   }
		46 |
		47 |   maintenance_policy {
		48 |     daily_maintenance_window {
		49 |       start_time = var.maintenance_window
		50 |     }
		51 |   }
		52 |
		53 |   private_cluster_config {
		54 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		55 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		56 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		57 |   }
		58 |
		59 |   master_authorized_networks_config {
		60 |     cidr_blocks {
		61 |       cidr_block = var.master_authorized_network_cidr
		62 |     }
		63 |   }
		64 |
		65 |   network_policy {
		66 |     enabled = true
		67 |   }
		68 |
		69 |   pod_security_policy_config {
		70 |     enabled = var.pod_security_policy_config_enabled
		71 |   }
		72 |
		73 |   resource_labels = var.resource_labels
		74 | }


Check: CKV_GCP_68: "Ensure Secure Boot for Shielded GKE Nodes is Enabled"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/ShieldedNodes.tf:2-74

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 |
		18 |   remove_default_node_pool = var.remove_default_node_pool
		19 |
		20 |   node_config {
		21 |     workload_metadata_config {
		22 |       node_metadata = "GKE_METADATA_SERVER"
		23 |     }
		24 |   }
		25 |
		26 |   release_channel {
		27 |     channel = var.release_channel
		28 |   }
		29 |
		30 |   master_auth {
		31 |
		32 |     client_certificate_config {
		33 |       issue_client_certificate = false
		34 |     }
		35 |   }
		36 |
		37 |   addons_config {
		38 |     http_load_balancing {
		39 |       disabled = var.http_load_balancing_disabled
		40 |     }
		41 |
		42 |     network_policy_config {
		43 |       disabled = var.network_policy_config_disabled
		44 |     }
		45 |   }
		46 |
		47 |   maintenance_policy {
		48 |     daily_maintenance_window {
		49 |       start_time = var.maintenance_window
		50 |     }
		51 |   }
		52 |
		53 |   private_cluster_config {
		54 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		55 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		56 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		57 |   }
		58 |
		59 |   master_authorized_networks_config {
		60 |     cidr_blocks {
		61 |       cidr_block = var.master_authorized_network_cidr
		62 |     }
		63 |   }
		64 |
		65 |   network_policy {
		66 |     enabled = true
		67 |   }
		68 |
		69 |   pod_security_policy_config {
		70 |     enabled = var.pod_security_policy_config_enabled
		71 |   }
		72 |
		73 |   resource_labels = var.resource_labels
		74 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/ShieldedNodes.tf:2-74

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 |
		18 |   remove_default_node_pool = var.remove_default_node_pool
		19 |
		20 |   node_config {
		21 |     workload_metadata_config {
		22 |       node_metadata = "GKE_METADATA_SERVER"
		23 |     }
		24 |   }
		25 |
		26 |   release_channel {
		27 |     channel = var.release_channel
		28 |   }
		29 |
		30 |   master_auth {
		31 |
		32 |     client_certificate_config {
		33 |       issue_client_certificate = false
		34 |     }
		35 |   }
		36 |
		37 |   addons_config {
		38 |     http_load_balancing {
		39 |       disabled = var.http_load_balancing_disabled
		40 |     }
		41 |
		42 |     network_policy_config {
		43 |       disabled = var.network_policy_config_disabled
		44 |     }
		45 |   }
		46 |
		47 |   maintenance_policy {
		48 |     daily_maintenance_window {
		49 |       start_time = var.maintenance_window
		50 |     }
		51 |   }
		52 |
		53 |   private_cluster_config {
		54 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		55 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		56 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		57 |   }
		58 |
		59 |   master_authorized_networks_config {
		60 |     cidr_blocks {
		61 |       cidr_block = var.master_authorized_network_cidr
		62 |     }
		63 |   }
		64 |
		65 |   network_policy {
		66 |     enabled = true
		67 |   }
		68 |
		69 |   pod_security_policy_config {
		70 |     enabled = var.pod_security_policy_config_enabled
		71 |   }
		72 |
		73 |   resource_labels = var.resource_labels
		74 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/ShieldedNodes.tf:2-74

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 |
		18 |   remove_default_node_pool = var.remove_default_node_pool
		19 |
		20 |   node_config {
		21 |     workload_metadata_config {
		22 |       node_metadata = "GKE_METADATA_SERVER"
		23 |     }
		24 |   }
		25 |
		26 |   release_channel {
		27 |     channel = var.release_channel
		28 |   }
		29 |
		30 |   master_auth {
		31 |
		32 |     client_certificate_config {
		33 |       issue_client_certificate = false
		34 |     }
		35 |   }
		36 |
		37 |   addons_config {
		38 |     http_load_balancing {
		39 |       disabled = var.http_load_balancing_disabled
		40 |     }
		41 |
		42 |     network_policy_config {
		43 |       disabled = var.network_policy_config_disabled
		44 |     }
		45 |   }
		46 |
		47 |   maintenance_policy {
		48 |     daily_maintenance_window {
		49 |       start_time = var.maintenance_window
		50 |     }
		51 |   }
		52 |
		53 |   private_cluster_config {
		54 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		55 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		56 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		57 |   }
		58 |
		59 |   master_authorized_networks_config {
		60 |     cidr_blocks {
		61 |       cidr_block = var.master_authorized_network_cidr
		62 |     }
		63 |   }
		64 |
		65 |   network_policy {
		66 |     enabled = true
		67 |   }
		68 |
		69 |   pod_security_policy_config {
		70 |     enabled = var.pod_security_policy_config_enabled
		71 |   }
		72 |
		73 |   resource_labels = var.resource_labels
		74 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/ShieldedNodes.tf:2-74

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 |
		18 |   remove_default_node_pool = var.remove_default_node_pool
		19 |
		20 |   node_config {
		21 |     workload_metadata_config {
		22 |       node_metadata = "GKE_METADATA_SERVER"
		23 |     }
		24 |   }
		25 |
		26 |   release_channel {
		27 |     channel = var.release_channel
		28 |   }
		29 |
		30 |   master_auth {
		31 |
		32 |     client_certificate_config {
		33 |       issue_client_certificate = false
		34 |     }
		35 |   }
		36 |
		37 |   addons_config {
		38 |     http_load_balancing {
		39 |       disabled = var.http_load_balancing_disabled
		40 |     }
		41 |
		42 |     network_policy_config {
		43 |       disabled = var.network_policy_config_disabled
		44 |     }
		45 |   }
		46 |
		47 |   maintenance_policy {
		48 |     daily_maintenance_window {
		49 |       start_time = var.maintenance_window
		50 |     }
		51 |   }
		52 |
		53 |   private_cluster_config {
		54 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		55 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		56 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		57 |   }
		58 |
		59 |   master_authorized_networks_config {
		60 |     cidr_blocks {
		61 |       cidr_block = var.master_authorized_network_cidr
		62 |     }
		63 |   }
		64 |
		65 |   network_policy {
		66 |     enabled = true
		67 |   }
		68 |
		69 |   pod_security_policy_config {
		70 |     enabled = var.pod_security_policy_config_enabled
		71 |   }
		72 |
		73 |   resource_labels = var.resource_labels
		74 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/container_cluster.tf:2-75

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 |
		18 |   remove_default_node_pool    = var.remove_default_node_pool
		19 |   enable_binary_authorization = false
		20 |
		21 |   node_config {
		22 |     workload_metadata_config {
		23 |       node_metadata = "GKE_METADATA_SERVER"
		24 |     }
		25 |   }
		26 |
		27 |   release_channel {
		28 |     channel = var.release_channel
		29 |   }
		30 |
		31 |   master_auth {
		32 |
		33 |     client_certificate_config {
		34 |       issue_client_certificate = false
		35 |     }
		36 |   }
		37 |
		38 |   addons_config {
		39 |     http_load_balancing {
		40 |       disabled = var.http_load_balancing_disabled
		41 |     }
		42 |
		43 |     network_policy_config {
		44 |       disabled = var.network_policy_config_disabled
		45 |     }
		46 |   }
		47 |
		48 |   maintenance_policy {
		49 |     daily_maintenance_window {
		50 |       start_time = var.maintenance_window
		51 |     }
		52 |   }
		53 |
		54 |   private_cluster_config {
		55 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		56 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		57 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		58 |   }
		59 |
		60 |   master_authorized_networks_config {
		61 |     cidr_blocks {
		62 |       cidr_block = var.master_authorized_network_cidr
		63 |     }
		64 |   }
		65 |
		66 |   network_policy {
		67 |     enabled = true
		68 |   }
		69 |
		70 |   pod_security_policy_config {
		71 |     enabled = var.pod_security_policy_config_enabled
		72 |   }
		73 |
		74 |   resource_labels = var.resource_labels
		75 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/container_cluster.tf:2-75

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 |
		18 |   remove_default_node_pool    = var.remove_default_node_pool
		19 |   enable_binary_authorization = false
		20 |
		21 |   node_config {
		22 |     workload_metadata_config {
		23 |       node_metadata = "GKE_METADATA_SERVER"
		24 |     }
		25 |   }
		26 |
		27 |   release_channel {
		28 |     channel = var.release_channel
		29 |   }
		30 |
		31 |   master_auth {
		32 |
		33 |     client_certificate_config {
		34 |       issue_client_certificate = false
		35 |     }
		36 |   }
		37 |
		38 |   addons_config {
		39 |     http_load_balancing {
		40 |       disabled = var.http_load_balancing_disabled
		41 |     }
		42 |
		43 |     network_policy_config {
		44 |       disabled = var.network_policy_config_disabled
		45 |     }
		46 |   }
		47 |
		48 |   maintenance_policy {
		49 |     daily_maintenance_window {
		50 |       start_time = var.maintenance_window
		51 |     }
		52 |   }
		53 |
		54 |   private_cluster_config {
		55 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		56 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		57 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		58 |   }
		59 |
		60 |   master_authorized_networks_config {
		61 |     cidr_blocks {
		62 |       cidr_block = var.master_authorized_network_cidr
		63 |     }
		64 |   }
		65 |
		66 |   network_policy {
		67 |     enabled = true
		68 |   }
		69 |
		70 |   pod_security_policy_config {
		71 |     enabled = var.pod_security_policy_config_enabled
		72 |   }
		73 |
		74 |   resource_labels = var.resource_labels
		75 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/container_cluster.tf:2-75

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 |
		18 |   remove_default_node_pool    = var.remove_default_node_pool
		19 |   enable_binary_authorization = false
		20 |
		21 |   node_config {
		22 |     workload_metadata_config {
		23 |       node_metadata = "GKE_METADATA_SERVER"
		24 |     }
		25 |   }
		26 |
		27 |   release_channel {
		28 |     channel = var.release_channel
		29 |   }
		30 |
		31 |   master_auth {
		32 |
		33 |     client_certificate_config {
		34 |       issue_client_certificate = false
		35 |     }
		36 |   }
		37 |
		38 |   addons_config {
		39 |     http_load_balancing {
		40 |       disabled = var.http_load_balancing_disabled
		41 |     }
		42 |
		43 |     network_policy_config {
		44 |       disabled = var.network_policy_config_disabled
		45 |     }
		46 |   }
		47 |
		48 |   maintenance_policy {
		49 |     daily_maintenance_window {
		50 |       start_time = var.maintenance_window
		51 |     }
		52 |   }
		53 |
		54 |   private_cluster_config {
		55 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		56 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		57 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		58 |   }
		59 |
		60 |   master_authorized_networks_config {
		61 |     cidr_blocks {
		62 |       cidr_block = var.master_authorized_network_cidr
		63 |     }
		64 |   }
		65 |
		66 |   network_policy {
		67 |     enabled = true
		68 |   }
		69 |
		70 |   pod_security_policy_config {
		71 |     enabled = var.pod_security_policy_config_enabled
		72 |   }
		73 |
		74 |   resource_labels = var.resource_labels
		75 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/container_cluster.tf:2-75

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 |
		18 |   remove_default_node_pool    = var.remove_default_node_pool
		19 |   enable_binary_authorization = false
		20 |
		21 |   node_config {
		22 |     workload_metadata_config {
		23 |       node_metadata = "GKE_METADATA_SERVER"
		24 |     }
		25 |   }
		26 |
		27 |   release_channel {
		28 |     channel = var.release_channel
		29 |   }
		30 |
		31 |   master_auth {
		32 |
		33 |     client_certificate_config {
		34 |       issue_client_certificate = false
		35 |     }
		36 |   }
		37 |
		38 |   addons_config {
		39 |     http_load_balancing {
		40 |       disabled = var.http_load_balancing_disabled
		41 |     }
		42 |
		43 |     network_policy_config {
		44 |       disabled = var.network_policy_config_disabled
		45 |     }
		46 |   }
		47 |
		48 |   maintenance_policy {
		49 |     daily_maintenance_window {
		50 |       start_time = var.maintenance_window
		51 |     }
		52 |   }
		53 |
		54 |   private_cluster_config {
		55 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		56 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		57 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		58 |   }
		59 |
		60 |   master_authorized_networks_config {
		61 |     cidr_blocks {
		62 |       cidr_block = var.master_authorized_network_cidr
		63 |     }
		64 |   }
		65 |
		66 |   network_policy {
		67 |     enabled = true
		68 |   }
		69 |
		70 |   pod_security_policy_config {
		71 |     enabled = var.pod_security_policy_config_enabled
		72 |   }
		73 |
		74 |   resource_labels = var.resource_labels
		75 | }


Check: CKV_GCP_68: "Ensure Secure Boot for Shielded GKE Nodes is Enabled"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/container_cluster.tf:2-75

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 |
		18 |   remove_default_node_pool    = var.remove_default_node_pool
		19 |   enable_binary_authorization = false
		20 |
		21 |   node_config {
		22 |     workload_metadata_config {
		23 |       node_metadata = "GKE_METADATA_SERVER"
		24 |     }
		25 |   }
		26 |
		27 |   release_channel {
		28 |     channel = var.release_channel
		29 |   }
		30 |
		31 |   master_auth {
		32 |
		33 |     client_certificate_config {
		34 |       issue_client_certificate = false
		35 |     }
		36 |   }
		37 |
		38 |   addons_config {
		39 |     http_load_balancing {
		40 |       disabled = var.http_load_balancing_disabled
		41 |     }
		42 |
		43 |     network_policy_config {
		44 |       disabled = var.network_policy_config_disabled
		45 |     }
		46 |   }
		47 |
		48 |   maintenance_policy {
		49 |     daily_maintenance_window {
		50 |       start_time = var.maintenance_window
		51 |     }
		52 |   }
		53 |
		54 |   private_cluster_config {
		55 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		56 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		57 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		58 |   }
		59 |
		60 |   master_authorized_networks_config {
		61 |     cidr_blocks {
		62 |       cidr_block = var.master_authorized_network_cidr
		63 |     }
		64 |   }
		65 |
		66 |   network_policy {
		67 |     enabled = true
		68 |   }
		69 |
		70 |   pod_security_policy_config {
		71 |     enabled = var.pod_security_policy_config_enabled
		72 |   }
		73 |
		74 |   resource_labels = var.resource_labels
		75 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/container_cluster.tf:2-75

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 |
		18 |   remove_default_node_pool    = var.remove_default_node_pool
		19 |   enable_binary_authorization = false
		20 |
		21 |   node_config {
		22 |     workload_metadata_config {
		23 |       node_metadata = "GKE_METADATA_SERVER"
		24 |     }
		25 |   }
		26 |
		27 |   release_channel {
		28 |     channel = var.release_channel
		29 |   }
		30 |
		31 |   master_auth {
		32 |
		33 |     client_certificate_config {
		34 |       issue_client_certificate = false
		35 |     }
		36 |   }
		37 |
		38 |   addons_config {
		39 |     http_load_balancing {
		40 |       disabled = var.http_load_balancing_disabled
		41 |     }
		42 |
		43 |     network_policy_config {
		44 |       disabled = var.network_policy_config_disabled
		45 |     }
		46 |   }
		47 |
		48 |   maintenance_policy {
		49 |     daily_maintenance_window {
		50 |       start_time = var.maintenance_window
		51 |     }
		52 |   }
		53 |
		54 |   private_cluster_config {
		55 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		56 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		57 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		58 |   }
		59 |
		60 |   master_authorized_networks_config {
		61 |     cidr_blocks {
		62 |       cidr_block = var.master_authorized_network_cidr
		63 |     }
		64 |   }
		65 |
		66 |   network_policy {
		67 |     enabled = true
		68 |   }
		69 |
		70 |   pod_security_policy_config {
		71 |     enabled = var.pod_security_policy_config_enabled
		72 |   }
		73 |
		74 |   resource_labels = var.resource_labels
		75 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/container_cluster.tf:2-75

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 |
		18 |   remove_default_node_pool    = var.remove_default_node_pool
		19 |   enable_binary_authorization = false
		20 |
		21 |   node_config {
		22 |     workload_metadata_config {
		23 |       node_metadata = "GKE_METADATA_SERVER"
		24 |     }
		25 |   }
		26 |
		27 |   release_channel {
		28 |     channel = var.release_channel
		29 |   }
		30 |
		31 |   master_auth {
		32 |
		33 |     client_certificate_config {
		34 |       issue_client_certificate = false
		35 |     }
		36 |   }
		37 |
		38 |   addons_config {
		39 |     http_load_balancing {
		40 |       disabled = var.http_load_balancing_disabled
		41 |     }
		42 |
		43 |     network_policy_config {
		44 |       disabled = var.network_policy_config_disabled
		45 |     }
		46 |   }
		47 |
		48 |   maintenance_policy {
		49 |     daily_maintenance_window {
		50 |       start_time = var.maintenance_window
		51 |     }
		52 |   }
		53 |
		54 |   private_cluster_config {
		55 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		56 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		57 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		58 |   }
		59 |
		60 |   master_authorized_networks_config {
		61 |     cidr_blocks {
		62 |       cidr_block = var.master_authorized_network_cidr
		63 |     }
		64 |   }
		65 |
		66 |   network_policy {
		67 |     enabled = true
		68 |   }
		69 |
		70 |   pod_security_policy_config {
		71 |     enabled = var.pod_security_policy_config_enabled
		72 |   }
		73 |
		74 |   resource_labels = var.resource_labels
		75 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/container_cluster.tf:2-75

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 |
		18 |   remove_default_node_pool    = var.remove_default_node_pool
		19 |   enable_binary_authorization = false
		20 |
		21 |   node_config {
		22 |     workload_metadata_config {
		23 |       node_metadata = "GKE_METADATA_SERVER"
		24 |     }
		25 |   }
		26 |
		27 |   release_channel {
		28 |     channel = var.release_channel
		29 |   }
		30 |
		31 |   master_auth {
		32 |
		33 |     client_certificate_config {
		34 |       issue_client_certificate = false
		35 |     }
		36 |   }
		37 |
		38 |   addons_config {
		39 |     http_load_balancing {
		40 |       disabled = var.http_load_balancing_disabled
		41 |     }
		42 |
		43 |     network_policy_config {
		44 |       disabled = var.network_policy_config_disabled
		45 |     }
		46 |   }
		47 |
		48 |   maintenance_policy {
		49 |     daily_maintenance_window {
		50 |       start_time = var.maintenance_window
		51 |     }
		52 |   }
		53 |
		54 |   private_cluster_config {
		55 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		56 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		57 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		58 |   }
		59 |
		60 |   master_authorized_networks_config {
		61 |     cidr_blocks {
		62 |       cidr_block = var.master_authorized_network_cidr
		63 |     }
		64 |   }
		65 |
		66 |   network_policy {
		67 |     enabled = true
		68 |   }
		69 |
		70 |   pod_security_policy_config {
		71 |     enabled = var.pod_security_policy_config_enabled
		72 |   }
		73 |
		74 |   resource_labels = var.resource_labels
		75 | }


Check: CKV_GCP_24: "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/legacy.tf:2-17

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/legacy.tf:2-17

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/legacy.tf:2-17

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/legacy.tf:2-17

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/legacy.tf:2-17

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/legacy.tf:2-17

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/legacy.tf:2-17

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/legacy.tf:2-17

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/legacy.tf:2-17

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/legacy.tf:2-17

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/legacy.tf:2-17

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/legacy.tf:2-17

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/legacy.tf:2-17

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/legacy.tf:2-17

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/legacy.tf:2-17

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_24: "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/metadata_enabled.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/metadata_enabled.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/metadata_enabled.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/metadata_enabled.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/metadata_enabled.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/metadata_enabled.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/metadata_enabled.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/metadata_enabled.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/metadata_enabled.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/metadata_enabled.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/metadata_enabled.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/metadata_enabled.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/metadata_enabled.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/metadata_enabled.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/container_cluster/metadata_enabled.tf:2-17

		2  | resource "google_container_cluster" "fail" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/shielded.tf:2-74

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 |
		18 |   remove_default_node_pool = var.remove_default_node_pool
		19 |
		20 |   node_config {
		21 |     workload_metadata_config {
		22 |       node_metadata = "GKE_METADATA_SERVER"
		23 |     }
		24 |   }
		25 |
		26 |   release_channel {
		27 |     channel = var.release_channel
		28 |   }
		29 |
		30 |   master_auth {
		31 |
		32 |     client_certificate_config {
		33 |       issue_client_certificate = false
		34 |     }
		35 |   }
		36 |
		37 |   addons_config {
		38 |     http_load_balancing {
		39 |       disabled = var.http_load_balancing_disabled
		40 |     }
		41 |
		42 |     network_policy_config {
		43 |       disabled = var.network_policy_config_disabled
		44 |     }
		45 |   }
		46 |
		47 |   maintenance_policy {
		48 |     daily_maintenance_window {
		49 |       start_time = var.maintenance_window
		50 |     }
		51 |   }
		52 |
		53 |   private_cluster_config {
		54 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		55 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		56 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		57 |   }
		58 |
		59 |   master_authorized_networks_config {
		60 |     cidr_blocks {
		61 |       cidr_block = var.master_authorized_network_cidr
		62 |     }
		63 |   }
		64 |
		65 |   network_policy {
		66 |     enabled = true
		67 |   }
		68 |
		69 |   pod_security_policy_config {
		70 |     enabled = var.pod_security_policy_config_enabled
		71 |   }
		72 |
		73 |   resource_labels = var.resource_labels
		74 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/shielded.tf:2-74

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 |
		18 |   remove_default_node_pool = var.remove_default_node_pool
		19 |
		20 |   node_config {
		21 |     workload_metadata_config {
		22 |       node_metadata = "GKE_METADATA_SERVER"
		23 |     }
		24 |   }
		25 |
		26 |   release_channel {
		27 |     channel = var.release_channel
		28 |   }
		29 |
		30 |   master_auth {
		31 |
		32 |     client_certificate_config {
		33 |       issue_client_certificate = false
		34 |     }
		35 |   }
		36 |
		37 |   addons_config {
		38 |     http_load_balancing {
		39 |       disabled = var.http_load_balancing_disabled
		40 |     }
		41 |
		42 |     network_policy_config {
		43 |       disabled = var.network_policy_config_disabled
		44 |     }
		45 |   }
		46 |
		47 |   maintenance_policy {
		48 |     daily_maintenance_window {
		49 |       start_time = var.maintenance_window
		50 |     }
		51 |   }
		52 |
		53 |   private_cluster_config {
		54 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		55 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		56 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		57 |   }
		58 |
		59 |   master_authorized_networks_config {
		60 |     cidr_blocks {
		61 |       cidr_block = var.master_authorized_network_cidr
		62 |     }
		63 |   }
		64 |
		65 |   network_policy {
		66 |     enabled = true
		67 |   }
		68 |
		69 |   pod_security_policy_config {
		70 |     enabled = var.pod_security_policy_config_enabled
		71 |   }
		72 |
		73 |   resource_labels = var.resource_labels
		74 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/shielded.tf:2-74

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 |
		18 |   remove_default_node_pool = var.remove_default_node_pool
		19 |
		20 |   node_config {
		21 |     workload_metadata_config {
		22 |       node_metadata = "GKE_METADATA_SERVER"
		23 |     }
		24 |   }
		25 |
		26 |   release_channel {
		27 |     channel = var.release_channel
		28 |   }
		29 |
		30 |   master_auth {
		31 |
		32 |     client_certificate_config {
		33 |       issue_client_certificate = false
		34 |     }
		35 |   }
		36 |
		37 |   addons_config {
		38 |     http_load_balancing {
		39 |       disabled = var.http_load_balancing_disabled
		40 |     }
		41 |
		42 |     network_policy_config {
		43 |       disabled = var.network_policy_config_disabled
		44 |     }
		45 |   }
		46 |
		47 |   maintenance_policy {
		48 |     daily_maintenance_window {
		49 |       start_time = var.maintenance_window
		50 |     }
		51 |   }
		52 |
		53 |   private_cluster_config {
		54 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		55 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		56 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		57 |   }
		58 |
		59 |   master_authorized_networks_config {
		60 |     cidr_blocks {
		61 |       cidr_block = var.master_authorized_network_cidr
		62 |     }
		63 |   }
		64 |
		65 |   network_policy {
		66 |     enabled = true
		67 |   }
		68 |
		69 |   pod_security_policy_config {
		70 |     enabled = var.pod_security_policy_config_enabled
		71 |   }
		72 |
		73 |   resource_labels = var.resource_labels
		74 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/shielded.tf:2-74

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 |
		18 |   remove_default_node_pool = var.remove_default_node_pool
		19 |
		20 |   node_config {
		21 |     workload_metadata_config {
		22 |       node_metadata = "GKE_METADATA_SERVER"
		23 |     }
		24 |   }
		25 |
		26 |   release_channel {
		27 |     channel = var.release_channel
		28 |   }
		29 |
		30 |   master_auth {
		31 |
		32 |     client_certificate_config {
		33 |       issue_client_certificate = false
		34 |     }
		35 |   }
		36 |
		37 |   addons_config {
		38 |     http_load_balancing {
		39 |       disabled = var.http_load_balancing_disabled
		40 |     }
		41 |
		42 |     network_policy_config {
		43 |       disabled = var.network_policy_config_disabled
		44 |     }
		45 |   }
		46 |
		47 |   maintenance_policy {
		48 |     daily_maintenance_window {
		49 |       start_time = var.maintenance_window
		50 |     }
		51 |   }
		52 |
		53 |   private_cluster_config {
		54 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		55 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		56 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		57 |   }
		58 |
		59 |   master_authorized_networks_config {
		60 |     cidr_blocks {
		61 |       cidr_block = var.master_authorized_network_cidr
		62 |     }
		63 |   }
		64 |
		65 |   network_policy {
		66 |     enabled = true
		67 |   }
		68 |
		69 |   pod_security_policy_config {
		70 |     enabled = var.pod_security_policy_config_enabled
		71 |   }
		72 |
		73 |   resource_labels = var.resource_labels
		74 | }


Check: CKV_GCP_68: "Ensure Secure Boot for Shielded GKE Nodes is Enabled"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/shielded.tf:2-74

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 |
		18 |   remove_default_node_pool = var.remove_default_node_pool
		19 |
		20 |   node_config {
		21 |     workload_metadata_config {
		22 |       node_metadata = "GKE_METADATA_SERVER"
		23 |     }
		24 |   }
		25 |
		26 |   release_channel {
		27 |     channel = var.release_channel
		28 |   }
		29 |
		30 |   master_auth {
		31 |
		32 |     client_certificate_config {
		33 |       issue_client_certificate = false
		34 |     }
		35 |   }
		36 |
		37 |   addons_config {
		38 |     http_load_balancing {
		39 |       disabled = var.http_load_balancing_disabled
		40 |     }
		41 |
		42 |     network_policy_config {
		43 |       disabled = var.network_policy_config_disabled
		44 |     }
		45 |   }
		46 |
		47 |   maintenance_policy {
		48 |     daily_maintenance_window {
		49 |       start_time = var.maintenance_window
		50 |     }
		51 |   }
		52 |
		53 |   private_cluster_config {
		54 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		55 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		56 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		57 |   }
		58 |
		59 |   master_authorized_networks_config {
		60 |     cidr_blocks {
		61 |       cidr_block = var.master_authorized_network_cidr
		62 |     }
		63 |   }
		64 |
		65 |   network_policy {
		66 |     enabled = true
		67 |   }
		68 |
		69 |   pod_security_policy_config {
		70 |     enabled = var.pod_security_policy_config_enabled
		71 |   }
		72 |
		73 |   resource_labels = var.resource_labels
		74 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/shielded.tf:2-74

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 |
		18 |   remove_default_node_pool = var.remove_default_node_pool
		19 |
		20 |   node_config {
		21 |     workload_metadata_config {
		22 |       node_metadata = "GKE_METADATA_SERVER"
		23 |     }
		24 |   }
		25 |
		26 |   release_channel {
		27 |     channel = var.release_channel
		28 |   }
		29 |
		30 |   master_auth {
		31 |
		32 |     client_certificate_config {
		33 |       issue_client_certificate = false
		34 |     }
		35 |   }
		36 |
		37 |   addons_config {
		38 |     http_load_balancing {
		39 |       disabled = var.http_load_balancing_disabled
		40 |     }
		41 |
		42 |     network_policy_config {
		43 |       disabled = var.network_policy_config_disabled
		44 |     }
		45 |   }
		46 |
		47 |   maintenance_policy {
		48 |     daily_maintenance_window {
		49 |       start_time = var.maintenance_window
		50 |     }
		51 |   }
		52 |
		53 |   private_cluster_config {
		54 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		55 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		56 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		57 |   }
		58 |
		59 |   master_authorized_networks_config {
		60 |     cidr_blocks {
		61 |       cidr_block = var.master_authorized_network_cidr
		62 |     }
		63 |   }
		64 |
		65 |   network_policy {
		66 |     enabled = true
		67 |   }
		68 |
		69 |   pod_security_policy_config {
		70 |     enabled = var.pod_security_policy_config_enabled
		71 |   }
		72 |
		73 |   resource_labels = var.resource_labels
		74 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/shielded.tf:2-74

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 |
		18 |   remove_default_node_pool = var.remove_default_node_pool
		19 |
		20 |   node_config {
		21 |     workload_metadata_config {
		22 |       node_metadata = "GKE_METADATA_SERVER"
		23 |     }
		24 |   }
		25 |
		26 |   release_channel {
		27 |     channel = var.release_channel
		28 |   }
		29 |
		30 |   master_auth {
		31 |
		32 |     client_certificate_config {
		33 |       issue_client_certificate = false
		34 |     }
		35 |   }
		36 |
		37 |   addons_config {
		38 |     http_load_balancing {
		39 |       disabled = var.http_load_balancing_disabled
		40 |     }
		41 |
		42 |     network_policy_config {
		43 |       disabled = var.network_policy_config_disabled
		44 |     }
		45 |   }
		46 |
		47 |   maintenance_policy {
		48 |     daily_maintenance_window {
		49 |       start_time = var.maintenance_window
		50 |     }
		51 |   }
		52 |
		53 |   private_cluster_config {
		54 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		55 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		56 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		57 |   }
		58 |
		59 |   master_authorized_networks_config {
		60 |     cidr_blocks {
		61 |       cidr_block = var.master_authorized_network_cidr
		62 |     }
		63 |   }
		64 |
		65 |   network_policy {
		66 |     enabled = true
		67 |   }
		68 |
		69 |   pod_security_policy_config {
		70 |     enabled = var.pod_security_policy_config_enabled
		71 |   }
		72 |
		73 |   resource_labels = var.resource_labels
		74 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.fail1
	File: /terraform/google/container_cluster/shielded.tf:2-74

		2  | resource "google_container_cluster" "fail1" {
		3  |   name               = var.name
		4  |   location           = var.location
		5  |   initial_node_count = 1
		6  |   project            = data.google_project.project.name
		7  |
		8  |   network    = var.network
		9  |   subnetwork = var.subnetwork
		10 |
		11 |   ip_allocation_policy {
		12 |     cluster_ipv4_cidr_block       = var.ip_allocation_policy["cluster_ipv4_cidr_block"]
		13 |     cluster_secondary_range_name  = var.ip_allocation_policy["cluster_secondary_range_name"]
		14 |     services_ipv4_cidr_block      = var.ip_allocation_policy["services_ipv4_cidr_block"]
		15 |     services_secondary_range_name = var.ip_allocation_policy["services_secondary_range_name"]
		16 |   }
		17 |
		18 |   remove_default_node_pool = var.remove_default_node_pool
		19 |
		20 |   node_config {
		21 |     workload_metadata_config {
		22 |       node_metadata = "GKE_METADATA_SERVER"
		23 |     }
		24 |   }
		25 |
		26 |   release_channel {
		27 |     channel = var.release_channel
		28 |   }
		29 |
		30 |   master_auth {
		31 |
		32 |     client_certificate_config {
		33 |       issue_client_certificate = false
		34 |     }
		35 |   }
		36 |
		37 |   addons_config {
		38 |     http_load_balancing {
		39 |       disabled = var.http_load_balancing_disabled
		40 |     }
		41 |
		42 |     network_policy_config {
		43 |       disabled = var.network_policy_config_disabled
		44 |     }
		45 |   }
		46 |
		47 |   maintenance_policy {
		48 |     daily_maintenance_window {
		49 |       start_time = var.maintenance_window
		50 |     }
		51 |   }
		52 |
		53 |   private_cluster_config {
		54 |     enable_private_nodes    = var.private_cluster_config["enable_private_nodes"]
		55 |     enable_private_endpoint = var.private_cluster_config["enable_private_endpoint"]
		56 |     master_ipv4_cidr_block  = var.private_cluster_config["master_ipv4_cidr_block"]
		57 |   }
		58 |
		59 |   master_authorized_networks_config {
		60 |     cidr_blocks {
		61 |       cidr_block = var.master_authorized_network_cidr
		62 |     }
		63 |   }
		64 |
		65 |   network_policy {
		66 |     enabled = true
		67 |   }
		68 |
		69 |   pod_security_policy_config {
		70 |     enabled = var.pod_security_policy_config_enabled
		71 |   }
		72 |
		73 |   resource_labels = var.resource_labels
		74 | }


Check: CKV_GCP_16: "Ensure that DNSSEC is enabled for Cloud DNS"
	FAILED for resource: google_dns_managed_zone.fail
	File: /terraform/google/dns/CloudDNSKeySpecsRSASHA1.tf:5-22

		5  | resource "google_dns_managed_zone" "fail" {
		6  |   name        = "example-zone"
		7  |   dns_name    = "example-de13he3.com."
		8  |   description = "Example DNS zone"
		9  |   dnssec_config {
		10 |     state = "off"
		11 |     default_key_specs {
		12 |       algorithm  = "rsasha1"
		13 |       key_type   = "zoneSigning"
		14 |       key_length = "1024"
		15 |     }
		16 |     default_key_specs {
		17 |       algorithm  = "rsasha256"
		18 |       key_type   = "keySigning"
		19 |       key_length = 2048
		20 |     }
		21 |   }
		22 | }


Check: CKV_GCP_17: "Ensure that RSASHA1 is not used for the zone-signing and key-signing keys in Cloud DNS DNSSEC"
	FAILED for resource: google_dns_managed_zone.fail
	File: /terraform/google/dns/CloudDNSKeySpecsRSASHA1.tf:5-22

		5  | resource "google_dns_managed_zone" "fail" {
		6  |   name        = "example-zone"
		7  |   dns_name    = "example-de13he3.com."
		8  |   description = "Example DNS zone"
		9  |   dnssec_config {
		10 |     state = "off"
		11 |     default_key_specs {
		12 |       algorithm  = "rsasha1"
		13 |       key_type   = "zoneSigning"
		14 |       key_length = "1024"
		15 |     }
		16 |     default_key_specs {
		17 |       algorithm  = "rsasha256"
		18 |       key_type   = "keySigning"
		19 |       key_length = 2048
		20 |     }
		21 |   }
		22 | }


Check: CKV_GCP_48: "Ensure Default Service account is not used at a folder level"
	FAILED for resource: google_folder_iam_binding.folder
	File: /terraform/google/folder_iam_binding/folder_ism_binding.tf:8-16

		8  | resource "google_folder_iam_binding" "folder" {
		9  |   folder = "folders/1234567"
		10 |   role   = "roles/editor"
		11 |
		12 |   members = [
		13 |     "user:jane@example.com",
		14 |     "serviceAccount:test-compute@appspot.gserviceaccount.com",
		15 |   ]
		16 | }


Check: CKV_GCP_44: "Ensure no roles that enable to impersonate and manage all service accounts are used at a folder level"
	FAILED for resource: google_folder_iam_binding.folder
	File: /terraform/google/folder_iam_binding/folder_ism_binding.tf:8-16

		8  | resource "google_folder_iam_binding" "folder" {
		9  |   folder = "folders/1234567"
		10 |   role   = "roles/editor"
		11 |
		12 |   members = [
		13 |     "user:jane@example.com",
		14 |     "serviceAccount:test-compute@appspot.gserviceaccount.com",
		15 |   ]
		16 | }


Check: CKV_GCP_24: "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/GKEAliasIpEnabled.tf:1-3

		1 | resource "google_container_cluster" "fail" {
		2 |   name = "fail-cluster"
		3 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/GKEAliasIpEnabled.tf:1-3

		1 | resource "google_container_cluster" "fail" {
		2 |   name = "fail-cluster"
		3 | }


Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/GKEAliasIpEnabled.tf:1-3

		1 | resource "google_container_cluster" "fail" {
		2 |   name = "fail-cluster"
		3 | }


Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/GKEAliasIpEnabled.tf:1-3

		1 | resource "google_container_cluster" "fail" {
		2 |   name = "fail-cluster"
		3 | }


Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/GKEAliasIpEnabled.tf:1-3

		1 | resource "google_container_cluster" "fail" {
		2 |   name = "fail-cluster"
		3 | }


Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/GKEAliasIpEnabled.tf:1-3

		1 | resource "google_container_cluster" "fail" {
		2 |   name = "fail-cluster"
		3 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/GKEAliasIpEnabled.tf:1-3

		1 | resource "google_container_cluster" "fail" {
		2 |   name = "fail-cluster"
		3 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/GKEAliasIpEnabled.tf:1-3

		1 | resource "google_container_cluster" "fail" {
		2 |   name = "fail-cluster"
		3 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/GKEAliasIpEnabled.tf:1-3

		1 | resource "google_container_cluster" "fail" {
		2 |   name = "fail-cluster"
		3 | }


Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/GKEAliasIpEnabled.tf:1-3

		1 | resource "google_container_cluster" "fail" {
		2 |   name = "fail-cluster"
		3 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/GKEAliasIpEnabled.tf:1-3

		1 | resource "google_container_cluster" "fail" {
		2 |   name = "fail-cluster"
		3 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/GKEAliasIpEnabled.tf:1-3

		1 | resource "google_container_cluster" "fail" {
		2 |   name = "fail-cluster"
		3 | }


Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/GKEAliasIpEnabled.tf:1-3

		1 | resource "google_container_cluster" "fail" {
		2 |   name = "fail-cluster"
		3 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/GKEAliasIpEnabled.tf:1-3

		1 | resource "google_container_cluster" "fail" {
		2 |   name = "fail-cluster"
		3 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/GKEAliasIpEnabled.tf:1-3

		1 | resource "google_container_cluster" "fail" {
		2 |   name = "fail-cluster"
		3 | }


Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/GKEAliasIpEnabled.tf:1-3

		1 | resource "google_container_cluster" "fail" {
		2 |   name = "fail-cluster"
		3 | }


Check: CKV_GCP_22: "Ensure Container-Optimized OS (cos) is used for Kubernetes Engine Clusters Node image"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/GKEUseCosImage.tf:2-58

		2  | resource "google_container_node_pool" "fail" {
		3  |   autoscaling {
		4  |     max_node_count = "4"
		5  |     min_node_count = "1"
		6  |   }
		7  |
		8  |   cluster            = google_container_cluster.fail.name
		9  |   initial_node_count = "2"
		10 |   location           = "us-west1"
		11 |
		12 |   management {
		13 |     auto_repair  = "true"
		14 |     auto_upgrade = "true"
		15 |   }
		16 |
		17 |   max_pods_per_node = "110"
		18 |   name              = "async-pool-2"
		19 |
		20 |   node_config {
		21 |     disk_size_gb = "400"
		22 |     disk_type    = "pd-ssd"
		23 |     image_type   = "SomethingElse"
		24 |
		25 |     labels = {
		26 |       async = "true"
		27 |     }
		28 |
		29 |     local_ssd_count = "0"
		30 |     machine_type    = "custom-32-65536"
		31 |
		32 |     metadata = {
		33 |       async                    = "true"
		34 |       disable-legacy-endpoints = "true"
		35 |     }
		36 |
		37 |     oauth_scopes    = ["https://www.googleapis.com/auth/cloud-platform"]
		38 |     preemptible     = "false"
		39 |     service_account = "default"
		40 |
		41 |     shielded_instance_config {
		42 |       enable_integrity_monitoring = "true"
		43 |       enable_secure_boot          = "true"
		44 |     }
		45 |   }
		46 |
		47 |   node_count     = "1"
		48 |   node_locations = ["us-west1-b", "us-west1-a"]
		49 |   project        = "test-project"
		50 |
		51 |   upgrade_settings {
		52 |     max_surge       = "1"
		53 |     max_unavailable = "0"
		54 |   }
		55 |
		56 |   version = "1.14.10-gke.36"
		57 |   zone    = "us-west1"
		58 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/GKEUseCosImage.tf:2-58

		2  | resource "google_container_node_pool" "fail" {
		3  |   autoscaling {
		4  |     max_node_count = "4"
		5  |     min_node_count = "1"
		6  |   }
		7  |
		8  |   cluster            = google_container_cluster.fail.name
		9  |   initial_node_count = "2"
		10 |   location           = "us-west1"
		11 |
		12 |   management {
		13 |     auto_repair  = "true"
		14 |     auto_upgrade = "true"
		15 |   }
		16 |
		17 |   max_pods_per_node = "110"
		18 |   name              = "async-pool-2"
		19 |
		20 |   node_config {
		21 |     disk_size_gb = "400"
		22 |     disk_type    = "pd-ssd"
		23 |     image_type   = "SomethingElse"
		24 |
		25 |     labels = {
		26 |       async = "true"
		27 |     }
		28 |
		29 |     local_ssd_count = "0"
		30 |     machine_type    = "custom-32-65536"
		31 |
		32 |     metadata = {
		33 |       async                    = "true"
		34 |       disable-legacy-endpoints = "true"
		35 |     }
		36 |
		37 |     oauth_scopes    = ["https://www.googleapis.com/auth/cloud-platform"]
		38 |     preemptible     = "false"
		39 |     service_account = "default"
		40 |
		41 |     shielded_instance_config {
		42 |       enable_integrity_monitoring = "true"
		43 |       enable_secure_boot          = "true"
		44 |     }
		45 |   }
		46 |
		47 |   node_count     = "1"
		48 |   node_locations = ["us-west1-b", "us-west1-a"]
		49 |   project        = "test-project"
		50 |
		51 |   upgrade_settings {
		52 |     max_surge       = "1"
		53 |     max_unavailable = "0"
		54 |   }
		55 |
		56 |   version = "1.14.10-gke.36"
		57 |   zone    = "us-west1"
		58 | }


Check: CKV_GCP_24: "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/container_cluster.tf:23-38

		23 | resource "google_container_cluster" "fail" {
		24 |   node_config {
		25 |     shielded_instance_config {
		26 |       enable_integrity_monitoring = false
		27 |     }
		28 |   }
		29 |
		30 |   enable_legacy_abac = true
		31 |   logging_service    = "none"
		32 |   monitoring_service = "none"
		33 |   # master_authorized_networks_config {
		34 |   #   cidr_blocks {
		35 |   #     cidr_block="0.0.0.0/0"
		36 |   #   }
		37 |   # }
		38 | }

Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/container_cluster.tf:23-38

		23 | resource "google_container_cluster" "fail" {
		24 |   node_config {
		25 |     shielded_instance_config {
		26 |       enable_integrity_monitoring = false
		27 |     }
		28 |   }
		29 |
		30 |   enable_legacy_abac = true
		31 |   logging_service    = "none"
		32 |   monitoring_service = "none"
		33 |   # master_authorized_networks_config {
		34 |   #   cidr_blocks {
		35 |   #     cidr_block="0.0.0.0/0"
		36 |   #   }
		37 |   # }
		38 | }

Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/container_cluster.tf:23-38

		23 | resource "google_container_cluster" "fail" {
		24 |   node_config {
		25 |     shielded_instance_config {
		26 |       enable_integrity_monitoring = false
		27 |     }
		28 |   }
		29 |
		30 |   enable_legacy_abac = true
		31 |   logging_service    = "none"
		32 |   monitoring_service = "none"
		33 |   # master_authorized_networks_config {
		34 |   #   cidr_blocks {
		35 |   #     cidr_block="0.0.0.0/0"
		36 |   #   }
		37 |   # }
		38 | }

Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/container_cluster.tf:23-38

		23 | resource "google_container_cluster" "fail" {
		24 |   node_config {
		25 |     shielded_instance_config {
		26 |       enable_integrity_monitoring = false
		27 |     }
		28 |   }
		29 |
		30 |   enable_legacy_abac = true
		31 |   logging_service    = "none"
		32 |   monitoring_service = "none"
		33 |   # master_authorized_networks_config {
		34 |   #   cidr_blocks {
		35 |   #     cidr_block="0.0.0.0/0"
		36 |   #   }
		37 |   # }
		38 | }

Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/container_cluster.tf:23-38

		23 | resource "google_container_cluster" "fail" {
		24 |   node_config {
		25 |     shielded_instance_config {
		26 |       enable_integrity_monitoring = false
		27 |     }
		28 |   }
		29 |
		30 |   enable_legacy_abac = true
		31 |   logging_service    = "none"
		32 |   monitoring_service = "none"
		33 |   # master_authorized_networks_config {
		34 |   #   cidr_blocks {
		35 |   #     cidr_block="0.0.0.0/0"
		36 |   #   }
		37 |   # }
		38 | }

Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/container_cluster.tf:23-38

		23 | resource "google_container_cluster" "fail" {
		24 |   node_config {
		25 |     shielded_instance_config {
		26 |       enable_integrity_monitoring = false
		27 |     }
		28 |   }
		29 |
		30 |   enable_legacy_abac = true
		31 |   logging_service    = "none"
		32 |   monitoring_service = "none"
		33 |   # master_authorized_networks_config {
		34 |   #   cidr_blocks {
		35 |   #     cidr_block="0.0.0.0/0"
		36 |   #   }
		37 |   # }
		38 | }

Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/container_cluster.tf:23-38

		23 | resource "google_container_cluster" "fail" {
		24 |   node_config {
		25 |     shielded_instance_config {
		26 |       enable_integrity_monitoring = false
		27 |     }
		28 |   }
		29 |
		30 |   enable_legacy_abac = true
		31 |   logging_service    = "none"
		32 |   monitoring_service = "none"
		33 |   # master_authorized_networks_config {
		34 |   #   cidr_blocks {
		35 |   #     cidr_block="0.0.0.0/0"
		36 |   #   }
		37 |   # }
		38 | }

Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/container_cluster.tf:23-38

		23 | resource "google_container_cluster" "fail" {
		24 |   node_config {
		25 |     shielded_instance_config {
		26 |       enable_integrity_monitoring = false
		27 |     }
		28 |   }
		29 |
		30 |   enable_legacy_abac = true
		31 |   logging_service    = "none"
		32 |   monitoring_service = "none"
		33 |   # master_authorized_networks_config {
		34 |   #   cidr_blocks {
		35 |   #     cidr_block="0.0.0.0/0"
		36 |   #   }
		37 |   # }
		38 | }

Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/container_cluster.tf:23-38

		23 | resource "google_container_cluster" "fail" {
		24 |   node_config {
		25 |     shielded_instance_config {
		26 |       enable_integrity_monitoring = false
		27 |     }
		28 |   }
		29 |
		30 |   enable_legacy_abac = true
		31 |   logging_service    = "none"
		32 |   monitoring_service = "none"
		33 |   # master_authorized_networks_config {
		34 |   #   cidr_blocks {
		35 |   #     cidr_block="0.0.0.0/0"
		36 |   #   }
		37 |   # }
		38 | }

Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/container_cluster.tf:23-38

		23 | resource "google_container_cluster" "fail" {
		24 |   node_config {
		25 |     shielded_instance_config {
		26 |       enable_integrity_monitoring = false
		27 |     }
		28 |   }
		29 |
		30 |   enable_legacy_abac = true
		31 |   logging_service    = "none"
		32 |   monitoring_service = "none"
		33 |   # master_authorized_networks_config {
		34 |   #   cidr_blocks {
		35 |   #     cidr_block="0.0.0.0/0"
		36 |   #   }
		37 |   # }
		38 | }

Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/container_cluster.tf:23-38

		23 | resource "google_container_cluster" "fail" {
		24 |   node_config {
		25 |     shielded_instance_config {
		26 |       enable_integrity_monitoring = false
		27 |     }
		28 |   }
		29 |
		30 |   enable_legacy_abac = true
		31 |   logging_service    = "none"
		32 |   monitoring_service = "none"
		33 |   # master_authorized_networks_config {
		34 |   #   cidr_blocks {
		35 |   #     cidr_block="0.0.0.0/0"
		36 |   #   }
		37 |   # }
		38 | }

Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/container_cluster.tf:23-38

		23 | resource "google_container_cluster" "fail" {
		24 |   node_config {
		25 |     shielded_instance_config {
		26 |       enable_integrity_monitoring = false
		27 |     }
		28 |   }
		29 |
		30 |   enable_legacy_abac = true
		31 |   logging_service    = "none"
		32 |   monitoring_service = "none"
		33 |   # master_authorized_networks_config {
		34 |   #   cidr_blocks {
		35 |   #     cidr_block="0.0.0.0/0"
		36 |   #   }
		37 |   # }
		38 | }

Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/container_cluster.tf:23-38

		23 | resource "google_container_cluster" "fail" {
		24 |   node_config {
		25 |     shielded_instance_config {
		26 |       enable_integrity_monitoring = false
		27 |     }
		28 |   }
		29 |
		30 |   enable_legacy_abac = true
		31 |   logging_service    = "none"
		32 |   monitoring_service = "none"
		33 |   # master_authorized_networks_config {
		34 |   #   cidr_blocks {
		35 |   #     cidr_block="0.0.0.0/0"
		36 |   #   }
		37 |   # }
		38 | }

Check: CKV_GCP_68: "Ensure Secure Boot for Shielded GKE Nodes is Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/container_cluster.tf:23-38

		23 | resource "google_container_cluster" "fail" {
		24 |   node_config {
		25 |     shielded_instance_config {
		26 |       enable_integrity_monitoring = false
		27 |     }
		28 |   }
		29 |
		30 |   enable_legacy_abac = true
		31 |   logging_service    = "none"
		32 |   monitoring_service = "none"
		33 |   # master_authorized_networks_config {
		34 |   #   cidr_blocks {
		35 |   #     cidr_block="0.0.0.0/0"
		36 |   #   }
		37 |   # }
		38 | }

Check: CKV_GCP_72: "Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/container_cluster.tf:23-38

		23 | resource "google_container_cluster" "fail" {
		24 |   node_config {
		25 |     shielded_instance_config {
		26 |       enable_integrity_monitoring = false
		27 |     }
		28 |   }
		29 |
		30 |   enable_legacy_abac = true
		31 |   logging_service    = "none"
		32 |   monitoring_service = "none"
		33 |   # master_authorized_networks_config {
		34 |   #   cidr_blocks {
		35 |   #     cidr_block="0.0.0.0/0"
		36 |   #   }
		37 |   # }
		38 | }

Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/container_cluster.tf:23-38

		23 | resource "google_container_cluster" "fail" {
		24 |   node_config {
		25 |     shielded_instance_config {
		26 |       enable_integrity_monitoring = false
		27 |     }
		28 |   }
		29 |
		30 |   enable_legacy_abac = true
		31 |   logging_service    = "none"
		32 |   monitoring_service = "none"
		33 |   # master_authorized_networks_config {
		34 |   #   cidr_blocks {
		35 |   #     cidr_block="0.0.0.0/0"
		36 |   #   }
		37 |   # }
		38 | }

Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/container_cluster.tf:23-38

		23 | resource "google_container_cluster" "fail" {
		24 |   node_config {
		25 |     shielded_instance_config {
		26 |       enable_integrity_monitoring = false
		27 |     }
		28 |   }
		29 |
		30 |   enable_legacy_abac = true
		31 |   logging_service    = "none"
		32 |   monitoring_service = "none"
		33 |   # master_authorized_networks_config {
		34 |   #   cidr_blocks {
		35 |   #     cidr_block="0.0.0.0/0"
		36 |   #   }
		37 |   # }
		38 | }

Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/container_cluster.tf:23-38

		23 | resource "google_container_cluster" "fail" {
		24 |   node_config {
		25 |     shielded_instance_config {
		26 |       enable_integrity_monitoring = false
		27 |     }
		28 |   }
		29 |
		30 |   enable_legacy_abac = true
		31 |   logging_service    = "none"
		32 |   monitoring_service = "none"
		33 |   # master_authorized_networks_config {
		34 |   #   cidr_blocks {
		35 |   #     cidr_block="0.0.0.0/0"
		36 |   #   }
		37 |   # }
		38 | }

Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/container_cluster.tf:23-38

		23 | resource "google_container_cluster" "fail" {
		24 |   node_config {
		25 |     shielded_instance_config {
		26 |       enable_integrity_monitoring = false
		27 |     }
		28 |   }
		29 |
		30 |   enable_legacy_abac = true
		31 |   logging_service    = "none"
		32 |   monitoring_service = "none"
		33 |   # master_authorized_networks_config {
		34 |   #   cidr_blocks {
		35 |   #     cidr_block="0.0.0.0/0"
		36 |   #   }
		37 |   # }
		38 | }

Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/container_cluster.tf:23-38

		23 | resource "google_container_cluster" "fail" {
		24 |   node_config {
		25 |     shielded_instance_config {
		26 |       enable_integrity_monitoring = false
		27 |     }
		28 |   }
		29 |
		30 |   enable_legacy_abac = true
		31 |   logging_service    = "none"
		32 |   monitoring_service = "none"
		33 |   # master_authorized_networks_config {
		34 |   #   cidr_blocks {
		35 |   #     cidr_block="0.0.0.0/0"
		36 |   #   }
		37 |   # }
		38 | }

Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/container_cluster.tf:23-38

		23 | resource "google_container_cluster" "fail" {
		24 |   node_config {
		25 |     shielded_instance_config {
		26 |       enable_integrity_monitoring = false
		27 |     }
		28 |   }
		29 |
		30 |   enable_legacy_abac = true
		31 |   logging_service    = "none"
		32 |   monitoring_service = "none"
		33 |   # master_authorized_networks_config {
		34 |   #   cidr_blocks {
		35 |   #     cidr_block="0.0.0.0/0"
		36 |   #   }
		37 |   # }
		38 | }

Check: CKV_GCP_24: "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail-public
	File: /terraform/google/gke/container_cluster_public.tf:21-36

		21 | resource "google_container_cluster" "fail-public" {
		22 |   node_config {
		23 |     shielded_instance_config {
		24 |       enable_integrity_monitoring=false
		25 |     }
		26 |   }
		27 |
		28 |   enable_legacy_abac = true
		29 |   logging_service="none"
		30 |   monitoring_service="none"
		31 |   master_authorized_networks_config {
		32 |     cidr_blocks {
		33 |       cidr_block="0.0.0.0/0"
		34 |     }
		35 |   }
		36 | }


Check: CKV_GCP_18: "Ensure GKE Control Plane is not public"
	FAILED for resource: google_container_cluster.fail-public
	File: /terraform/google/gke/container_cluster_public.tf:21-36

		21 | resource "google_container_cluster" "fail-public" {
		22 |   node_config {
		23 |     shielded_instance_config {
		24 |       enable_integrity_monitoring=false
		25 |     }
		26 |   }
		27 |
		28 |   enable_legacy_abac = true
		29 |   logging_service="none"
		30 |   monitoring_service="none"
		31 |   master_authorized_networks_config {
		32 |     cidr_blocks {
		33 |       cidr_block="0.0.0.0/0"
		34 |     }
		35 |   }
		36 | }


Check: CKV_GCP_8: "Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail-public
	File: /terraform/google/gke/container_cluster_public.tf:21-36

		21 | resource "google_container_cluster" "fail-public" {
		22 |   node_config {
		23 |     shielded_instance_config {
		24 |       enable_integrity_monitoring=false
		25 |     }
		26 |   }
		27 |
		28 |   enable_legacy_abac = true
		29 |   logging_service="none"
		30 |   monitoring_service="none"
		31 |   master_authorized_networks_config {
		32 |     cidr_blocks {
		33 |       cidr_block="0.0.0.0/0"
		34 |     }
		35 |   }
		36 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.fail-public
	File: /terraform/google/gke/container_cluster_public.tf:21-36

		21 | resource "google_container_cluster" "fail-public" {
		22 |   node_config {
		23 |     shielded_instance_config {
		24 |       enable_integrity_monitoring=false
		25 |     }
		26 |   }
		27 |
		28 |   enable_legacy_abac = true
		29 |   logging_service="none"
		30 |   monitoring_service="none"
		31 |   master_authorized_networks_config {
		32 |     cidr_blocks {
		33 |       cidr_block="0.0.0.0/0"
		34 |     }
		35 |   }
		36 | }


Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	FAILED for resource: google_container_cluster.fail-public
	File: /terraform/google/gke/container_cluster_public.tf:21-36

		21 | resource "google_container_cluster" "fail-public" {
		22 |   node_config {
		23 |     shielded_instance_config {
		24 |       enable_integrity_monitoring=false
		25 |     }
		26 |   }
		27 |
		28 |   enable_legacy_abac = true
		29 |   logging_service="none"
		30 |   monitoring_service="none"
		31 |   master_authorized_networks_config {
		32 |     cidr_blocks {
		33 |       cidr_block="0.0.0.0/0"
		34 |     }
		35 |   }
		36 | }


Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	FAILED for resource: google_container_cluster.fail-public
	File: /terraform/google/gke/container_cluster_public.tf:21-36

		21 | resource "google_container_cluster" "fail-public" {
		22 |   node_config {
		23 |     shielded_instance_config {
		24 |       enable_integrity_monitoring=false
		25 |     }
		26 |   }
		27 |
		28 |   enable_legacy_abac = true
		29 |   logging_service="none"
		30 |   monitoring_service="none"
		31 |   master_authorized_networks_config {
		32 |     cidr_blocks {
		33 |       cidr_block="0.0.0.0/0"
		34 |     }
		35 |   }
		36 | }


Check: CKV_GCP_1: "Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail-public
	File: /terraform/google/gke/container_cluster_public.tf:21-36

		21 | resource "google_container_cluster" "fail-public" {
		22 |   node_config {
		23 |     shielded_instance_config {
		24 |       enable_integrity_monitoring=false
		25 |     }
		26 |   }
		27 |
		28 |   enable_legacy_abac = true
		29 |   logging_service="none"
		30 |   monitoring_service="none"
		31 |   master_authorized_networks_config {
		32 |     cidr_blocks {
		33 |       cidr_block="0.0.0.0/0"
		34 |     }
		35 |   }
		36 | }


Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	FAILED for resource: google_container_cluster.fail-public
	File: /terraform/google/gke/container_cluster_public.tf:21-36

		21 | resource "google_container_cluster" "fail-public" {
		22 |   node_config {
		23 |     shielded_instance_config {
		24 |       enable_integrity_monitoring=false
		25 |     }
		26 |   }
		27 |
		28 |   enable_legacy_abac = true
		29 |   logging_service="none"
		30 |   monitoring_service="none"
		31 |   master_authorized_networks_config {
		32 |     cidr_blocks {
		33 |       cidr_block="0.0.0.0/0"
		34 |     }
		35 |   }
		36 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.fail-public
	File: /terraform/google/gke/container_cluster_public.tf:21-36

		21 | resource "google_container_cluster" "fail-public" {
		22 |   node_config {
		23 |     shielded_instance_config {
		24 |       enable_integrity_monitoring=false
		25 |     }
		26 |   }
		27 |
		28 |   enable_legacy_abac = true
		29 |   logging_service="none"
		30 |   monitoring_service="none"
		31 |   master_authorized_networks_config {
		32 |     cidr_blocks {
		33 |       cidr_block="0.0.0.0/0"
		34 |     }
		35 |   }
		36 | }


Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail-public
	File: /terraform/google/gke/container_cluster_public.tf:21-36

		21 | resource "google_container_cluster" "fail-public" {
		22 |   node_config {
		23 |     shielded_instance_config {
		24 |       enable_integrity_monitoring=false
		25 |     }
		26 |   }
		27 |
		28 |   enable_legacy_abac = true
		29 |   logging_service="none"
		30 |   monitoring_service="none"
		31 |   master_authorized_networks_config {
		32 |     cidr_blocks {
		33 |       cidr_block="0.0.0.0/0"
		34 |     }
		35 |   }
		36 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail-public
	File: /terraform/google/gke/container_cluster_public.tf:21-36

		21 | resource "google_container_cluster" "fail-public" {
		22 |   node_config {
		23 |     shielded_instance_config {
		24 |       enable_integrity_monitoring=false
		25 |     }
		26 |   }
		27 |
		28 |   enable_legacy_abac = true
		29 |   logging_service="none"
		30 |   monitoring_service="none"
		31 |   master_authorized_networks_config {
		32 |     cidr_blocks {
		33 |       cidr_block="0.0.0.0/0"
		34 |     }
		35 |   }
		36 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.fail-public
	File: /terraform/google/gke/container_cluster_public.tf:21-36

		21 | resource "google_container_cluster" "fail-public" {
		22 |   node_config {
		23 |     shielded_instance_config {
		24 |       enable_integrity_monitoring=false
		25 |     }
		26 |   }
		27 |
		28 |   enable_legacy_abac = true
		29 |   logging_service="none"
		30 |   monitoring_service="none"
		31 |   master_authorized_networks_config {
		32 |     cidr_blocks {
		33 |       cidr_block="0.0.0.0/0"
		34 |     }
		35 |   }
		36 | }


Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	FAILED for resource: google_container_cluster.fail-public
	File: /terraform/google/gke/container_cluster_public.tf:21-36

		21 | resource "google_container_cluster" "fail-public" {
		22 |   node_config {
		23 |     shielded_instance_config {
		24 |       enable_integrity_monitoring=false
		25 |     }
		26 |   }
		27 |
		28 |   enable_legacy_abac = true
		29 |   logging_service="none"
		30 |   monitoring_service="none"
		31 |   master_authorized_networks_config {
		32 |     cidr_blocks {
		33 |       cidr_block="0.0.0.0/0"
		34 |     }
		35 |   }
		36 | }


Check: CKV_GCP_68: "Ensure Secure Boot for Shielded GKE Nodes is Enabled"
	FAILED for resource: google_container_cluster.fail-public
	File: /terraform/google/gke/container_cluster_public.tf:21-36

		21 | resource "google_container_cluster" "fail-public" {
		22 |   node_config {
		23 |     shielded_instance_config {
		24 |       enable_integrity_monitoring=false
		25 |     }
		26 |   }
		27 |
		28 |   enable_legacy_abac = true
		29 |   logging_service="none"
		30 |   monitoring_service="none"
		31 |   master_authorized_networks_config {
		32 |     cidr_blocks {
		33 |       cidr_block="0.0.0.0/0"
		34 |     }
		35 |   }
		36 | }


Check: CKV_GCP_72: "Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled"
	FAILED for resource: google_container_cluster.fail-public
	File: /terraform/google/gke/container_cluster_public.tf:21-36

		21 | resource "google_container_cluster" "fail-public" {
		22 |   node_config {
		23 |     shielded_instance_config {
		24 |       enable_integrity_monitoring=false
		25 |     }
		26 |   }
		27 |
		28 |   enable_legacy_abac = true
		29 |   logging_service="none"
		30 |   monitoring_service="none"
		31 |   master_authorized_networks_config {
		32 |     cidr_blocks {
		33 |       cidr_block="0.0.0.0/0"
		34 |     }
		35 |   }
		36 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.fail-public
	File: /terraform/google/gke/container_cluster_public.tf:21-36

		21 | resource "google_container_cluster" "fail-public" {
		22 |   node_config {
		23 |     shielded_instance_config {
		24 |       enable_integrity_monitoring=false
		25 |     }
		26 |   }
		27 |
		28 |   enable_legacy_abac = true
		29 |   logging_service="none"
		30 |   monitoring_service="none"
		31 |   master_authorized_networks_config {
		32 |     cidr_blocks {
		33 |       cidr_block="0.0.0.0/0"
		34 |     }
		35 |   }
		36 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.fail-public
	File: /terraform/google/gke/container_cluster_public.tf:21-36

		21 | resource "google_container_cluster" "fail-public" {
		22 |   node_config {
		23 |     shielded_instance_config {
		24 |       enable_integrity_monitoring=false
		25 |     }
		26 |   }
		27 |
		28 |   enable_legacy_abac = true
		29 |   logging_service="none"
		30 |   monitoring_service="none"
		31 |   master_authorized_networks_config {
		32 |     cidr_blocks {
		33 |       cidr_block="0.0.0.0/0"
		34 |     }
		35 |   }
		36 | }


Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	FAILED for resource: google_container_cluster.fail-public
	File: /terraform/google/gke/container_cluster_public.tf:21-36

		21 | resource "google_container_cluster" "fail-public" {
		22 |   node_config {
		23 |     shielded_instance_config {
		24 |       enable_integrity_monitoring=false
		25 |     }
		26 |   }
		27 |
		28 |   enable_legacy_abac = true
		29 |   logging_service="none"
		30 |   monitoring_service="none"
		31 |   master_authorized_networks_config {
		32 |     cidr_blocks {
		33 |       cidr_block="0.0.0.0/0"
		34 |     }
		35 |   }
		36 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.fail-public
	File: /terraform/google/gke/container_cluster_public.tf:21-36

		21 | resource "google_container_cluster" "fail-public" {
		22 |   node_config {
		23 |     shielded_instance_config {
		24 |       enable_integrity_monitoring=false
		25 |     }
		26 |   }
		27 |
		28 |   enable_legacy_abac = true
		29 |   logging_service="none"
		30 |   monitoring_service="none"
		31 |   master_authorized_networks_config {
		32 |     cidr_blocks {
		33 |       cidr_block="0.0.0.0/0"
		34 |     }
		35 |   }
		36 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_cluster.fail-public
	File: /terraform/google/gke/container_cluster_public.tf:21-36

		21 | resource "google_container_cluster" "fail-public" {
		22 |   node_config {
		23 |     shielded_instance_config {
		24 |       enable_integrity_monitoring=false
		25 |     }
		26 |   }
		27 |
		28 |   enable_legacy_abac = true
		29 |   logging_service="none"
		30 |   monitoring_service="none"
		31 |   master_authorized_networks_config {
		32 |     cidr_blocks {
		33 |       cidr_block="0.0.0.0/0"
		34 |     }
		35 |   }
		36 | }


Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail-public
	File: /terraform/google/gke/container_cluster_public.tf:21-36

		21 | resource "google_container_cluster" "fail-public" {
		22 |   node_config {
		23 |     shielded_instance_config {
		24 |       enable_integrity_monitoring=false
		25 |     }
		26 |   }
		27 |
		28 |   enable_legacy_abac = true
		29 |   logging_service="none"
		30 |   monitoring_service="none"
		31 |   master_authorized_networks_config {
		32 |     cidr_blocks {
		33 |       cidr_block="0.0.0.0/0"
		34 |     }
		35 |   }
		36 | }


Check: CKV_GCP_10: "Ensure 'Automatic node upgrade' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/container_node_pool.tf:9-27

		9  | resource "google_container_node_pool" "fail" {
		10 |   name       = "my-node-pool"
		11 |   cluster    = google_container_cluster.primary.id
		12 |   node_count = 1
		13 |
		14 |   node_config {
		15 |     preemptible  = true
		16 |     machine_type = "e2-medium"
		17 |
		18 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		19 |     service_account = google_service_account.default.email
		20 |     oauth_scopes = [
		21 |       "https://www.googleapis.com/auth/cloud-platform"
		22 |     ]
		23 |   }
		24 |   management {
		25 |     auto_repair = false
		26 |   }
		27 | }


Check: CKV_GCP_22: "Ensure Container-Optimized OS (cos) is used for Kubernetes Engine Clusters Node image"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/container_node_pool.tf:9-27

		9  | resource "google_container_node_pool" "fail" {
		10 |   name       = "my-node-pool"
		11 |   cluster    = google_container_cluster.primary.id
		12 |   node_count = 1
		13 |
		14 |   node_config {
		15 |     preemptible  = true
		16 |     machine_type = "e2-medium"
		17 |
		18 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		19 |     service_account = google_service_account.default.email
		20 |     oauth_scopes = [
		21 |       "https://www.googleapis.com/auth/cloud-platform"
		22 |     ]
		23 |   }
		24 |   management {
		25 |     auto_repair = false
		26 |   }
		27 | }


Check: CKV_GCP_68: "Ensure Secure Boot for Shielded GKE Nodes is Enabled"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/container_node_pool.tf:9-27

		9  | resource "google_container_node_pool" "fail" {
		10 |   name       = "my-node-pool"
		11 |   cluster    = google_container_cluster.primary.id
		12 |   node_count = 1
		13 |
		14 |   node_config {
		15 |     preemptible  = true
		16 |     machine_type = "e2-medium"
		17 |
		18 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		19 |     service_account = google_service_account.default.email
		20 |     oauth_scopes = [
		21 |       "https://www.googleapis.com/auth/cloud-platform"
		22 |     ]
		23 |   }
		24 |   management {
		25 |     auto_repair = false
		26 |   }
		27 | }


Check: CKV_GCP_9: "Ensure 'Automatic node repair' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/container_node_pool.tf:9-27

		9  | resource "google_container_node_pool" "fail" {
		10 |   name       = "my-node-pool"
		11 |   cluster    = google_container_cluster.primary.id
		12 |   node_count = 1
		13 |
		14 |   node_config {
		15 |     preemptible  = true
		16 |     machine_type = "e2-medium"
		17 |
		18 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		19 |     service_account = google_service_account.default.email
		20 |     oauth_scopes = [
		21 |       "https://www.googleapis.com/auth/cloud-platform"
		22 |     ]
		23 |   }
		24 |   management {
		25 |     auto_repair = false
		26 |   }
		27 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/container_node_pool.tf:9-27

		9  | resource "google_container_node_pool" "fail" {
		10 |   name       = "my-node-pool"
		11 |   cluster    = google_container_cluster.primary.id
		12 |   node_count = 1
		13 |
		14 |   node_config {
		15 |     preemptible  = true
		16 |     machine_type = "e2-medium"
		17 |
		18 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		19 |     service_account = google_service_account.default.email
		20 |     oauth_scopes = [
		21 |       "https://www.googleapis.com/auth/cloud-platform"
		22 |     ]
		23 |   }
		24 |   management {
		25 |     auto_repair = false
		26 |   }
		27 | }


Check: CKV_GCP_24: "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-repair.tf:8-17

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-repair.tf:8-17

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-repair.tf:8-17

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-repair.tf:8-17

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-repair.tf:8-17

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-repair.tf:8-17

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-repair.tf:8-17

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-repair.tf:8-17

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-repair.tf:8-17

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-repair.tf:8-17

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-repair.tf:8-17

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-repair.tf:8-17

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-repair.tf:8-17

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-repair.tf:8-17

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-repair.tf:8-17

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-repair.tf:8-17

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_10: "Ensure 'Automatic node upgrade' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/enable-auto-repair.tf:19-37

		19 | resource "google_container_node_pool" "fail" {
		20 |   name       = "my-node-pool"
		21 |   cluster    = google_container_cluster.primary.id
		22 |   node_count = 1
		23 |
		24 |   node_config {
		25 |     preemptible  = true
		26 |     machine_type = "e2-medium"
		27 |
		28 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		29 |     service_account = google_service_account.default.email
		30 |     oauth_scopes = [
		31 |       "https://www.googleapis.com/auth/cloud-platform"
		32 |     ]
		33 |   }
		34 |   management {
		35 |     auto_repair = false
		36 |   }
		37 | }


Check: CKV_GCP_22: "Ensure Container-Optimized OS (cos) is used for Kubernetes Engine Clusters Node image"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/enable-auto-repair.tf:19-37

		19 | resource "google_container_node_pool" "fail" {
		20 |   name       = "my-node-pool"
		21 |   cluster    = google_container_cluster.primary.id
		22 |   node_count = 1
		23 |
		24 |   node_config {
		25 |     preemptible  = true
		26 |     machine_type = "e2-medium"
		27 |
		28 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		29 |     service_account = google_service_account.default.email
		30 |     oauth_scopes = [
		31 |       "https://www.googleapis.com/auth/cloud-platform"
		32 |     ]
		33 |   }
		34 |   management {
		35 |     auto_repair = false
		36 |   }
		37 | }


Check: CKV_GCP_68: "Ensure Secure Boot for Shielded GKE Nodes is Enabled"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/enable-auto-repair.tf:19-37

		19 | resource "google_container_node_pool" "fail" {
		20 |   name       = "my-node-pool"
		21 |   cluster    = google_container_cluster.primary.id
		22 |   node_count = 1
		23 |
		24 |   node_config {
		25 |     preemptible  = true
		26 |     machine_type = "e2-medium"
		27 |
		28 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		29 |     service_account = google_service_account.default.email
		30 |     oauth_scopes = [
		31 |       "https://www.googleapis.com/auth/cloud-platform"
		32 |     ]
		33 |   }
		34 |   management {
		35 |     auto_repair = false
		36 |   }
		37 | }


Check: CKV_GCP_9: "Ensure 'Automatic node repair' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/enable-auto-repair.tf:19-37

		19 | resource "google_container_node_pool" "fail" {
		20 |   name       = "my-node-pool"
		21 |   cluster    = google_container_cluster.primary.id
		22 |   node_count = 1
		23 |
		24 |   node_config {
		25 |     preemptible  = true
		26 |     machine_type = "e2-medium"
		27 |
		28 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		29 |     service_account = google_service_account.default.email
		30 |     oauth_scopes = [
		31 |       "https://www.googleapis.com/auth/cloud-platform"
		32 |     ]
		33 |   }
		34 |   management {
		35 |     auto_repair = false
		36 |   }
		37 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/enable-auto-repair.tf:19-37

		19 | resource "google_container_node_pool" "fail" {
		20 |   name       = "my-node-pool"
		21 |   cluster    = google_container_cluster.primary.id
		22 |   node_count = 1
		23 |
		24 |   node_config {
		25 |     preemptible  = true
		26 |     machine_type = "e2-medium"
		27 |
		28 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		29 |     service_account = google_service_account.default.email
		30 |     oauth_scopes = [
		31 |       "https://www.googleapis.com/auth/cloud-platform"
		32 |     ]
		33 |   }
		34 |   management {
		35 |     auto_repair = false
		36 |   }
		37 | }


Check: CKV_GCP_24: "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-upgrade.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-upgrade.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-upgrade.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-upgrade.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-upgrade.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-upgrade.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-upgrade.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-upgrade.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-upgrade.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-upgrade.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-upgrade.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-upgrade.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-upgrade.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-upgrade.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-upgrade.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-auto-upgrade.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_10: "Ensure 'Automatic node upgrade' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/enable-auto-upgrade.tf:18-36

		18 | resource "google_container_node_pool" "fail" {
		19 |   name       = "my-node-pool"
		20 |   cluster    = google_container_cluster.primary.id
		21 |   node_count = 1
		22 |
		23 |   node_config {
		24 |     preemptible  = true
		25 |     machine_type = "e2-medium"
		26 |
		27 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		28 |     service_account = google_service_account.default.email
		29 |     oauth_scopes = [
		30 |       "https://www.googleapis.com/auth/cloud-platform"
		31 |     ]
		32 |   }
		33 |   management {
		34 |     auto_upgrade = false
		35 |   }
		36 | }


Check: CKV_GCP_22: "Ensure Container-Optimized OS (cos) is used for Kubernetes Engine Clusters Node image"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/enable-auto-upgrade.tf:18-36

		18 | resource "google_container_node_pool" "fail" {
		19 |   name       = "my-node-pool"
		20 |   cluster    = google_container_cluster.primary.id
		21 |   node_count = 1
		22 |
		23 |   node_config {
		24 |     preemptible  = true
		25 |     machine_type = "e2-medium"
		26 |
		27 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		28 |     service_account = google_service_account.default.email
		29 |     oauth_scopes = [
		30 |       "https://www.googleapis.com/auth/cloud-platform"
		31 |     ]
		32 |   }
		33 |   management {
		34 |     auto_upgrade = false
		35 |   }
		36 | }


Check: CKV_GCP_68: "Ensure Secure Boot for Shielded GKE Nodes is Enabled"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/enable-auto-upgrade.tf:18-36

		18 | resource "google_container_node_pool" "fail" {
		19 |   name       = "my-node-pool"
		20 |   cluster    = google_container_cluster.primary.id
		21 |   node_count = 1
		22 |
		23 |   node_config {
		24 |     preemptible  = true
		25 |     machine_type = "e2-medium"
		26 |
		27 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		28 |     service_account = google_service_account.default.email
		29 |     oauth_scopes = [
		30 |       "https://www.googleapis.com/auth/cloud-platform"
		31 |     ]
		32 |   }
		33 |   management {
		34 |     auto_upgrade = false
		35 |   }
		36 | }


Check: CKV_GCP_9: "Ensure 'Automatic node repair' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/enable-auto-upgrade.tf:18-36

		18 | resource "google_container_node_pool" "fail" {
		19 |   name       = "my-node-pool"
		20 |   cluster    = google_container_cluster.primary.id
		21 |   node_count = 1
		22 |
		23 |   node_config {
		24 |     preemptible  = true
		25 |     machine_type = "e2-medium"
		26 |
		27 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		28 |     service_account = google_service_account.default.email
		29 |     oauth_scopes = [
		30 |       "https://www.googleapis.com/auth/cloud-platform"
		31 |     ]
		32 |   }
		33 |   management {
		34 |     auto_upgrade = false
		35 |   }
		36 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/enable-auto-upgrade.tf:18-36

		18 | resource "google_container_node_pool" "fail" {
		19 |   name       = "my-node-pool"
		20 |   cluster    = google_container_cluster.primary.id
		21 |   node_count = 1
		22 |
		23 |   node_config {
		24 |     preemptible  = true
		25 |     machine_type = "e2-medium"
		26 |
		27 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		28 |     service_account = google_service_account.default.email
		29 |     oauth_scopes = [
		30 |       "https://www.googleapis.com/auth/cloud-platform"
		31 |     ]
		32 |   }
		33 |   management {
		34 |     auto_upgrade = false
		35 |   }
		36 | }


Check: CKV_GCP_24: "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-ip-aliasing.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-ip-aliasing.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-ip-aliasing.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-ip-aliasing.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-ip-aliasing.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-ip-aliasing.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-ip-aliasing.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-ip-aliasing.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-ip-aliasing.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-ip-aliasing.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-ip-aliasing.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-ip-aliasing.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-ip-aliasing.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-ip-aliasing.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-ip-aliasing.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-ip-aliasing.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_10: "Ensure 'Automatic node upgrade' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-ip-aliasing.tf:19-35

		19 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		20 |   name       = "my-node-pool"
		21 |   location   = "us-central1"
		22 |   cluster    = google_container_cluster.primary.name
		23 |   node_count = 1
		24 |
		25 |   node_config {
		26 |     preemptible  = true
		27 |     machine_type = "e2-medium"
		28 |
		29 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		30 |     service_account = google_service_account.default.email
		31 |     oauth_scopes = [
		32 |       "https://www.googleapis.com/auth/cloud-platform"
		33 |     ]
		34 |   }
		35 | }


Check: CKV_GCP_22: "Ensure Container-Optimized OS (cos) is used for Kubernetes Engine Clusters Node image"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-ip-aliasing.tf:19-35

		19 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		20 |   name       = "my-node-pool"
		21 |   location   = "us-central1"
		22 |   cluster    = google_container_cluster.primary.name
		23 |   node_count = 1
		24 |
		25 |   node_config {
		26 |     preemptible  = true
		27 |     machine_type = "e2-medium"
		28 |
		29 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		30 |     service_account = google_service_account.default.email
		31 |     oauth_scopes = [
		32 |       "https://www.googleapis.com/auth/cloud-platform"
		33 |     ]
		34 |   }
		35 | }


Check: CKV_GCP_68: "Ensure Secure Boot for Shielded GKE Nodes is Enabled"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-ip-aliasing.tf:19-35

		19 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		20 |   name       = "my-node-pool"
		21 |   location   = "us-central1"
		22 |   cluster    = google_container_cluster.primary.name
		23 |   node_count = 1
		24 |
		25 |   node_config {
		26 |     preemptible  = true
		27 |     machine_type = "e2-medium"
		28 |
		29 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		30 |     service_account = google_service_account.default.email
		31 |     oauth_scopes = [
		32 |       "https://www.googleapis.com/auth/cloud-platform"
		33 |     ]
		34 |   }
		35 | }


Check: CKV_GCP_9: "Ensure 'Automatic node repair' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-ip-aliasing.tf:19-35

		19 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		20 |   name       = "my-node-pool"
		21 |   location   = "us-central1"
		22 |   cluster    = google_container_cluster.primary.name
		23 |   node_count = 1
		24 |
		25 |   node_config {
		26 |     preemptible  = true
		27 |     machine_type = "e2-medium"
		28 |
		29 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		30 |     service_account = google_service_account.default.email
		31 |     oauth_scopes = [
		32 |       "https://www.googleapis.com/auth/cloud-platform"
		33 |     ]
		34 |   }
		35 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-ip-aliasing.tf:19-35

		19 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		20 |   name       = "my-node-pool"
		21 |   location   = "us-central1"
		22 |   cluster    = google_container_cluster.primary.name
		23 |   node_count = 1
		24 |
		25 |   node_config {
		26 |     preemptible  = true
		27 |     machine_type = "e2-medium"
		28 |
		29 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		30 |     service_account = google_service_account.default.email
		31 |     oauth_scopes = [
		32 |       "https://www.googleapis.com/auth/cloud-platform"
		33 |     ]
		34 |   }
		35 | }


Check: CKV_GCP_24: "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-master-networks.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-master-networks.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-master-networks.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-master-networks.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-master-networks.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-master-networks.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-master-networks.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-master-networks.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-master-networks.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-master-networks.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-master-networks.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-master-networks.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-master-networks.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-master-networks.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-master-networks.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/enable-master-networks.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_10: "Ensure 'Automatic node upgrade' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-master-networks.tf:18-34

		18 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		19 |   name       = "my-node-pool"
		20 |   location   = "us-central1"
		21 |   cluster    = google_container_cluster.primary.name
		22 |   node_count = 1
		23 |
		24 |   node_config {
		25 |     preemptible  = true
		26 |     machine_type = "e2-medium"
		27 |
		28 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		29 |     service_account = google_service_account.default.email
		30 |     oauth_scopes = [
		31 |       "https://www.googleapis.com/auth/cloud-platform"
		32 |     ]
		33 |   }
		34 | }


Check: CKV_GCP_22: "Ensure Container-Optimized OS (cos) is used for Kubernetes Engine Clusters Node image"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-master-networks.tf:18-34

		18 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		19 |   name       = "my-node-pool"
		20 |   location   = "us-central1"
		21 |   cluster    = google_container_cluster.primary.name
		22 |   node_count = 1
		23 |
		24 |   node_config {
		25 |     preemptible  = true
		26 |     machine_type = "e2-medium"
		27 |
		28 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		29 |     service_account = google_service_account.default.email
		30 |     oauth_scopes = [
		31 |       "https://www.googleapis.com/auth/cloud-platform"
		32 |     ]
		33 |   }
		34 | }


Check: CKV_GCP_68: "Ensure Secure Boot for Shielded GKE Nodes is Enabled"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-master-networks.tf:18-34

		18 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		19 |   name       = "my-node-pool"
		20 |   location   = "us-central1"
		21 |   cluster    = google_container_cluster.primary.name
		22 |   node_count = 1
		23 |
		24 |   node_config {
		25 |     preemptible  = true
		26 |     machine_type = "e2-medium"
		27 |
		28 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		29 |     service_account = google_service_account.default.email
		30 |     oauth_scopes = [
		31 |       "https://www.googleapis.com/auth/cloud-platform"
		32 |     ]
		33 |   }
		34 | }


Check: CKV_GCP_9: "Ensure 'Automatic node repair' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-master-networks.tf:18-34

		18 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		19 |   name       = "my-node-pool"
		20 |   location   = "us-central1"
		21 |   cluster    = google_container_cluster.primary.name
		22 |   node_count = 1
		23 |
		24 |   node_config {
		25 |     preemptible  = true
		26 |     machine_type = "e2-medium"
		27 |
		28 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		29 |     service_account = google_service_account.default.email
		30 |     oauth_scopes = [
		31 |       "https://www.googleapis.com/auth/cloud-platform"
		32 |     ]
		33 |   }
		34 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-master-networks.tf:18-34

		18 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		19 |   name       = "my-node-pool"
		20 |   location   = "us-central1"
		21 |   cluster    = google_container_cluster.primary.name
		22 |   node_count = 1
		23 |
		24 |   node_config {
		25 |     preemptible  = true
		26 |     machine_type = "e2-medium"
		27 |
		28 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		29 |     service_account = google_service_account.default.email
		30 |     oauth_scopes = [
		31 |       "https://www.googleapis.com/auth/cloud-platform"
		32 |     ]
		33 |   }
		34 | }


Check: CKV_GCP_24: "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-network-policy.tf:8-20

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   network_policy {
		18 |     enabled = false
		19 |   }
		20 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-network-policy.tf:8-20

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   network_policy {
		18 |     enabled = false
		19 |   }
		20 | }


Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-network-policy.tf:8-20

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   network_policy {
		18 |     enabled = false
		19 |   }
		20 | }


Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-network-policy.tf:8-20

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   network_policy {
		18 |     enabled = false
		19 |   }
		20 | }


Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-network-policy.tf:8-20

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   network_policy {
		18 |     enabled = false
		19 |   }
		20 | }


Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-network-policy.tf:8-20

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   network_policy {
		18 |     enabled = false
		19 |   }
		20 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-network-policy.tf:8-20

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   network_policy {
		18 |     enabled = false
		19 |   }
		20 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-network-policy.tf:8-20

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   network_policy {
		18 |     enabled = false
		19 |   }
		20 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-network-policy.tf:8-20

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   network_policy {
		18 |     enabled = false
		19 |   }
		20 | }


Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-network-policy.tf:8-20

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   network_policy {
		18 |     enabled = false
		19 |   }
		20 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-network-policy.tf:8-20

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   network_policy {
		18 |     enabled = false
		19 |   }
		20 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-network-policy.tf:8-20

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   network_policy {
		18 |     enabled = false
		19 |   }
		20 | }


Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-network-policy.tf:8-20

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   network_policy {
		18 |     enabled = false
		19 |   }
		20 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-network-policy.tf:8-20

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   network_policy {
		18 |     enabled = false
		19 |   }
		20 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-network-policy.tf:8-20

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   network_policy {
		18 |     enabled = false
		19 |   }
		20 | }


Check: CKV_GCP_10: "Ensure 'Automatic node upgrade' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-network-policy.tf:22-38

		22 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		23 |   name       = "my-node-pool"
		24 |   location   = "us-central1"
		25 |   cluster    = google_container_cluster.primary.name
		26 |   node_count = 1
		27 |
		28 |   node_config {
		29 |     preemptible  = true
		30 |     machine_type = "e2-medium"
		31 |
		32 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		33 |     service_account = google_service_account.default.email
		34 |     oauth_scopes = [
		35 |       "https://www.googleapis.com/auth/cloud-platform"
		36 |     ]
		37 |   }
		38 | }


Check: CKV_GCP_22: "Ensure Container-Optimized OS (cos) is used for Kubernetes Engine Clusters Node image"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-network-policy.tf:22-38

		22 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		23 |   name       = "my-node-pool"
		24 |   location   = "us-central1"
		25 |   cluster    = google_container_cluster.primary.name
		26 |   node_count = 1
		27 |
		28 |   node_config {
		29 |     preemptible  = true
		30 |     machine_type = "e2-medium"
		31 |
		32 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		33 |     service_account = google_service_account.default.email
		34 |     oauth_scopes = [
		35 |       "https://www.googleapis.com/auth/cloud-platform"
		36 |     ]
		37 |   }
		38 | }


Check: CKV_GCP_68: "Ensure Secure Boot for Shielded GKE Nodes is Enabled"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-network-policy.tf:22-38

		22 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		23 |   name       = "my-node-pool"
		24 |   location   = "us-central1"
		25 |   cluster    = google_container_cluster.primary.name
		26 |   node_count = 1
		27 |
		28 |   node_config {
		29 |     preemptible  = true
		30 |     machine_type = "e2-medium"
		31 |
		32 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		33 |     service_account = google_service_account.default.email
		34 |     oauth_scopes = [
		35 |       "https://www.googleapis.com/auth/cloud-platform"
		36 |     ]
		37 |   }
		38 | }


Check: CKV_GCP_9: "Ensure 'Automatic node repair' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-network-policy.tf:22-38

		22 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		23 |   name       = "my-node-pool"
		24 |   location   = "us-central1"
		25 |   cluster    = google_container_cluster.primary.name
		26 |   node_count = 1
		27 |
		28 |   node_config {
		29 |     preemptible  = true
		30 |     machine_type = "e2-medium"
		31 |
		32 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		33 |     service_account = google_service_account.default.email
		34 |     oauth_scopes = [
		35 |       "https://www.googleapis.com/auth/cloud-platform"
		36 |     ]
		37 |   }
		38 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-network-policy.tf:22-38

		22 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		23 |   name       = "my-node-pool"
		24 |   location   = "us-central1"
		25 |   cluster    = google_container_cluster.primary.name
		26 |   node_count = 1
		27 |
		28 |   node_config {
		29 |     preemptible  = true
		30 |     machine_type = "e2-medium"
		31 |
		32 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		33 |     service_account = google_service_account.default.email
		34 |     oauth_scopes = [
		35 |       "https://www.googleapis.com/auth/cloud-platform"
		36 |     ]
		37 |   }
		38 | }


Check: CKV_GCP_24: "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-private-cluster.tf:7-19

		7  | resource "google_container_cluster" "fail" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 |   private_cluster_config {
		17 |     enable_private_nodes = false
		18 |   }
		19 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-private-cluster.tf:7-19

		7  | resource "google_container_cluster" "fail" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 |   private_cluster_config {
		17 |     enable_private_nodes = false
		18 |   }
		19 | }


Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-private-cluster.tf:7-19

		7  | resource "google_container_cluster" "fail" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 |   private_cluster_config {
		17 |     enable_private_nodes = false
		18 |   }
		19 | }


Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-private-cluster.tf:7-19

		7  | resource "google_container_cluster" "fail" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 |   private_cluster_config {
		17 |     enable_private_nodes = false
		18 |   }
		19 | }


Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-private-cluster.tf:7-19

		7  | resource "google_container_cluster" "fail" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 |   private_cluster_config {
		17 |     enable_private_nodes = false
		18 |   }
		19 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-private-cluster.tf:7-19

		7  | resource "google_container_cluster" "fail" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 |   private_cluster_config {
		17 |     enable_private_nodes = false
		18 |   }
		19 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-private-cluster.tf:7-19

		7  | resource "google_container_cluster" "fail" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 |   private_cluster_config {
		17 |     enable_private_nodes = false
		18 |   }
		19 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-private-cluster.tf:7-19

		7  | resource "google_container_cluster" "fail" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 |   private_cluster_config {
		17 |     enable_private_nodes = false
		18 |   }
		19 | }


Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-private-cluster.tf:7-19

		7  | resource "google_container_cluster" "fail" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 |   private_cluster_config {
		17 |     enable_private_nodes = false
		18 |   }
		19 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-private-cluster.tf:7-19

		7  | resource "google_container_cluster" "fail" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 |   private_cluster_config {
		17 |     enable_private_nodes = false
		18 |   }
		19 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-private-cluster.tf:7-19

		7  | resource "google_container_cluster" "fail" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 |   private_cluster_config {
		17 |     enable_private_nodes = false
		18 |   }
		19 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-private-cluster.tf:7-19

		7  | resource "google_container_cluster" "fail" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 |   private_cluster_config {
		17 |     enable_private_nodes = false
		18 |   }
		19 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-private-cluster.tf:7-19

		7  | resource "google_container_cluster" "fail" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 |   private_cluster_config {
		17 |     enable_private_nodes = false
		18 |   }
		19 | }


Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-private-cluster.tf:7-19

		7  | resource "google_container_cluster" "fail" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 |   private_cluster_config {
		17 |     enable_private_nodes = false
		18 |   }
		19 | }


Check: CKV_GCP_10: "Ensure 'Automatic node upgrade' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-private-cluster.tf:21-37

		21 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		22 |   name       = "my-node-pool"
		23 |   location   = "us-central1"
		24 |   cluster    = google_container_cluster.primary.name
		25 |   node_count = 1
		26 |
		27 |   node_config {
		28 |     preemptible  = true
		29 |     machine_type = "e2-medium"
		30 |
		31 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		32 |     service_account = google_service_account.default.email
		33 |     oauth_scopes = [
		34 |       "https://www.googleapis.com/auth/cloud-platform"
		35 |     ]
		36 |   }
		37 | }


Check: CKV_GCP_22: "Ensure Container-Optimized OS (cos) is used for Kubernetes Engine Clusters Node image"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-private-cluster.tf:21-37

		21 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		22 |   name       = "my-node-pool"
		23 |   location   = "us-central1"
		24 |   cluster    = google_container_cluster.primary.name
		25 |   node_count = 1
		26 |
		27 |   node_config {
		28 |     preemptible  = true
		29 |     machine_type = "e2-medium"
		30 |
		31 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		32 |     service_account = google_service_account.default.email
		33 |     oauth_scopes = [
		34 |       "https://www.googleapis.com/auth/cloud-platform"
		35 |     ]
		36 |   }
		37 | }


Check: CKV_GCP_68: "Ensure Secure Boot for Shielded GKE Nodes is Enabled"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-private-cluster.tf:21-37

		21 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		22 |   name       = "my-node-pool"
		23 |   location   = "us-central1"
		24 |   cluster    = google_container_cluster.primary.name
		25 |   node_count = 1
		26 |
		27 |   node_config {
		28 |     preemptible  = true
		29 |     machine_type = "e2-medium"
		30 |
		31 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		32 |     service_account = google_service_account.default.email
		33 |     oauth_scopes = [
		34 |       "https://www.googleapis.com/auth/cloud-platform"
		35 |     ]
		36 |   }
		37 | }


Check: CKV_GCP_9: "Ensure 'Automatic node repair' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-private-cluster.tf:21-37

		21 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		22 |   name       = "my-node-pool"
		23 |   location   = "us-central1"
		24 |   cluster    = google_container_cluster.primary.name
		25 |   node_count = 1
		26 |
		27 |   node_config {
		28 |     preemptible  = true
		29 |     machine_type = "e2-medium"
		30 |
		31 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		32 |     service_account = google_service_account.default.email
		33 |     oauth_scopes = [
		34 |       "https://www.googleapis.com/auth/cloud-platform"
		35 |     ]
		36 |   }
		37 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-private-cluster.tf:21-37

		21 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		22 |   name       = "my-node-pool"
		23 |   location   = "us-central1"
		24 |   cluster    = google_container_cluster.primary.name
		25 |   node_count = 1
		26 |
		27 |   node_config {
		28 |     preemptible  = true
		29 |     machine_type = "e2-medium"
		30 |
		31 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		32 |     service_account = google_service_account.default.email
		33 |     oauth_scopes = [
		34 |       "https://www.googleapis.com/auth/cloud-platform"
		35 |     ]
		36 |   }
		37 | }


Check: CKV_GCP_24: "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-logging.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   logging_service          = "logging.googleapis.com"
		18 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-logging.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   logging_service          = "logging.googleapis.com"
		18 | }


Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-logging.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   logging_service          = "logging.googleapis.com"
		18 | }


Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-logging.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   logging_service          = "logging.googleapis.com"
		18 | }


Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-logging.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   logging_service          = "logging.googleapis.com"
		18 | }


Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-logging.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   logging_service          = "logging.googleapis.com"
		18 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-logging.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   logging_service          = "logging.googleapis.com"
		18 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-logging.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   logging_service          = "logging.googleapis.com"
		18 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-logging.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   logging_service          = "logging.googleapis.com"
		18 | }


Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-logging.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   logging_service          = "logging.googleapis.com"
		18 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-logging.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   logging_service          = "logging.googleapis.com"
		18 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-logging.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   logging_service          = "logging.googleapis.com"
		18 | }


Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-logging.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   logging_service          = "logging.googleapis.com"
		18 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-logging.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   logging_service          = "logging.googleapis.com"
		18 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-logging.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   logging_service          = "logging.googleapis.com"
		18 | }


Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-logging.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   logging_service          = "logging.googleapis.com"
		18 | }


Check: CKV_GCP_10: "Ensure 'Automatic node upgrade' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-stackdriver-logging.tf:20-36

		20 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		21 |   name       = "my-node-pool"
		22 |   location   = "us-central1"
		23 |   cluster    = google_container_cluster.primary.name
		24 |   node_count = 1
		25 |
		26 |   node_config {
		27 |     preemptible  = true
		28 |     machine_type = "e2-medium"
		29 |
		30 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		31 |     service_account = google_service_account.default.email
		32 |     oauth_scopes = [
		33 |       "https://www.googleapis.com/auth/cloud-platform"
		34 |     ]
		35 |   }
		36 | }


Check: CKV_GCP_22: "Ensure Container-Optimized OS (cos) is used for Kubernetes Engine Clusters Node image"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-stackdriver-logging.tf:20-36

		20 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		21 |   name       = "my-node-pool"
		22 |   location   = "us-central1"
		23 |   cluster    = google_container_cluster.primary.name
		24 |   node_count = 1
		25 |
		26 |   node_config {
		27 |     preemptible  = true
		28 |     machine_type = "e2-medium"
		29 |
		30 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		31 |     service_account = google_service_account.default.email
		32 |     oauth_scopes = [
		33 |       "https://www.googleapis.com/auth/cloud-platform"
		34 |     ]
		35 |   }
		36 | }


Check: CKV_GCP_68: "Ensure Secure Boot for Shielded GKE Nodes is Enabled"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-stackdriver-logging.tf:20-36

		20 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		21 |   name       = "my-node-pool"
		22 |   location   = "us-central1"
		23 |   cluster    = google_container_cluster.primary.name
		24 |   node_count = 1
		25 |
		26 |   node_config {
		27 |     preemptible  = true
		28 |     machine_type = "e2-medium"
		29 |
		30 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		31 |     service_account = google_service_account.default.email
		32 |     oauth_scopes = [
		33 |       "https://www.googleapis.com/auth/cloud-platform"
		34 |     ]
		35 |   }
		36 | }


Check: CKV_GCP_9: "Ensure 'Automatic node repair' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-stackdriver-logging.tf:20-36

		20 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		21 |   name       = "my-node-pool"
		22 |   location   = "us-central1"
		23 |   cluster    = google_container_cluster.primary.name
		24 |   node_count = 1
		25 |
		26 |   node_config {
		27 |     preemptible  = true
		28 |     machine_type = "e2-medium"
		29 |
		30 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		31 |     service_account = google_service_account.default.email
		32 |     oauth_scopes = [
		33 |       "https://www.googleapis.com/auth/cloud-platform"
		34 |     ]
		35 |   }
		36 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-stackdriver-logging.tf:20-36

		20 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		21 |   name       = "my-node-pool"
		22 |   location   = "us-central1"
		23 |   cluster    = google_container_cluster.primary.name
		24 |   node_count = 1
		25 |
		26 |   node_config {
		27 |     preemptible  = true
		28 |     machine_type = "e2-medium"
		29 |
		30 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		31 |     service_account = google_service_account.default.email
		32 |     oauth_scopes = [
		33 |       "https://www.googleapis.com/auth/cloud-platform"
		34 |     ]
		35 |   }
		36 | }


Check: CKV_GCP_24: "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-monitoring.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   monitoring_service       = "monitoring.googleapis.com"
		18 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-monitoring.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   monitoring_service       = "monitoring.googleapis.com"
		18 | }


Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-monitoring.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   monitoring_service       = "monitoring.googleapis.com"
		18 | }


Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-monitoring.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   monitoring_service       = "monitoring.googleapis.com"
		18 | }


Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-monitoring.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   monitoring_service       = "monitoring.googleapis.com"
		18 | }


Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-monitoring.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   monitoring_service       = "monitoring.googleapis.com"
		18 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-monitoring.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   monitoring_service       = "monitoring.googleapis.com"
		18 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-monitoring.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   monitoring_service       = "monitoring.googleapis.com"
		18 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-monitoring.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   monitoring_service       = "monitoring.googleapis.com"
		18 | }


Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-monitoring.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   monitoring_service       = "monitoring.googleapis.com"
		18 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-monitoring.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   monitoring_service       = "monitoring.googleapis.com"
		18 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-monitoring.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   monitoring_service       = "monitoring.googleapis.com"
		18 | }


Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-monitoring.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   monitoring_service       = "monitoring.googleapis.com"
		18 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-monitoring.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   monitoring_service       = "monitoring.googleapis.com"
		18 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-monitoring.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   monitoring_service       = "monitoring.googleapis.com"
		18 | }


Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enable-stackdriver-monitoring.tf:8-18

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   monitoring_service       = "monitoring.googleapis.com"
		18 | }


Check: CKV_GCP_10: "Ensure 'Automatic node upgrade' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-stackdriver-monitoring.tf:20-36

		20 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		21 |   name       = "my-node-pool"
		22 |   location   = "us-central1"
		23 |   cluster    = google_container_cluster.primary.name
		24 |   node_count = 1
		25 |
		26 |   node_config {
		27 |     preemptible  = true
		28 |     machine_type = "e2-medium"
		29 |
		30 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		31 |     service_account = google_service_account.default.email
		32 |     oauth_scopes = [
		33 |       "https://www.googleapis.com/auth/cloud-platform"
		34 |     ]
		35 |   }
		36 | }


Check: CKV_GCP_22: "Ensure Container-Optimized OS (cos) is used for Kubernetes Engine Clusters Node image"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-stackdriver-monitoring.tf:20-36

		20 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		21 |   name       = "my-node-pool"
		22 |   location   = "us-central1"
		23 |   cluster    = google_container_cluster.primary.name
		24 |   node_count = 1
		25 |
		26 |   node_config {
		27 |     preemptible  = true
		28 |     machine_type = "e2-medium"
		29 |
		30 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		31 |     service_account = google_service_account.default.email
		32 |     oauth_scopes = [
		33 |       "https://www.googleapis.com/auth/cloud-platform"
		34 |     ]
		35 |   }
		36 | }


Check: CKV_GCP_68: "Ensure Secure Boot for Shielded GKE Nodes is Enabled"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-stackdriver-monitoring.tf:20-36

		20 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		21 |   name       = "my-node-pool"
		22 |   location   = "us-central1"
		23 |   cluster    = google_container_cluster.primary.name
		24 |   node_count = 1
		25 |
		26 |   node_config {
		27 |     preemptible  = true
		28 |     machine_type = "e2-medium"
		29 |
		30 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		31 |     service_account = google_service_account.default.email
		32 |     oauth_scopes = [
		33 |       "https://www.googleapis.com/auth/cloud-platform"
		34 |     ]
		35 |   }
		36 | }


Check: CKV_GCP_9: "Ensure 'Automatic node repair' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-stackdriver-monitoring.tf:20-36

		20 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		21 |   name       = "my-node-pool"
		22 |   location   = "us-central1"
		23 |   cluster    = google_container_cluster.primary.name
		24 |   node_count = 1
		25 |
		26 |   node_config {
		27 |     preemptible  = true
		28 |     machine_type = "e2-medium"
		29 |
		30 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		31 |     service_account = google_service_account.default.email
		32 |     oauth_scopes = [
		33 |       "https://www.googleapis.com/auth/cloud-platform"
		34 |     ]
		35 |   }
		36 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/enable-stackdriver-monitoring.tf:20-36

		20 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		21 |   name       = "my-node-pool"
		22 |   location   = "us-central1"
		23 |   cluster    = google_container_cluster.primary.name
		24 |   node_count = 1
		25 |
		26 |   node_config {
		27 |     preemptible  = true
		28 |     machine_type = "e2-medium"
		29 |
		30 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		31 |     service_account = google_service_account.default.email
		32 |     oauth_scopes = [
		33 |       "https://www.googleapis.com/auth/cloud-platform"
		34 |     ]
		35 |   }
		36 | }


Check: CKV_GCP_24: "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enforce-pod-security-policy.tf:3-7

		3 | resource "google_container_cluster" "fail" {
		4 |   pod_security_policy_config {
		5 |     enabled = "false"
		6 |   }
		7 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enforce-pod-security-policy.tf:3-7

		3 | resource "google_container_cluster" "fail" {
		4 |   pod_security_policy_config {
		5 |     enabled = "false"
		6 |   }
		7 | }


Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enforce-pod-security-policy.tf:3-7

		3 | resource "google_container_cluster" "fail" {
		4 |   pod_security_policy_config {
		5 |     enabled = "false"
		6 |   }
		7 | }


Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enforce-pod-security-policy.tf:3-7

		3 | resource "google_container_cluster" "fail" {
		4 |   pod_security_policy_config {
		5 |     enabled = "false"
		6 |   }
		7 | }


Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enforce-pod-security-policy.tf:3-7

		3 | resource "google_container_cluster" "fail" {
		4 |   pod_security_policy_config {
		5 |     enabled = "false"
		6 |   }
		7 | }


Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enforce-pod-security-policy.tf:3-7

		3 | resource "google_container_cluster" "fail" {
		4 |   pod_security_policy_config {
		5 |     enabled = "false"
		6 |   }
		7 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enforce-pod-security-policy.tf:3-7

		3 | resource "google_container_cluster" "fail" {
		4 |   pod_security_policy_config {
		5 |     enabled = "false"
		6 |   }
		7 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enforce-pod-security-policy.tf:3-7

		3 | resource "google_container_cluster" "fail" {
		4 |   pod_security_policy_config {
		5 |     enabled = "false"
		6 |   }
		7 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enforce-pod-security-policy.tf:3-7

		3 | resource "google_container_cluster" "fail" {
		4 |   pod_security_policy_config {
		5 |     enabled = "false"
		6 |   }
		7 | }


Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enforce-pod-security-policy.tf:3-7

		3 | resource "google_container_cluster" "fail" {
		4 |   pod_security_policy_config {
		5 |     enabled = "false"
		6 |   }
		7 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enforce-pod-security-policy.tf:3-7

		3 | resource "google_container_cluster" "fail" {
		4 |   pod_security_policy_config {
		5 |     enabled = "false"
		6 |   }
		7 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enforce-pod-security-policy.tf:3-7

		3 | resource "google_container_cluster" "fail" {
		4 |   pod_security_policy_config {
		5 |     enabled = "false"
		6 |   }
		7 | }


Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enforce-pod-security-policy.tf:3-7

		3 | resource "google_container_cluster" "fail" {
		4 |   pod_security_policy_config {
		5 |     enabled = "false"
		6 |   }
		7 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enforce-pod-security-policy.tf:3-7

		3 | resource "google_container_cluster" "fail" {
		4 |   pod_security_policy_config {
		5 |     enabled = "false"
		6 |   }
		7 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enforce-pod-security-policy.tf:3-7

		3 | resource "google_container_cluster" "fail" {
		4 |   pod_security_policy_config {
		5 |     enabled = "false"
		6 |   }
		7 | }


Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/enforce-pod-security-policy.tf:3-7

		3 | resource "google_container_cluster" "fail" {
		4 |   pod_security_policy_config {
		5 |     enabled = "false"
		6 |   }
		7 | }


Check: CKV_GCP_24: "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/metadata-endpoints-disabled.tf:2-6

		2 | resource "google_container_cluster" "fail" {
		3 |   metadata {
		4 |     disable-legacy-endpoints = false
		5 |   }
		6 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/metadata-endpoints-disabled.tf:2-6

		2 | resource "google_container_cluster" "fail" {
		3 |   metadata {
		4 |     disable-legacy-endpoints = false
		5 |   }
		6 | }


Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/metadata-endpoints-disabled.tf:2-6

		2 | resource "google_container_cluster" "fail" {
		3 |   metadata {
		4 |     disable-legacy-endpoints = false
		5 |   }
		6 | }


Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/metadata-endpoints-disabled.tf:2-6

		2 | resource "google_container_cluster" "fail" {
		3 |   metadata {
		4 |     disable-legacy-endpoints = false
		5 |   }
		6 | }


Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/metadata-endpoints-disabled.tf:2-6

		2 | resource "google_container_cluster" "fail" {
		3 |   metadata {
		4 |     disable-legacy-endpoints = false
		5 |   }
		6 | }


Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/metadata-endpoints-disabled.tf:2-6

		2 | resource "google_container_cluster" "fail" {
		3 |   metadata {
		4 |     disable-legacy-endpoints = false
		5 |   }
		6 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/metadata-endpoints-disabled.tf:2-6

		2 | resource "google_container_cluster" "fail" {
		3 |   metadata {
		4 |     disable-legacy-endpoints = false
		5 |   }
		6 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/metadata-endpoints-disabled.tf:2-6

		2 | resource "google_container_cluster" "fail" {
		3 |   metadata {
		4 |     disable-legacy-endpoints = false
		5 |   }
		6 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/metadata-endpoints-disabled.tf:2-6

		2 | resource "google_container_cluster" "fail" {
		3 |   metadata {
		4 |     disable-legacy-endpoints = false
		5 |   }
		6 | }


Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/metadata-endpoints-disabled.tf:2-6

		2 | resource "google_container_cluster" "fail" {
		3 |   metadata {
		4 |     disable-legacy-endpoints = false
		5 |   }
		6 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/metadata-endpoints-disabled.tf:2-6

		2 | resource "google_container_cluster" "fail" {
		3 |   metadata {
		4 |     disable-legacy-endpoints = false
		5 |   }
		6 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/metadata-endpoints-disabled.tf:2-6

		2 | resource "google_container_cluster" "fail" {
		3 |   metadata {
		4 |     disable-legacy-endpoints = false
		5 |   }
		6 | }


Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/metadata-endpoints-disabled.tf:2-6

		2 | resource "google_container_cluster" "fail" {
		3 |   metadata {
		4 |     disable-legacy-endpoints = false
		5 |   }
		6 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/metadata-endpoints-disabled.tf:2-6

		2 | resource "google_container_cluster" "fail" {
		3 |   metadata {
		4 |     disable-legacy-endpoints = false
		5 |   }
		6 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/metadata-endpoints-disabled.tf:2-6

		2 | resource "google_container_cluster" "fail" {
		3 |   metadata {
		4 |     disable-legacy-endpoints = false
		5 |   }
		6 | }


Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/metadata-endpoints-disabled.tf:2-6

		2 | resource "google_container_cluster" "fail" {
		3 |   metadata {
		4 |     disable-legacy-endpoints = false
		5 |   }
		6 | }


Check: CKV_GCP_24: "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.good_example
	File: /terraform/google/gke/no-legacy-auth.tf:8-22

		8  | resource "google_container_cluster" "good_example" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_auth {
		18 |     client_certificate_config {
		19 |       issue_client_certificate = true
		20 |     }
		21 |   }
		22 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.good_example
	File: /terraform/google/gke/no-legacy-auth.tf:8-22

		8  | resource "google_container_cluster" "good_example" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_auth {
		18 |     client_certificate_config {
		19 |       issue_client_certificate = true
		20 |     }
		21 |   }
		22 | }


Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	FAILED for resource: google_container_cluster.good_example
	File: /terraform/google/gke/no-legacy-auth.tf:8-22

		8  | resource "google_container_cluster" "good_example" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_auth {
		18 |     client_certificate_config {
		19 |       issue_client_certificate = true
		20 |     }
		21 |   }
		22 | }


Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	FAILED for resource: google_container_cluster.good_example
	File: /terraform/google/gke/no-legacy-auth.tf:8-22

		8  | resource "google_container_cluster" "good_example" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_auth {
		18 |     client_certificate_config {
		19 |       issue_client_certificate = true
		20 |     }
		21 |   }
		22 | }


Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	FAILED for resource: google_container_cluster.good_example
	File: /terraform/google/gke/no-legacy-auth.tf:8-22

		8  | resource "google_container_cluster" "good_example" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_auth {
		18 |     client_certificate_config {
		19 |       issue_client_certificate = true
		20 |     }
		21 |   }
		22 | }


Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	FAILED for resource: google_container_cluster.good_example
	File: /terraform/google/gke/no-legacy-auth.tf:8-22

		8  | resource "google_container_cluster" "good_example" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_auth {
		18 |     client_certificate_config {
		19 |       issue_client_certificate = true
		20 |     }
		21 |   }
		22 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.good_example
	File: /terraform/google/gke/no-legacy-auth.tf:8-22

		8  | resource "google_container_cluster" "good_example" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_auth {
		18 |     client_certificate_config {
		19 |       issue_client_certificate = true
		20 |     }
		21 |   }
		22 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.good_example
	File: /terraform/google/gke/no-legacy-auth.tf:8-22

		8  | resource "google_container_cluster" "good_example" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_auth {
		18 |     client_certificate_config {
		19 |       issue_client_certificate = true
		20 |     }
		21 |   }
		22 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.good_example
	File: /terraform/google/gke/no-legacy-auth.tf:8-22

		8  | resource "google_container_cluster" "good_example" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_auth {
		18 |     client_certificate_config {
		19 |       issue_client_certificate = true
		20 |     }
		21 |   }
		22 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.good_example
	File: /terraform/google/gke/no-legacy-auth.tf:8-22

		8  | resource "google_container_cluster" "good_example" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_auth {
		18 |     client_certificate_config {
		19 |       issue_client_certificate = true
		20 |     }
		21 |   }
		22 | }


Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	FAILED for resource: google_container_cluster.good_example
	File: /terraform/google/gke/no-legacy-auth.tf:8-22

		8  | resource "google_container_cluster" "good_example" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_auth {
		18 |     client_certificate_config {
		19 |       issue_client_certificate = true
		20 |     }
		21 |   }
		22 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.good_example
	File: /terraform/google/gke/no-legacy-auth.tf:8-22

		8  | resource "google_container_cluster" "good_example" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_auth {
		18 |     client_certificate_config {
		19 |       issue_client_certificate = true
		20 |     }
		21 |   }
		22 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_cluster.good_example
	File: /terraform/google/gke/no-legacy-auth.tf:8-22

		8  | resource "google_container_cluster" "good_example" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_auth {
		18 |     client_certificate_config {
		19 |       issue_client_certificate = true
		20 |     }
		21 |   }
		22 | }


Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.good_example
	File: /terraform/google/gke/no-legacy-auth.tf:8-22

		8  | resource "google_container_cluster" "good_example" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_auth {
		18 |     client_certificate_config {
		19 |       issue_client_certificate = true
		20 |     }
		21 |   }
		22 | }


Check: CKV_GCP_10: "Ensure 'Automatic node upgrade' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/no-legacy-auth.tf:24-40

		24 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		25 |   name       = "my-node-pool"
		26 |   location   = "us-central1"
		27 |   cluster    = google_container_cluster.primary.name
		28 |   node_count = 1
		29 |
		30 |   node_config {
		31 |     preemptible  = true
		32 |     machine_type = "e2-medium"
		33 |
		34 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		35 |     service_account = google_service_account.default.email
		36 |     oauth_scopes = [
		37 |       "https://www.googleapis.com/auth/cloud-platform"
		38 |     ]
		39 |   }
		40 | }


Check: CKV_GCP_22: "Ensure Container-Optimized OS (cos) is used for Kubernetes Engine Clusters Node image"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/no-legacy-auth.tf:24-40

		24 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		25 |   name       = "my-node-pool"
		26 |   location   = "us-central1"
		27 |   cluster    = google_container_cluster.primary.name
		28 |   node_count = 1
		29 |
		30 |   node_config {
		31 |     preemptible  = true
		32 |     machine_type = "e2-medium"
		33 |
		34 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		35 |     service_account = google_service_account.default.email
		36 |     oauth_scopes = [
		37 |       "https://www.googleapis.com/auth/cloud-platform"
		38 |     ]
		39 |   }
		40 | }


Check: CKV_GCP_68: "Ensure Secure Boot for Shielded GKE Nodes is Enabled"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/no-legacy-auth.tf:24-40

		24 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		25 |   name       = "my-node-pool"
		26 |   location   = "us-central1"
		27 |   cluster    = google_container_cluster.primary.name
		28 |   node_count = 1
		29 |
		30 |   node_config {
		31 |     preemptible  = true
		32 |     machine_type = "e2-medium"
		33 |
		34 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		35 |     service_account = google_service_account.default.email
		36 |     oauth_scopes = [
		37 |       "https://www.googleapis.com/auth/cloud-platform"
		38 |     ]
		39 |   }
		40 | }


Check: CKV_GCP_9: "Ensure 'Automatic node repair' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/no-legacy-auth.tf:24-40

		24 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		25 |   name       = "my-node-pool"
		26 |   location   = "us-central1"
		27 |   cluster    = google_container_cluster.primary.name
		28 |   node_count = 1
		29 |
		30 |   node_config {
		31 |     preemptible  = true
		32 |     machine_type = "e2-medium"
		33 |
		34 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		35 |     service_account = google_service_account.default.email
		36 |     oauth_scopes = [
		37 |       "https://www.googleapis.com/auth/cloud-platform"
		38 |     ]
		39 |   }
		40 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/no-legacy-auth.tf:24-40

		24 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		25 |   name       = "my-node-pool"
		26 |   location   = "us-central1"
		27 |   cluster    = google_container_cluster.primary.name
		28 |   node_count = 1
		29 |
		30 |   node_config {
		31 |     preemptible  = true
		32 |     machine_type = "e2-medium"
		33 |
		34 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		35 |     service_account = google_service_account.default.email
		36 |     oauth_scopes = [
		37 |       "https://www.googleapis.com/auth/cloud-platform"
		38 |     ]
		39 |   }
		40 | }


Check: CKV_GCP_24: "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/no-legacy-authentication.tf:2-3

		2 | resource "google_container_cluster" "fail" {
		3 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/no-legacy-authentication.tf:2-3

		2 | resource "google_container_cluster" "fail" {
		3 | }


Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/no-legacy-authentication.tf:2-3

		2 | resource "google_container_cluster" "fail" {
		3 | }


Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/no-legacy-authentication.tf:2-3

		2 | resource "google_container_cluster" "fail" {
		3 | }


Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/no-legacy-authentication.tf:2-3

		2 | resource "google_container_cluster" "fail" {
		3 | }


Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/no-legacy-authentication.tf:2-3

		2 | resource "google_container_cluster" "fail" {
		3 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/no-legacy-authentication.tf:2-3

		2 | resource "google_container_cluster" "fail" {
		3 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/no-legacy-authentication.tf:2-3

		2 | resource "google_container_cluster" "fail" {
		3 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/no-legacy-authentication.tf:2-3

		2 | resource "google_container_cluster" "fail" {
		3 | }


Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/no-legacy-authentication.tf:2-3

		2 | resource "google_container_cluster" "fail" {
		3 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/no-legacy-authentication.tf:2-3

		2 | resource "google_container_cluster" "fail" {
		3 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/no-legacy-authentication.tf:2-3

		2 | resource "google_container_cluster" "fail" {
		3 | }


Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/no-legacy-authentication.tf:2-3

		2 | resource "google_container_cluster" "fail" {
		3 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/no-legacy-authentication.tf:2-3

		2 | resource "google_container_cluster" "fail" {
		3 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/no-legacy-authentication.tf:2-3

		2 | resource "google_container_cluster" "fail" {
		3 | }


Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/no-legacy-authentication.tf:2-3

		2 | resource "google_container_cluster" "fail" {
		3 | }


Check: CKV_GCP_24: "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.gke
	File: /terraform/google/gke/no-legacy-authentication.tf:5-13

		5  | resource "google_container_cluster" "gke" {
		6  |   master_auth {
		7  |     username = ""
		8  |     password = ""
		9  |     client_certificate_config {
		10 |       issue_client_certificate = true
		11 |     }
		12 |   }
		13 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.gke
	File: /terraform/google/gke/no-legacy-authentication.tf:5-13

		5  | resource "google_container_cluster" "gke" {
		6  |   master_auth {
		7  |     username = ""
		8  |     password = ""
		9  |     client_certificate_config {
		10 |       issue_client_certificate = true
		11 |     }
		12 |   }
		13 | }


Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	FAILED for resource: google_container_cluster.gke
	File: /terraform/google/gke/no-legacy-authentication.tf:5-13

		5  | resource "google_container_cluster" "gke" {
		6  |   master_auth {
		7  |     username = ""
		8  |     password = ""
		9  |     client_certificate_config {
		10 |       issue_client_certificate = true
		11 |     }
		12 |   }
		13 | }


Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	FAILED for resource: google_container_cluster.gke
	File: /terraform/google/gke/no-legacy-authentication.tf:5-13

		5  | resource "google_container_cluster" "gke" {
		6  |   master_auth {
		7  |     username = ""
		8  |     password = ""
		9  |     client_certificate_config {
		10 |       issue_client_certificate = true
		11 |     }
		12 |   }
		13 | }


Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	FAILED for resource: google_container_cluster.gke
	File: /terraform/google/gke/no-legacy-authentication.tf:5-13

		5  | resource "google_container_cluster" "gke" {
		6  |   master_auth {
		7  |     username = ""
		8  |     password = ""
		9  |     client_certificate_config {
		10 |       issue_client_certificate = true
		11 |     }
		12 |   }
		13 | }


Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	FAILED for resource: google_container_cluster.gke
	File: /terraform/google/gke/no-legacy-authentication.tf:5-13

		5  | resource "google_container_cluster" "gke" {
		6  |   master_auth {
		7  |     username = ""
		8  |     password = ""
		9  |     client_certificate_config {
		10 |       issue_client_certificate = true
		11 |     }
		12 |   }
		13 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.gke
	File: /terraform/google/gke/no-legacy-authentication.tf:5-13

		5  | resource "google_container_cluster" "gke" {
		6  |   master_auth {
		7  |     username = ""
		8  |     password = ""
		9  |     client_certificate_config {
		10 |       issue_client_certificate = true
		11 |     }
		12 |   }
		13 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.gke
	File: /terraform/google/gke/no-legacy-authentication.tf:5-13

		5  | resource "google_container_cluster" "gke" {
		6  |   master_auth {
		7  |     username = ""
		8  |     password = ""
		9  |     client_certificate_config {
		10 |       issue_client_certificate = true
		11 |     }
		12 |   }
		13 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.gke
	File: /terraform/google/gke/no-legacy-authentication.tf:5-13

		5  | resource "google_container_cluster" "gke" {
		6  |   master_auth {
		7  |     username = ""
		8  |     password = ""
		9  |     client_certificate_config {
		10 |       issue_client_certificate = true
		11 |     }
		12 |   }
		13 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.gke
	File: /terraform/google/gke/no-legacy-authentication.tf:5-13

		5  | resource "google_container_cluster" "gke" {
		6  |   master_auth {
		7  |     username = ""
		8  |     password = ""
		9  |     client_certificate_config {
		10 |       issue_client_certificate = true
		11 |     }
		12 |   }
		13 | }


Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	FAILED for resource: google_container_cluster.gke
	File: /terraform/google/gke/no-legacy-authentication.tf:5-13

		5  | resource "google_container_cluster" "gke" {
		6  |   master_auth {
		7  |     username = ""
		8  |     password = ""
		9  |     client_certificate_config {
		10 |       issue_client_certificate = true
		11 |     }
		12 |   }
		13 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.gke
	File: /terraform/google/gke/no-legacy-authentication.tf:5-13

		5  | resource "google_container_cluster" "gke" {
		6  |   master_auth {
		7  |     username = ""
		8  |     password = ""
		9  |     client_certificate_config {
		10 |       issue_client_certificate = true
		11 |     }
		12 |   }
		13 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_cluster.gke
	File: /terraform/google/gke/no-legacy-authentication.tf:5-13

		5  | resource "google_container_cluster" "gke" {
		6  |   master_auth {
		7  |     username = ""
		8  |     password = ""
		9  |     client_certificate_config {
		10 |       issue_client_certificate = true
		11 |     }
		12 |   }
		13 | }


Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.gke
	File: /terraform/google/gke/no-legacy-authentication.tf:5-13

		5  | resource "google_container_cluster" "gke" {
		6  |   master_auth {
		7  |     username = ""
		8  |     password = ""
		9  |     client_certificate_config {
		10 |       issue_client_certificate = true
		11 |     }
		12 |   }
		13 | }


Check: CKV_GCP_24: "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/no-public-control-plane.tf:8-23

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_authorized_networks_config = [{
		18 |     cidr_blocks = [{
		19 |       cidr_block   = "0.0.0.0/0"
		20 |       display_name = "external"
		21 |     }]
		22 |   }]
		23 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/no-public-control-plane.tf:8-23

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_authorized_networks_config = [{
		18 |     cidr_blocks = [{
		19 |       cidr_block   = "0.0.0.0/0"
		20 |       display_name = "external"
		21 |     }]
		22 |   }]
		23 | }


Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/no-public-control-plane.tf:8-23

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_authorized_networks_config = [{
		18 |     cidr_blocks = [{
		19 |       cidr_block   = "0.0.0.0/0"
		20 |       display_name = "external"
		21 |     }]
		22 |   }]
		23 | }


Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/no-public-control-plane.tf:8-23

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_authorized_networks_config = [{
		18 |     cidr_blocks = [{
		19 |       cidr_block   = "0.0.0.0/0"
		20 |       display_name = "external"
		21 |     }]
		22 |   }]
		23 | }


Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/no-public-control-plane.tf:8-23

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_authorized_networks_config = [{
		18 |     cidr_blocks = [{
		19 |       cidr_block   = "0.0.0.0/0"
		20 |       display_name = "external"
		21 |     }]
		22 |   }]
		23 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/no-public-control-plane.tf:8-23

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_authorized_networks_config = [{
		18 |     cidr_blocks = [{
		19 |       cidr_block   = "0.0.0.0/0"
		20 |       display_name = "external"
		21 |     }]
		22 |   }]
		23 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/no-public-control-plane.tf:8-23

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_authorized_networks_config = [{
		18 |     cidr_blocks = [{
		19 |       cidr_block   = "0.0.0.0/0"
		20 |       display_name = "external"
		21 |     }]
		22 |   }]
		23 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/no-public-control-plane.tf:8-23

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_authorized_networks_config = [{
		18 |     cidr_blocks = [{
		19 |       cidr_block   = "0.0.0.0/0"
		20 |       display_name = "external"
		21 |     }]
		22 |   }]
		23 | }


Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/no-public-control-plane.tf:8-23

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_authorized_networks_config = [{
		18 |     cidr_blocks = [{
		19 |       cidr_block   = "0.0.0.0/0"
		20 |       display_name = "external"
		21 |     }]
		22 |   }]
		23 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/no-public-control-plane.tf:8-23

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_authorized_networks_config = [{
		18 |     cidr_blocks = [{
		19 |       cidr_block   = "0.0.0.0/0"
		20 |       display_name = "external"
		21 |     }]
		22 |   }]
		23 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/no-public-control-plane.tf:8-23

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_authorized_networks_config = [{
		18 |     cidr_blocks = [{
		19 |       cidr_block   = "0.0.0.0/0"
		20 |       display_name = "external"
		21 |     }]
		22 |   }]
		23 | }


Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/no-public-control-plane.tf:8-23

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_authorized_networks_config = [{
		18 |     cidr_blocks = [{
		19 |       cidr_block   = "0.0.0.0/0"
		20 |       display_name = "external"
		21 |     }]
		22 |   }]
		23 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/no-public-control-plane.tf:8-23

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_authorized_networks_config = [{
		18 |     cidr_blocks = [{
		19 |       cidr_block   = "0.0.0.0/0"
		20 |       display_name = "external"
		21 |     }]
		22 |   }]
		23 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/no-public-control-plane.tf:8-23

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_authorized_networks_config = [{
		18 |     cidr_blocks = [{
		19 |       cidr_block   = "0.0.0.0/0"
		20 |       display_name = "external"
		21 |     }]
		22 |   }]
		23 | }


Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/no-public-control-plane.tf:8-23

		8  | resource "google_container_cluster" "primary" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 |   master_authorized_networks_config = [{
		18 |     cidr_blocks = [{
		19 |       cidr_block   = "0.0.0.0/0"
		20 |       display_name = "external"
		21 |     }]
		22 |   }]
		23 | }


Check: CKV_GCP_10: "Ensure 'Automatic node upgrade' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/no-public-control-plane.tf:25-41

		25 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		26 |   name       = "my-node-pool"
		27 |   location   = "us-central1"
		28 |   cluster    = google_container_cluster.primary.name
		29 |   node_count = 1
		30 |
		31 |   node_config {
		32 |     preemptible  = true
		33 |     machine_type = "e2-medium"
		34 |
		35 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		36 |     service_account = google_service_account.default.email
		37 |     oauth_scopes = [
		38 |       "https://www.googleapis.com/auth/cloud-platform"
		39 |     ]
		40 |   }
		41 | }


Check: CKV_GCP_22: "Ensure Container-Optimized OS (cos) is used for Kubernetes Engine Clusters Node image"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/no-public-control-plane.tf:25-41

		25 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		26 |   name       = "my-node-pool"
		27 |   location   = "us-central1"
		28 |   cluster    = google_container_cluster.primary.name
		29 |   node_count = 1
		30 |
		31 |   node_config {
		32 |     preemptible  = true
		33 |     machine_type = "e2-medium"
		34 |
		35 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		36 |     service_account = google_service_account.default.email
		37 |     oauth_scopes = [
		38 |       "https://www.googleapis.com/auth/cloud-platform"
		39 |     ]
		40 |   }
		41 | }


Check: CKV_GCP_68: "Ensure Secure Boot for Shielded GKE Nodes is Enabled"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/no-public-control-plane.tf:25-41

		25 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		26 |   name       = "my-node-pool"
		27 |   location   = "us-central1"
		28 |   cluster    = google_container_cluster.primary.name
		29 |   node_count = 1
		30 |
		31 |   node_config {
		32 |     preemptible  = true
		33 |     machine_type = "e2-medium"
		34 |
		35 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		36 |     service_account = google_service_account.default.email
		37 |     oauth_scopes = [
		38 |       "https://www.googleapis.com/auth/cloud-platform"
		39 |     ]
		40 |   }
		41 | }


Check: CKV_GCP_9: "Ensure 'Automatic node repair' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/no-public-control-plane.tf:25-41

		25 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		26 |   name       = "my-node-pool"
		27 |   location   = "us-central1"
		28 |   cluster    = google_container_cluster.primary.name
		29 |   node_count = 1
		30 |
		31 |   node_config {
		32 |     preemptible  = true
		33 |     machine_type = "e2-medium"
		34 |
		35 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		36 |     service_account = google_service_account.default.email
		37 |     oauth_scopes = [
		38 |       "https://www.googleapis.com/auth/cloud-platform"
		39 |     ]
		40 |   }
		41 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/no-public-control-plane.tf:25-41

		25 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		26 |   name       = "my-node-pool"
		27 |   location   = "us-central1"
		28 |   cluster    = google_container_cluster.primary.name
		29 |   node_count = 1
		30 |
		31 |   node_config {
		32 |     preemptible  = true
		33 |     machine_type = "e2-medium"
		34 |
		35 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		36 |     service_account = google_service_account.default.email
		37 |     oauth_scopes = [
		38 |       "https://www.googleapis.com/auth/cloud-platform"
		39 |     ]
		40 |   }
		41 | }


Check: CKV_GCP_10: "Ensure 'Automatic node upgrade' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/node-metadata-security.tf:3-9

		3 | resource "google_container_node_pool" "fail" {
		4 |   node_config {
		5 |     workload_metadata_config {
		6 |       node_metadata = "EXPOSE"
		7 |     }
		8 |   }
		9 | }


Check: CKV_GCP_22: "Ensure Container-Optimized OS (cos) is used for Kubernetes Engine Clusters Node image"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/node-metadata-security.tf:3-9

		3 | resource "google_container_node_pool" "fail" {
		4 |   node_config {
		5 |     workload_metadata_config {
		6 |       node_metadata = "EXPOSE"
		7 |     }
		8 |   }
		9 | }


Check: CKV_GCP_68: "Ensure Secure Boot for Shielded GKE Nodes is Enabled"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/node-metadata-security.tf:3-9

		3 | resource "google_container_node_pool" "fail" {
		4 |   node_config {
		5 |     workload_metadata_config {
		6 |       node_metadata = "EXPOSE"
		7 |     }
		8 |   }
		9 | }


Check: CKV_GCP_9: "Ensure 'Automatic node repair' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/node-metadata-security.tf:3-9

		3 | resource "google_container_node_pool" "fail" {
		4 |   node_config {
		5 |     workload_metadata_config {
		6 |       node_metadata = "EXPOSE"
		7 |     }
		8 |   }
		9 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/node-metadata-security.tf:3-9

		3 | resource "google_container_node_pool" "fail" {
		4 |   node_config {
		5 |     workload_metadata_config {
		6 |       node_metadata = "EXPOSE"
		7 |     }
		8 |   }
		9 | }


Check: CKV_GCP_24: "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/node-pool-uses-cos.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/node-pool-uses-cos.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/node-pool-uses-cos.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/node-pool-uses-cos.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/node-pool-uses-cos.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/node-pool-uses-cos.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/node-pool-uses-cos.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/node-pool-uses-cos.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/node-pool-uses-cos.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/node-pool-uses-cos.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/node-pool-uses-cos.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/node-pool-uses-cos.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/node-pool-uses-cos.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/node-pool-uses-cos.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/node-pool-uses-cos.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.primary
	File: /terraform/google/gke/node-pool-uses-cos.tf:7-16

		7  | resource "google_container_cluster" "primary" {
		8  |   name     = "my-gke-cluster"
		9  |   location = "us-central1"
		10 |
		11 |   # We can't create a cluster with no node pool defined, but we want to only use
		12 |   # separately managed node pools. So we create the smallest possible default
		13 |   # node pool and immediately delete it.
		14 |   remove_default_node_pool = true
		15 |   initial_node_count       = 1
		16 | }


Check: CKV_GCP_10: "Ensure 'Automatic node upgrade' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/node-pool-uses-cos.tf:18-34

		18 | resource "google_container_node_pool" "fail" {
		19 |   name       = "my-node-pool"
		20 |   cluster    = google_container_cluster.primary.id
		21 |   node_count = 1
		22 |
		23 |   node_config {
		24 |     preemptible  = true
		25 |     machine_type = "e2-medium"
		26 |
		27 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		28 |     service_account = google_service_account.default.email
		29 |     oauth_scopes = [
		30 |       "https://www.googleapis.com/auth/cloud-platform"
		31 |     ]
		32 |     image_type = "something"
		33 |   }
		34 | }


Check: CKV_GCP_22: "Ensure Container-Optimized OS (cos) is used for Kubernetes Engine Clusters Node image"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/node-pool-uses-cos.tf:18-34

		18 | resource "google_container_node_pool" "fail" {
		19 |   name       = "my-node-pool"
		20 |   cluster    = google_container_cluster.primary.id
		21 |   node_count = 1
		22 |
		23 |   node_config {
		24 |     preemptible  = true
		25 |     machine_type = "e2-medium"
		26 |
		27 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		28 |     service_account = google_service_account.default.email
		29 |     oauth_scopes = [
		30 |       "https://www.googleapis.com/auth/cloud-platform"
		31 |     ]
		32 |     image_type = "something"
		33 |   }
		34 | }


Check: CKV_GCP_68: "Ensure Secure Boot for Shielded GKE Nodes is Enabled"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/node-pool-uses-cos.tf:18-34

		18 | resource "google_container_node_pool" "fail" {
		19 |   name       = "my-node-pool"
		20 |   cluster    = google_container_cluster.primary.id
		21 |   node_count = 1
		22 |
		23 |   node_config {
		24 |     preemptible  = true
		25 |     machine_type = "e2-medium"
		26 |
		27 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		28 |     service_account = google_service_account.default.email
		29 |     oauth_scopes = [
		30 |       "https://www.googleapis.com/auth/cloud-platform"
		31 |     ]
		32 |     image_type = "something"
		33 |   }
		34 | }


Check: CKV_GCP_9: "Ensure 'Automatic node repair' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/node-pool-uses-cos.tf:18-34

		18 | resource "google_container_node_pool" "fail" {
		19 |   name       = "my-node-pool"
		20 |   cluster    = google_container_cluster.primary.id
		21 |   node_count = 1
		22 |
		23 |   node_config {
		24 |     preemptible  = true
		25 |     machine_type = "e2-medium"
		26 |
		27 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		28 |     service_account = google_service_account.default.email
		29 |     oauth_scopes = [
		30 |       "https://www.googleapis.com/auth/cloud-platform"
		31 |     ]
		32 |     image_type = "something"
		33 |   }
		34 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_node_pool.fail
	File: /terraform/google/gke/node-pool-uses-cos.tf:18-34

		18 | resource "google_container_node_pool" "fail" {
		19 |   name       = "my-node-pool"
		20 |   cluster    = google_container_cluster.primary.id
		21 |   node_count = 1
		22 |
		23 |   node_config {
		24 |     preemptible  = true
		25 |     machine_type = "e2-medium"
		26 |
		27 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		28 |     service_account = google_service_account.default.email
		29 |     oauth_scopes = [
		30 |       "https://www.googleapis.com/auth/cloud-platform"
		31 |     ]
		32 |     image_type = "something"
		33 |   }
		34 | }


Check: CKV_GCP_24: "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/node-shielding-enabled.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_shielded_nodes = "false"
		5 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/node-shielding-enabled.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_shielded_nodes = "false"
		5 | }


Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/node-shielding-enabled.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_shielded_nodes = "false"
		5 | }


Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/node-shielding-enabled.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_shielded_nodes = "false"
		5 | }


Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/node-shielding-enabled.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_shielded_nodes = "false"
		5 | }


Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/node-shielding-enabled.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_shielded_nodes = "false"
		5 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/node-shielding-enabled.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_shielded_nodes = "false"
		5 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/node-shielding-enabled.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_shielded_nodes = "false"
		5 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/node-shielding-enabled.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_shielded_nodes = "false"
		5 | }


Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/node-shielding-enabled.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_shielded_nodes = "false"
		5 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/node-shielding-enabled.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_shielded_nodes = "false"
		5 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/node-shielding-enabled.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_shielded_nodes = "false"
		5 | }


Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/node-shielding-enabled.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_shielded_nodes = "false"
		5 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/node-shielding-enabled.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_shielded_nodes = "false"
		5 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/node-shielding-enabled.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_shielded_nodes = "false"
		5 | }


Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/node-shielding-enabled.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_shielded_nodes = "false"
		5 | }


Check: CKV_GCP_24: "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-cluster-labels.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-cluster-labels.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-cluster-labels.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-cluster-labels.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-cluster-labels.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-cluster-labels.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-cluster-labels.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-cluster-labels.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-cluster-labels.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-cluster-labels.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-cluster-labels.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-cluster-labels.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-cluster-labels.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-cluster-labels.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-cluster-labels.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-cluster-labels.tf:8-17

		8  | resource "google_container_cluster" "fail" {
		9  |   name     = "my-gke-cluster"
		10 |   location = "us-central1"
		11 |
		12 |   # We can't create a cluster with no node pool defined, but we want to only use
		13 |   # separately managed node pools. So we create the smallest possible default
		14 |   # node pool and immediately delete it.
		15 |   remove_default_node_pool = true
		16 |   initial_node_count       = 1
		17 | }


Check: CKV_GCP_10: "Ensure 'Automatic node upgrade' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/use-cluster-labels.tf:19-35

		19 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		20 |   name       = "my-node-pool"
		21 |   location   = "us-central1"
		22 |   cluster    = google_container_cluster.primary.name
		23 |   node_count = 1
		24 |
		25 |   node_config {
		26 |     preemptible  = true
		27 |     machine_type = "e2-medium"
		28 |
		29 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		30 |     service_account = google_service_account.default.email
		31 |     oauth_scopes = [
		32 |       "https://www.googleapis.com/auth/cloud-platform"
		33 |     ]
		34 |   }
		35 | }


Check: CKV_GCP_22: "Ensure Container-Optimized OS (cos) is used for Kubernetes Engine Clusters Node image"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/use-cluster-labels.tf:19-35

		19 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		20 |   name       = "my-node-pool"
		21 |   location   = "us-central1"
		22 |   cluster    = google_container_cluster.primary.name
		23 |   node_count = 1
		24 |
		25 |   node_config {
		26 |     preemptible  = true
		27 |     machine_type = "e2-medium"
		28 |
		29 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		30 |     service_account = google_service_account.default.email
		31 |     oauth_scopes = [
		32 |       "https://www.googleapis.com/auth/cloud-platform"
		33 |     ]
		34 |   }
		35 | }


Check: CKV_GCP_68: "Ensure Secure Boot for Shielded GKE Nodes is Enabled"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/use-cluster-labels.tf:19-35

		19 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		20 |   name       = "my-node-pool"
		21 |   location   = "us-central1"
		22 |   cluster    = google_container_cluster.primary.name
		23 |   node_count = 1
		24 |
		25 |   node_config {
		26 |     preemptible  = true
		27 |     machine_type = "e2-medium"
		28 |
		29 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		30 |     service_account = google_service_account.default.email
		31 |     oauth_scopes = [
		32 |       "https://www.googleapis.com/auth/cloud-platform"
		33 |     ]
		34 |   }
		35 | }


Check: CKV_GCP_9: "Ensure 'Automatic node repair' is enabled for Kubernetes Clusters"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/use-cluster-labels.tf:19-35

		19 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		20 |   name       = "my-node-pool"
		21 |   location   = "us-central1"
		22 |   cluster    = google_container_cluster.primary.name
		23 |   node_count = 1
		24 |
		25 |   node_config {
		26 |     preemptible  = true
		27 |     machine_type = "e2-medium"
		28 |
		29 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		30 |     service_account = google_service_account.default.email
		31 |     oauth_scopes = [
		32 |       "https://www.googleapis.com/auth/cloud-platform"
		33 |     ]
		34 |   }
		35 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_node_pool.primary_preemptible_nodes
	File: /terraform/google/gke/use-cluster-labels.tf:19-35

		19 | resource "google_container_node_pool" "primary_preemptible_nodes" {
		20 |   name       = "my-node-pool"
		21 |   location   = "us-central1"
		22 |   cluster    = google_container_cluster.primary.name
		23 |   node_count = 1
		24 |
		25 |   node_config {
		26 |     preemptible  = true
		27 |     machine_type = "e2-medium"
		28 |
		29 |     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
		30 |     service_account = google_service_account.default.email
		31 |     oauth_scopes = [
		32 |       "https://www.googleapis.com/auth/cloud-platform"
		33 |     ]
		34 |   }
		35 | }


Check: CKV_GCP_24: "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-rbac-permissions.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_legacy_abac = "true"
		5 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-rbac-permissions.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_legacy_abac = "true"
		5 | }


Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-rbac-permissions.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_legacy_abac = "true"
		5 | }


Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-rbac-permissions.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_legacy_abac = "true"
		5 | }


Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-rbac-permissions.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_legacy_abac = "true"
		5 | }


Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-rbac-permissions.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_legacy_abac = "true"
		5 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-rbac-permissions.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_legacy_abac = "true"
		5 | }


Check: CKV_GCP_7: "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-rbac-permissions.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_legacy_abac = "true"
		5 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-rbac-permissions.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_legacy_abac = "true"
		5 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-rbac-permissions.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_legacy_abac = "true"
		5 | }


Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-rbac-permissions.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_legacy_abac = "true"
		5 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-rbac-permissions.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_legacy_abac = "true"
		5 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-rbac-permissions.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_legacy_abac = "true"
		5 | }


Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-rbac-permissions.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_legacy_abac = "true"
		5 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-rbac-permissions.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_legacy_abac = "true"
		5 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-rbac-permissions.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_legacy_abac = "true"
		5 | }


Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-rbac-permissions.tf:3-5

		3 | resource "google_container_cluster" "fail" {
		4 |   enable_legacy_abac = "true"
		5 | }


Check: CKV_GCP_24: "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-service-account.tf:3-6

		3 | resource "google_container_cluster" "fail" {
		4 |   node_config {
		5 |   }
		6 | }


Check: CKV_GCP_61: "Enable VPC Flow Logs and Intranode Visibility"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-service-account.tf:3-6

		3 | resource "google_container_cluster" "fail" {
		4 |   node_config {
		5 |   }
		6 | }


Check: CKV_GCP_70: "Ensure the GKE Release Channel is set"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-service-account.tf:3-6

		3 | resource "google_container_cluster" "fail" {
		4 |   node_config {
		5 |   }
		6 | }


Check: CKV_GCP_25: "Ensure Kubernetes Cluster is created with Private cluster enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-service-account.tf:3-6

		3 | resource "google_container_cluster" "fail" {
		4 |   node_config {
		5 |   }
		6 | }


Check: CKV_GCP_23: "Ensure Kubernetes Cluster is created with Alias IP ranges enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-service-account.tf:3-6

		3 | resource "google_container_cluster" "fail" {
		4 |   node_config {
		5 |   }
		6 | }


Check: CKV_GCP_20: "Ensure master authorized networks is set to enabled in GKE clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-service-account.tf:3-6

		3 | resource "google_container_cluster" "fail" {
		4 |   node_config {
		5 |   }
		6 | }


Check: CKV_GCP_21: "Ensure Kubernetes Clusters are configured with Labels"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-service-account.tf:3-6

		3 | resource "google_container_cluster" "fail" {
		4 |   node_config {
		5 |   }
		6 | }


Check: CKV_GCP_13: "Ensure a client certificate is used by clients to authenticate to Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-service-account.tf:3-6

		3 | resource "google_container_cluster" "fail" {
		4 |   node_config {
		5 |   }
		6 | }


Check: CKV_GCP_67: "Ensure legacy Compute Engine instance metadata APIs are Disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-service-account.tf:3-6

		3 | resource "google_container_cluster" "fail" {
		4 |   node_config {
		5 |   }
		6 | }


Check: CKV_GCP_19: "Ensure GKE basic auth is disabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-service-account.tf:3-6

		3 | resource "google_container_cluster" "fail" {
		4 |   node_config {
		5 |   }
		6 | }


Check: CKV_GCP_68: "Ensure Secure Boot for Shielded GKE Nodes is Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-service-account.tf:3-6

		3 | resource "google_container_cluster" "fail" {
		4 |   node_config {
		5 |   }
		6 | }


Check: CKV_GCP_71: "Ensure Shielded GKE Nodes are Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-service-account.tf:3-6

		3 | resource "google_container_cluster" "fail" {
		4 |   node_config {
		5 |   }
		6 | }


Check: CKV_GCP_65: "Manage Kubernetes RBAC users with Google Groups for GKE"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-service-account.tf:3-6

		3 | resource "google_container_cluster" "fail" {
		4 |   node_config {
		5 |   }
		6 | }


Check: CKV_GCP_64: "Ensure clusters are created with Private Nodes"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-service-account.tf:3-6

		3 | resource "google_container_cluster" "fail" {
		4 |   node_config {
		5 |   }
		6 | }


Check: CKV_GCP_66: "Ensure use of Binary Authorization"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-service-account.tf:3-6

		3 | resource "google_container_cluster" "fail" {
		4 |   node_config {
		5 |   }
		6 | }


Check: CKV_GCP_69: "Ensure the GKE Metadata Server is Enabled"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-service-account.tf:3-6

		3 | resource "google_container_cluster" "fail" {
		4 |   node_config {
		5 |   }
		6 | }


Check: CKV_GCP_12: "Ensure Network Policy is enabled on Kubernetes Engine Clusters"
	FAILED for resource: google_container_cluster.fail
	File: /terraform/google/gke/use-service-account.tf:3-6

		3 | resource "google_container_cluster" "fail" {
		4 |   node_config {
		5 |   }
		6 | }


Check: CKV_GCP_48: "Ensure Default Service account is not used at a folder level"
	FAILED for resource: google_folder_iam_member.folder-123
	File: /terraform/google/iam/no-folder-level-default-service-account-assignment.tf:2-6

		2 | resource "google_folder_iam_member" "folder-123" {
		3 |   folder = "folder-123"
		4 |   role   = "roles/whatever"
		5 |   member = "123-compute@developer.gserviceaccount.com"
		6 | }


Check: CKV_GCP_44: "Ensure no roles that enable to impersonate and manage all service accounts are used at a folder level"
	FAILED for resource: google_folder_iam_binding.folder-123
	File: /terraform/google/iam/no-folder-level-service-account-impersonation.tf:2-5

		2 | resource "google_folder_iam_binding" "folder-123" {
		3 |   folder = "folder-123"
		4 |   role   = "roles/iam.serviceAccountUser"
		5 | }


Check: CKV_GCP_47: "Ensure default service account is not used at an organization level"
	FAILED for resource: google_organization_iam_member.org-123
	File: /terraform/google/iam/no-org-level-default-service-account-assignment.tf:2-6

		2 | resource "google_organization_iam_member" "org-123" {
		3 |   org_id = "organization-123"
		4 |   role   = "roles/whatever"
		5 |   member = "123-compute@developer.gserviceaccount.com"
		6 | }


Check: CKV_GCP_45: "Ensure no roles that enable to impersonate and manage all service accounts are used at an organization level"
	FAILED for resource: google_organization_iam_binding.organization-123
	File: /terraform/google/iam/no-org-level-service-account-impersonation.tf:3-6

		3 | resource "google_organization_iam_binding" "organization-123" {
		4 |   org_id = "org-123"
		5 |   role   = "roles/iam.serviceAccountUser"
		6 | }


Check: CKV_GCP_49: "Ensure no roles that enable to impersonate and manage all service accounts are used at a project level"
	FAILED for resource: google_project_iam_member.project
	File: /terraform/google/iam/no-privileged-service-accounts.tf:7-11

		7  | resource "google_project_iam_member" "project" {
		8  |   project = "your-project-id"
		9  |   role    = "roles/owner"
		10 |   member  = "serviceAccount:${google_service_account.test.email}"
		11 | }


Check: CKV_GCP_46: "Ensure Default Service account is not used at a project level"
	FAILED for resource: google_project_iam_member.project-123
	File: /terraform/google/iam/no-project-level-default-service-account-assignment.tf:2-6

		2 | resource "google_project_iam_member" "project-123" {
		3 |   project = "project-123"
		4 |   role    = "roles/whatever"
		5 |   member  = "123-compute@developer.gserviceaccount.com"
		6 | }


Check: CKV_GCP_41: "Ensure that IAM users are not assigned the Service Account User or Service Account Token Creator roles at project level"
	FAILED for resource: google_project_iam_binding.project-123
	File: /terraform/google/iam/no-project-level-service-account-impersonation.tf:2-5

		2 | resource "google_project_iam_binding" "project-123" {
		3 |   project = "project-123"
		4 |   role    = "roles/iam.serviceAccountUser"
		5 | }


Check: CKV_GCP_49: "Ensure no roles that enable to impersonate and manage all service accounts are used at a project level"
	FAILED for resource: google_project_iam_binding.project-123
	File: /terraform/google/iam/no-project-level-service-account-impersonation.tf:2-5

		2 | resource "google_project_iam_binding" "project-123" {
		3 |   project = "project-123"
		4 |   role    = "roles/iam.serviceAccountUser"
		5 | }


Check: CKV_GCP_41: "Ensure that IAM users are not assigned the Service Account User or Service Account Token Creator roles at project level"
	FAILED for resource: google_project_iam_binding.fail
	File: /terraform/google/iam/no-user-granted-permissions.tf:2-6

		2 | resource "google_project_iam_binding" "fail" {
		3 |   members = [
		4 |     "user:test@example.com",
		5 |   ]
		6 | }


Check: CKV_GCP_41: "Ensure that IAM users are not assigned the Service Account User or Service Account Token Creator roles at project level"
	FAILED for resource: google_project_iam_member.fail
	File: /terraform/google/iam/no-user-granted-permissions.tf:8-10

		8  | resource "google_project_iam_member" "fail" {
		9  |   member = "user:test@example.com"
		10 | }


Check: CKV_GCP_43: "Ensure KMS encryption keys are rotated within a period of 90 days"
	FAILED for resource: google_kms_crypto_key.fails
	File: /terraform/google/kms/google_kms_crypto_key.tf:10-18

		10 | resource "google_kms_crypto_key" "fails" {
		11 |   name            = "crypto-key-example"
		12 |   key_ring        = google_kms_key_ring.keyring.id
		13 |   rotation_period = "15552000s"
		14 |
		15 |   lifecycle {
		16 |     prevent_destroy = true
		17 |   }
		18 | }


Check: CKV_GCP_47: "Ensure default service account is not used at an organization level"
	FAILED for resource: google_organization_iam_binding.organization
	File: /terraform/google/organisation/organization_iam_binding.tf:5-13

		5  | resource "google_organization_iam_binding" "organization" {
		6  |   org_id = "your-organization-id"
		7  |   role   = "roles/editor"
		8  |
		9  |   members = [
		10 |     "user:jane@example.com",
		11 |     "serviceAccount:test-compute@developer.gserviceaccount.com",
		12 |   ]
		13 | }


Check: CKV_GCP_45: "Ensure no roles that enable to impersonate and manage all service accounts are used at an organization level"
	FAILED for resource: google_organization_iam_binding.organization
	File: /terraform/google/organisation/organization_iam_binding.tf:5-13

		5  | resource "google_organization_iam_binding" "organization" {
		6  |   org_id = "your-organization-id"
		7  |   role   = "roles/editor"
		8  |
		9  |   members = [
		10 |     "user:jane@example.com",
		11 |     "serviceAccount:test-compute@developer.gserviceaccount.com",
		12 |   ]
		13 | }


Check: CKV_GCP_49: "Ensure no roles that enable to impersonate and manage all service accounts are used at a project level"
	FAILED for resource: google_project_iam_binding.project
	File: /terraform/google/project/ProjectImpersonationRoles.tf:2-10

		2  | resource "google_project_iam_binding" "project" {
		3  |   project = "your-project-id"
		4  |   role    = "roles/resourcemanager.organizationAdmin"
		5  |
		6  |   members = [
		7  |     "user",
		8  |     "serviceAccount:test-compute@developer.gserviceaccount.com",
		9  |   ]
		10 | }


Check: CKV_GCP_46: "Ensure Default Service account is not used at a project level"
	FAILED for resource: google_project_iam_binding.project
	File: /terraform/google/project/ProjectImpersonationRoles.tf:2-10

		2  | resource "google_project_iam_binding" "project" {
		3  |   project = "your-project-id"
		4  |   role    = "roles/resourcemanager.organizationAdmin"
		5  |
		6  |   members = [
		7  |     "user",
		8  |     "serviceAccount:test-compute@developer.gserviceaccount.com",
		9  |   ]
		10 | }


Check: CKV_GCP_41: "Ensure that IAM users are not assigned the Service Account User or Service Account Token Creator roles at project level"
	FAILED for resource: google_project_iam_member.project
	File: /terraform/google/project/RoleServiceAccountUser.tf:7-11

		7  | resource "google_project_iam_member" "project" {
		8  |   project = "your-project-id"
		9  |   role    = "roles/iam.serviceAccountUser"
		10 |   member  = "user:jane@example.com"
		11 | }


Check: CKV_GCP_49: "Ensure no roles that enable to impersonate and manage all service accounts are used at a project level"
	FAILED for resource: google_project_iam_member.project
	File: /terraform/google/project/RoleServiceAccountUser.tf:7-11

		7  | resource "google_project_iam_member" "project" {
		8  |   project = "your-project-id"
		9  |   role    = "roles/iam.serviceAccountUser"
		10 |   member  = "user:jane@example.com"
		11 | }


Check: CKV_GCP_27: "Ensure that the default network does not exist in a project"
	FAILED for resource: google_project.fail
	File: /terraform/google/project/project.tf:7-12

		7  | resource "google_project" "fail" {
		8  |   name                = "My Project"
		9  |   project_id          = "your-project-id"
		10 |   org_id              = "1234567"
		11 |   auto_create_network = true
		12 | }


Check: CKV_GCP_49: "Ensure no roles that enable to impersonate and manage all service accounts are used at a project level"
	FAILED for resource: google_project_iam_binding.fail-service
	File: /terraform/google/project/project_iam_binding.tf:4-12

		4  | resource "google_project_iam_binding" "fail-service" {
		5  |   project = "your-project-id"
		6  |   role    = "roles/editor"
		7  |
		8  |   members = [
		9  |     "user",
		10 |     "serviceAccount:test-compute@developer.gserviceaccount.com",
		11 |   ]
		12 | }


Check: CKV_GCP_46: "Ensure Default Service account is not used at a project level"
	FAILED for resource: google_project_iam_binding.fail-service
	File: /terraform/google/project/project_iam_binding.tf:4-12

		4  | resource "google_project_iam_binding" "fail-service" {
		5  |   project = "your-project-id"
		6  |   role    = "roles/editor"
		7  |
		8  |   members = [
		9  |     "user",
		10 |     "serviceAccount:test-compute@developer.gserviceaccount.com",
		11 |   ]
		12 | }


Check: CKV_GCP_42: "Ensure that Service Account has no Admin privileges"
	FAILED for resource: google_project_iam_member.fail
	File: /terraform/google/project/project_iam_member.tf:8-12

		8  | resource "google_project_iam_member" "fail" {
		9  |   project = "your-project-id"
		10 |   role    = "roles/owner"
		11 |   member  = "user:test@example-project.iam.gserviceaccount.com"
		12 | }


Check: CKV_GCP_49: "Ensure no roles that enable to impersonate and manage all service accounts are used at a project level"
	FAILED for resource: google_project_iam_member.fail
	File: /terraform/google/project/project_iam_member.tf:8-12

		8  | resource "google_project_iam_member" "fail" {
		9  |   project = "your-project-id"
		10 |   role    = "roles/owner"
		11 |   member  = "user:test@example-project.iam.gserviceaccount.com"
		12 | }


Check: CKV_GCP_6: "Ensure all Cloud SQL database instance requires all incoming connections to use SSL"
	FAILED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudMySqlLocalInfileOff.tf:15-34

		15 | resource "google_sql_database_instance" "fail" {
		16 |   database_version = "MYSQL_8_0"
		17 |   name             = "mysql81"
		18 |   project          = "gcp-bridgecrew-deployment"
		19 |   region           = "us-central1"
		20 |   settings {
		21 |     activation_policy = "ALWAYS"
		22 |
		23 |     database_flags =[{
		24 |       name  = "night"
		25 |       value = "on"
		26 |     },
		27 |     {
		28 |       name  = "local_infile"
		29 |       value = "on"
		30 |     }]
		31 |
		32 |     availability_type = "ZONAL"
		33 |   }
		34 | }


Check: CKV_GCP_50: "Ensure MySQL database 'local_infile' flag is set to 'off'"
	FAILED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudMySqlLocalInfileOff.tf:15-34

		15 | resource "google_sql_database_instance" "fail" {
		16 |   database_version = "MYSQL_8_0"
		17 |   name             = "mysql81"
		18 |   project          = "gcp-bridgecrew-deployment"
		19 |   region           = "us-central1"
		20 |   settings {
		21 |     activation_policy = "ALWAYS"
		22 |
		23 |     database_flags =[{
		24 |       name  = "night"
		25 |       value = "on"
		26 |     },
		27 |     {
		28 |       name  = "local_infile"
		29 |       value = "on"
		30 |     }]
		31 |
		32 |     availability_type = "ZONAL"
		33 |   }
		34 | }


Check: CKV_GCP_14: "Ensure all Cloud SQL database instance have backup configuration enabled"
	FAILED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudMySqlLocalInfileOff.tf:15-34

		15 | resource "google_sql_database_instance" "fail" {
		16 |   database_version = "MYSQL_8_0"
		17 |   name             = "mysql81"
		18 |   project          = "gcp-bridgecrew-deployment"
		19 |   region           = "us-central1"
		20 |   settings {
		21 |     activation_policy = "ALWAYS"
		22 |
		23 |     database_flags =[{
		24 |       name  = "night"
		25 |       value = "on"
		26 |     },
		27 |     {
		28 |       name  = "local_infile"
		29 |       value = "on"
		30 |     }]
		31 |
		32 |     availability_type = "ZONAL"
		33 |   }
		34 | }


Check: CKV_GCP_52: "Ensure PostgreSQL database 'log_connections' flag is set to 'on'"
	FAILED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudPostgreSql.tf:19-77

		19 | resource "google_sql_database_instance" "fail" {
		20 |   database_version = "POSTGRES_12"
		21 |   name             = "general-pos121"
		22 |   project          = "gcp-bridgecrew-deployment"
		23 |   region           = "us-central1"
		24 |
		25 |   settings {
		26 |     ip_configuration {
		27 |       require_ssl=false
		28 |       ipv4_enabled = false
		29 |       authorized_networks {
		30 |         value = "108.12.12.0/24"
		31 |         name  = "internal"
		32 |       }
		33 |
		34 |       authorized_networks {
		35 |         value = "0.0.0.0/0"
		36 |         name  = "internet"
		37 |       }
		38 |     }
		39 |     backup_configuration {
		40 |       enabled=false
		41 |     }
		42 |     activation_policy = "ALWAYS"
		43 |     availability_type = "ZONAL"
		44 |
		45 |     database_flags = [{
		46 |       name  = "log_checkpoints"
		47 |       value = "off"
		48 |       },
		49 |       {
		50 |         name  = "log_connections"
		51 |         value = "off"
		52 |       },
		53 |       {
		54 |         name  = "log_disconnections"
		55 |         value = "off"
		56 |       },
		57 |       {
		58 |         name  = "log_min_messages"
		59 |         value = "debug6"
		60 |       },
		61 |       {
		62 |         name  = "log_lock_waits"
		63 |         value = "off"
		64 |       },
		65 |       {
		66 |         name  = "log_temp_files"
		67 |         value = "10"
		68 |       },
		69 |       {
		70 |         name  = "log_min_duration_statement"
		71 |         value = "99"
		72 |     }]
		73 |     pricing_plan     = "PER_USE"
		74 |     replication_type = "SYNCHRONOUS"
		75 |     tier             = "db-custom-1-3840"
		76 |   }
		77 | }


Check: CKV_GCP_6: "Ensure all Cloud SQL database instance requires all incoming connections to use SSL"
	FAILED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudPostgreSql.tf:19-77

		19 | resource "google_sql_database_instance" "fail" {
		20 |   database_version = "POSTGRES_12"
		21 |   name             = "general-pos121"
		22 |   project          = "gcp-bridgecrew-deployment"
		23 |   region           = "us-central1"
		24 |
		25 |   settings {
		26 |     ip_configuration {
		27 |       require_ssl=false
		28 |       ipv4_enabled = false
		29 |       authorized_networks {
		30 |         value = "108.12.12.0/24"
		31 |         name  = "internal"
		32 |       }
		33 |
		34 |       authorized_networks {
		35 |         value = "0.0.0.0/0"
		36 |         name  = "internet"
		37 |       }
		38 |     }
		39 |     backup_configuration {
		40 |       enabled=false
		41 |     }
		42 |     activation_policy = "ALWAYS"
		43 |     availability_type = "ZONAL"
		44 |
		45 |     database_flags = [{
		46 |       name  = "log_checkpoints"
		47 |       value = "off"
		48 |       },
		49 |       {
		50 |         name  = "log_connections"
		51 |         value = "off"
		52 |       },
		53 |       {
		54 |         name  = "log_disconnections"
		55 |         value = "off"
		56 |       },
		57 |       {
		58 |         name  = "log_min_messages"
		59 |         value = "debug6"
		60 |       },
		61 |       {
		62 |         name  = "log_lock_waits"
		63 |         value = "off"
		64 |       },
		65 |       {
		66 |         name  = "log_temp_files"
		67 |         value = "10"
		68 |       },
		69 |       {
		70 |         name  = "log_min_duration_statement"
		71 |         value = "99"
		72 |     }]
		73 |     pricing_plan     = "PER_USE"
		74 |     replication_type = "SYNCHRONOUS"
		75 |     tier             = "db-custom-1-3840"
		76 |   }
		77 | }


Check: CKV_GCP_56: "Ensure PostgreSQL database 'log_temp_files flag is set to '0'"
	FAILED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudPostgreSql.tf:19-77

		19 | resource "google_sql_database_instance" "fail" {
		20 |   database_version = "POSTGRES_12"
		21 |   name             = "general-pos121"
		22 |   project          = "gcp-bridgecrew-deployment"
		23 |   region           = "us-central1"
		24 |
		25 |   settings {
		26 |     ip_configuration {
		27 |       require_ssl=false
		28 |       ipv4_enabled = false
		29 |       authorized_networks {
		30 |         value = "108.12.12.0/24"
		31 |         name  = "internal"
		32 |       }
		33 |
		34 |       authorized_networks {
		35 |         value = "0.0.0.0/0"
		36 |         name  = "internet"
		37 |       }
		38 |     }
		39 |     backup_configuration {
		40 |       enabled=false
		41 |     }
		42 |     activation_policy = "ALWAYS"
		43 |     availability_type = "ZONAL"
		44 |
		45 |     database_flags = [{
		46 |       name  = "log_checkpoints"
		47 |       value = "off"
		48 |       },
		49 |       {
		50 |         name  = "log_connections"
		51 |         value = "off"
		52 |       },
		53 |       {
		54 |         name  = "log_disconnections"
		55 |         value = "off"
		56 |       },
		57 |       {
		58 |         name  = "log_min_messages"
		59 |         value = "debug6"
		60 |       },
		61 |       {
		62 |         name  = "log_lock_waits"
		63 |         value = "off"
		64 |       },
		65 |       {
		66 |         name  = "log_temp_files"
		67 |         value = "10"
		68 |       },
		69 |       {
		70 |         name  = "log_min_duration_statement"
		71 |         value = "99"
		72 |     }]
		73 |     pricing_plan     = "PER_USE"
		74 |     replication_type = "SYNCHRONOUS"
		75 |     tier             = "db-custom-1-3840"
		76 |   }
		77 | }


Check: CKV_GCP_51: "Ensure PostgreSQL database 'log_checkpoints' flag is set to 'on'"
	FAILED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudPostgreSql.tf:19-77

		19 | resource "google_sql_database_instance" "fail" {
		20 |   database_version = "POSTGRES_12"
		21 |   name             = "general-pos121"
		22 |   project          = "gcp-bridgecrew-deployment"
		23 |   region           = "us-central1"
		24 |
		25 |   settings {
		26 |     ip_configuration {
		27 |       require_ssl=false
		28 |       ipv4_enabled = false
		29 |       authorized_networks {
		30 |         value = "108.12.12.0/24"
		31 |         name  = "internal"
		32 |       }
		33 |
		34 |       authorized_networks {
		35 |         value = "0.0.0.0/0"
		36 |         name  = "internet"
		37 |       }
		38 |     }
		39 |     backup_configuration {
		40 |       enabled=false
		41 |     }
		42 |     activation_policy = "ALWAYS"
		43 |     availability_type = "ZONAL"
		44 |
		45 |     database_flags = [{
		46 |       name  = "log_checkpoints"
		47 |       value = "off"
		48 |       },
		49 |       {
		50 |         name  = "log_connections"
		51 |         value = "off"
		52 |       },
		53 |       {
		54 |         name  = "log_disconnections"
		55 |         value = "off"
		56 |       },
		57 |       {
		58 |         name  = "log_min_messages"
		59 |         value = "debug6"
		60 |       },
		61 |       {
		62 |         name  = "log_lock_waits"
		63 |         value = "off"
		64 |       },
		65 |       {
		66 |         name  = "log_temp_files"
		67 |         value = "10"
		68 |       },
		69 |       {
		70 |         name  = "log_min_duration_statement"
		71 |         value = "99"
		72 |     }]
		73 |     pricing_plan     = "PER_USE"
		74 |     replication_type = "SYNCHRONOUS"
		75 |     tier             = "db-custom-1-3840"
		76 |   }
		77 | }


Check: CKV_GCP_53: "Ensure PostgreSQL database 'log_disconnections' flag is set to 'on'"
	FAILED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudPostgreSql.tf:19-77

		19 | resource "google_sql_database_instance" "fail" {
		20 |   database_version = "POSTGRES_12"
		21 |   name             = "general-pos121"
		22 |   project          = "gcp-bridgecrew-deployment"
		23 |   region           = "us-central1"
		24 |
		25 |   settings {
		26 |     ip_configuration {
		27 |       require_ssl=false
		28 |       ipv4_enabled = false
		29 |       authorized_networks {
		30 |         value = "108.12.12.0/24"
		31 |         name  = "internal"
		32 |       }
		33 |
		34 |       authorized_networks {
		35 |         value = "0.0.0.0/0"
		36 |         name  = "internet"
		37 |       }
		38 |     }
		39 |     backup_configuration {
		40 |       enabled=false
		41 |     }
		42 |     activation_policy = "ALWAYS"
		43 |     availability_type = "ZONAL"
		44 |
		45 |     database_flags = [{
		46 |       name  = "log_checkpoints"
		47 |       value = "off"
		48 |       },
		49 |       {
		50 |         name  = "log_connections"
		51 |         value = "off"
		52 |       },
		53 |       {
		54 |         name  = "log_disconnections"
		55 |         value = "off"
		56 |       },
		57 |       {
		58 |         name  = "log_min_messages"
		59 |         value = "debug6"
		60 |       },
		61 |       {
		62 |         name  = "log_lock_waits"
		63 |         value = "off"
		64 |       },
		65 |       {
		66 |         name  = "log_temp_files"
		67 |         value = "10"
		68 |       },
		69 |       {
		70 |         name  = "log_min_duration_statement"
		71 |         value = "99"
		72 |     }]
		73 |     pricing_plan     = "PER_USE"
		74 |     replication_type = "SYNCHRONOUS"
		75 |     tier             = "db-custom-1-3840"
		76 |   }
		77 | }


Check: CKV_GCP_55: "Ensure PostgreSQL database 'log_min_messages' flag is set to a valid value"
	FAILED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudPostgreSql.tf:19-77

		19 | resource "google_sql_database_instance" "fail" {
		20 |   database_version = "POSTGRES_12"
		21 |   name             = "general-pos121"
		22 |   project          = "gcp-bridgecrew-deployment"
		23 |   region           = "us-central1"
		24 |
		25 |   settings {
		26 |     ip_configuration {
		27 |       require_ssl=false
		28 |       ipv4_enabled = false
		29 |       authorized_networks {
		30 |         value = "108.12.12.0/24"
		31 |         name  = "internal"
		32 |       }
		33 |
		34 |       authorized_networks {
		35 |         value = "0.0.0.0/0"
		36 |         name  = "internet"
		37 |       }
		38 |     }
		39 |     backup_configuration {
		40 |       enabled=false
		41 |     }
		42 |     activation_policy = "ALWAYS"
		43 |     availability_type = "ZONAL"
		44 |
		45 |     database_flags = [{
		46 |       name  = "log_checkpoints"
		47 |       value = "off"
		48 |       },
		49 |       {
		50 |         name  = "log_connections"
		51 |         value = "off"
		52 |       },
		53 |       {
		54 |         name  = "log_disconnections"
		55 |         value = "off"
		56 |       },
		57 |       {
		58 |         name  = "log_min_messages"
		59 |         value = "debug6"
		60 |       },
		61 |       {
		62 |         name  = "log_lock_waits"
		63 |         value = "off"
		64 |       },
		65 |       {
		66 |         name  = "log_temp_files"
		67 |         value = "10"
		68 |       },
		69 |       {
		70 |         name  = "log_min_duration_statement"
		71 |         value = "99"
		72 |     }]
		73 |     pricing_plan     = "PER_USE"
		74 |     replication_type = "SYNCHRONOUS"
		75 |     tier             = "db-custom-1-3840"
		76 |   }
		77 | }


Check: CKV_GCP_57: "Ensure PostgreSQL database 'log_min_duration_statement' flag is set to '-1'"
	FAILED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudPostgreSql.tf:19-77

		19 | resource "google_sql_database_instance" "fail" {
		20 |   database_version = "POSTGRES_12"
		21 |   name             = "general-pos121"
		22 |   project          = "gcp-bridgecrew-deployment"
		23 |   region           = "us-central1"
		24 |
		25 |   settings {
		26 |     ip_configuration {
		27 |       require_ssl=false
		28 |       ipv4_enabled = false
		29 |       authorized_networks {
		30 |         value = "108.12.12.0/24"
		31 |         name  = "internal"
		32 |       }
		33 |
		34 |       authorized_networks {
		35 |         value = "0.0.0.0/0"
		36 |         name  = "internet"
		37 |       }
		38 |     }
		39 |     backup_configuration {
		40 |       enabled=false
		41 |     }
		42 |     activation_policy = "ALWAYS"
		43 |     availability_type = "ZONAL"
		44 |
		45 |     database_flags = [{
		46 |       name  = "log_checkpoints"
		47 |       value = "off"
		48 |       },
		49 |       {
		50 |         name  = "log_connections"
		51 |         value = "off"
		52 |       },
		53 |       {
		54 |         name  = "log_disconnections"
		55 |         value = "off"
		56 |       },
		57 |       {
		58 |         name  = "log_min_messages"
		59 |         value = "debug6"
		60 |       },
		61 |       {
		62 |         name  = "log_lock_waits"
		63 |         value = "off"
		64 |       },
		65 |       {
		66 |         name  = "log_temp_files"
		67 |         value = "10"
		68 |       },
		69 |       {
		70 |         name  = "log_min_duration_statement"
		71 |         value = "99"
		72 |     }]
		73 |     pricing_plan     = "PER_USE"
		74 |     replication_type = "SYNCHRONOUS"
		75 |     tier             = "db-custom-1-3840"
		76 |   }
		77 | }


Check: CKV_GCP_54: "Ensure PostgreSQL database 'log_lock_waits' flag is set to 'on'"
	FAILED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudPostgreSql.tf:19-77

		19 | resource "google_sql_database_instance" "fail" {
		20 |   database_version = "POSTGRES_12"
		21 |   name             = "general-pos121"
		22 |   project          = "gcp-bridgecrew-deployment"
		23 |   region           = "us-central1"
		24 |
		25 |   settings {
		26 |     ip_configuration {
		27 |       require_ssl=false
		28 |       ipv4_enabled = false
		29 |       authorized_networks {
		30 |         value = "108.12.12.0/24"
		31 |         name  = "internal"
		32 |       }
		33 |
		34 |       authorized_networks {
		35 |         value = "0.0.0.0/0"
		36 |         name  = "internet"
		37 |       }
		38 |     }
		39 |     backup_configuration {
		40 |       enabled=false
		41 |     }
		42 |     activation_policy = "ALWAYS"
		43 |     availability_type = "ZONAL"
		44 |
		45 |     database_flags = [{
		46 |       name  = "log_checkpoints"
		47 |       value = "off"
		48 |       },
		49 |       {
		50 |         name  = "log_connections"
		51 |         value = "off"
		52 |       },
		53 |       {
		54 |         name  = "log_disconnections"
		55 |         value = "off"
		56 |       },
		57 |       {
		58 |         name  = "log_min_messages"
		59 |         value = "debug6"
		60 |       },
		61 |       {
		62 |         name  = "log_lock_waits"
		63 |         value = "off"
		64 |       },
		65 |       {
		66 |         name  = "log_temp_files"
		67 |         value = "10"
		68 |       },
		69 |       {
		70 |         name  = "log_min_duration_statement"
		71 |         value = "99"
		72 |     }]
		73 |     pricing_plan     = "PER_USE"
		74 |     replication_type = "SYNCHRONOUS"
		75 |     tier             = "db-custom-1-3840"
		76 |   }
		77 | }


Check: CKV_GCP_14: "Ensure all Cloud SQL database instance have backup configuration enabled"
	FAILED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudPostgreSql.tf:19-77

		19 | resource "google_sql_database_instance" "fail" {
		20 |   database_version = "POSTGRES_12"
		21 |   name             = "general-pos121"
		22 |   project          = "gcp-bridgecrew-deployment"
		23 |   region           = "us-central1"
		24 |
		25 |   settings {
		26 |     ip_configuration {
		27 |       require_ssl=false
		28 |       ipv4_enabled = false
		29 |       authorized_networks {
		30 |         value = "108.12.12.0/24"
		31 |         name  = "internal"
		32 |       }
		33 |
		34 |       authorized_networks {
		35 |         value = "0.0.0.0/0"
		36 |         name  = "internet"
		37 |       }
		38 |     }
		39 |     backup_configuration {
		40 |       enabled=false
		41 |     }
		42 |     activation_policy = "ALWAYS"
		43 |     availability_type = "ZONAL"
		44 |
		45 |     database_flags = [{
		46 |       name  = "log_checkpoints"
		47 |       value = "off"
		48 |       },
		49 |       {
		50 |         name  = "log_connections"
		51 |         value = "off"
		52 |       },
		53 |       {
		54 |         name  = "log_disconnections"
		55 |         value = "off"
		56 |       },
		57 |       {
		58 |         name  = "log_min_messages"
		59 |         value = "debug6"
		60 |       },
		61 |       {
		62 |         name  = "log_lock_waits"
		63 |         value = "off"
		64 |       },
		65 |       {
		66 |         name  = "log_temp_files"
		67 |         value = "10"
		68 |       },
		69 |       {
		70 |         name  = "log_min_duration_statement"
		71 |         value = "99"
		72 |     }]
		73 |     pricing_plan     = "PER_USE"
		74 |     replication_type = "SYNCHRONOUS"
		75 |     tier             = "db-custom-1-3840"
		76 |   }
		77 | }


Check: CKV_GCP_6: "Ensure all Cloud SQL database instance requires all incoming connections to use SSL"
	FAILED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerContainedDBAuthentication.tf:2-53

		2  | resource "google_sql_database_instance" "fail" {
		3  |   database_version = "SQLSERVER_2017_STANDARD"
		4  |   name             = "general-sqlserver12"
		5  |   project          = "gcp-bridgecrew-deployment"
		6  |   region           = "us-central1"
		7  |
		8  |   settings {
		9  |     activation_policy = "ALWAYS"
		10 |     availability_type = "ZONAL"
		11 |
		12 |     backup_configuration {
		13 |       binary_log_enabled             = "false"
		14 |       enabled                        = "true"
		15 |       location                       = "us"
		16 |       point_in_time_recovery_enabled = "false"
		17 |       start_time                     = "00:00"
		18 |     }
		19 |
		20 |     crash_safe_replication = "false"
		21 |
		22 |     database_flags = [{
		23 |       name  = "cross db ownership chaining"
		24 |       value = "on"
		25 |       }, {
		26 |       name  = "contained database authentication"
		27 |       value = "on"
		28 |     }]
		29 |
		30 |     disk_autoresize = "true"
		31 |     disk_size       = "20"
		32 |     disk_type       = "PD_SSD"
		33 |
		34 |     ip_configuration {
		35 |       ipv4_enabled    = "false"
		36 |       private_network = "projects/gcp-bridgecrew-deployment/global/networks/default"
		37 |       require_ssl     = "false"
		38 |     }
		39 |
		40 |     location_preference {
		41 |       zone = "us-central1-a"
		42 |     }
		43 |
		44 |     maintenance_window {
		45 |       day  = "0"
		46 |       hour = "0"
		47 |     }
		48 |
		49 |     pricing_plan     = "PER_USE"
		50 |     replication_type = "SYNCHRONOUS"
		51 |     tier             = "db-custom-1-4096"
		52 |   }
		53 | }


Check: CKV_GCP_58: "Ensure SQL database 'cross db ownership chaining' flag is set to 'off'"
	FAILED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerContainedDBAuthentication.tf:2-53

		2  | resource "google_sql_database_instance" "fail" {
		3  |   database_version = "SQLSERVER_2017_STANDARD"
		4  |   name             = "general-sqlserver12"
		5  |   project          = "gcp-bridgecrew-deployment"
		6  |   region           = "us-central1"
		7  |
		8  |   settings {
		9  |     activation_policy = "ALWAYS"
		10 |     availability_type = "ZONAL"
		11 |
		12 |     backup_configuration {
		13 |       binary_log_enabled             = "false"
		14 |       enabled                        = "true"
		15 |       location                       = "us"
		16 |       point_in_time_recovery_enabled = "false"
		17 |       start_time                     = "00:00"
		18 |     }
		19 |
		20 |     crash_safe_replication = "false"
		21 |
		22 |     database_flags = [{
		23 |       name  = "cross db ownership chaining"
		24 |       value = "on"
		25 |       }, {
		26 |       name  = "contained database authentication"
		27 |       value = "on"
		28 |     }]
		29 |
		30 |     disk_autoresize = "true"
		31 |     disk_size       = "20"
		32 |     disk_type       = "PD_SSD"
		33 |
		34 |     ip_configuration {
		35 |       ipv4_enabled    = "false"
		36 |       private_network = "projects/gcp-bridgecrew-deployment/global/networks/default"
		37 |       require_ssl     = "false"
		38 |     }
		39 |
		40 |     location_preference {
		41 |       zone = "us-central1-a"
		42 |     }
		43 |
		44 |     maintenance_window {
		45 |       day  = "0"
		46 |       hour = "0"
		47 |     }
		48 |
		49 |     pricing_plan     = "PER_USE"
		50 |     replication_type = "SYNCHRONOUS"
		51 |     tier             = "db-custom-1-4096"
		52 |   }
		53 | }


Check: CKV_GCP_60: "Ensure SQL database do not have public IP"
	FAILED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerContainedDBAuthentication.tf:2-53

		2  | resource "google_sql_database_instance" "fail" {
		3  |   database_version = "SQLSERVER_2017_STANDARD"
		4  |   name             = "general-sqlserver12"
		5  |   project          = "gcp-bridgecrew-deployment"
		6  |   region           = "us-central1"
		7  |
		8  |   settings {
		9  |     activation_policy = "ALWAYS"
		10 |     availability_type = "ZONAL"
		11 |
		12 |     backup_configuration {
		13 |       binary_log_enabled             = "false"
		14 |       enabled                        = "true"
		15 |       location                       = "us"
		16 |       point_in_time_recovery_enabled = "false"
		17 |       start_time                     = "00:00"
		18 |     }
		19 |
		20 |     crash_safe_replication = "false"
		21 |
		22 |     database_flags = [{
		23 |       name  = "cross db ownership chaining"
		24 |       value = "on"
		25 |       }, {
		26 |       name  = "contained database authentication"
		27 |       value = "on"
		28 |     }]
		29 |
		30 |     disk_autoresize = "true"
		31 |     disk_size       = "20"
		32 |     disk_type       = "PD_SSD"
		33 |
		34 |     ip_configuration {
		35 |       ipv4_enabled    = "false"
		36 |       private_network = "projects/gcp-bridgecrew-deployment/global/networks/default"
		37 |       require_ssl     = "false"
		38 |     }
		39 |
		40 |     location_preference {
		41 |       zone = "us-central1-a"
		42 |     }
		43 |
		44 |     maintenance_window {
		45 |       day  = "0"
		46 |       hour = "0"
		47 |     }
		48 |
		49 |     pricing_plan     = "PER_USE"
		50 |     replication_type = "SYNCHRONOUS"
		51 |     tier             = "db-custom-1-4096"
		52 |   }
		53 | }


Check: CKV_GCP_59: "Ensure SQL database 'contained database authentication' flag is set to 'off'"
	FAILED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerContainedDBAuthentication.tf:2-53

		2  | resource "google_sql_database_instance" "fail" {
		3  |   database_version = "SQLSERVER_2017_STANDARD"
		4  |   name             = "general-sqlserver12"
		5  |   project          = "gcp-bridgecrew-deployment"
		6  |   region           = "us-central1"
		7  |
		8  |   settings {
		9  |     activation_policy = "ALWAYS"
		10 |     availability_type = "ZONAL"
		11 |
		12 |     backup_configuration {
		13 |       binary_log_enabled             = "false"
		14 |       enabled                        = "true"
		15 |       location                       = "us"
		16 |       point_in_time_recovery_enabled = "false"
		17 |       start_time                     = "00:00"
		18 |     }
		19 |
		20 |     crash_safe_replication = "false"
		21 |
		22 |     database_flags = [{
		23 |       name  = "cross db ownership chaining"
		24 |       value = "on"
		25 |       }, {
		26 |       name  = "contained database authentication"
		27 |       value = "on"
		28 |     }]
		29 |
		30 |     disk_autoresize = "true"
		31 |     disk_size       = "20"
		32 |     disk_type       = "PD_SSD"
		33 |
		34 |     ip_configuration {
		35 |       ipv4_enabled    = "false"
		36 |       private_network = "projects/gcp-bridgecrew-deployment/global/networks/default"
		37 |       require_ssl     = "false"
		38 |     }
		39 |
		40 |     location_preference {
		41 |       zone = "us-central1-a"
		42 |     }
		43 |
		44 |     maintenance_window {
		45 |       day  = "0"
		46 |       hour = "0"
		47 |     }
		48 |
		49 |     pricing_plan     = "PER_USE"
		50 |     replication_type = "SYNCHRONOUS"
		51 |     tier             = "db-custom-1-4096"
		52 |   }
		53 | }


Check: CKV_GCP_6: "Ensure all Cloud SQL database instance requires all incoming connections to use SSL"
	FAILED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerCrossDBOwnershipChaining.tf:2-53

		2  | resource "google_sql_database_instance" "fail" {
		3  |   database_version = "SQLSERVER_2017_STANDARD"
		4  |   name             = "general-sqlserver12"
		5  |   project          = "gcp-bridgecrew-deployment"
		6  |   region           = "us-central1"
		7  |
		8  |   settings {
		9  |     activation_policy = "ALWAYS"
		10 |     availability_type = "ZONAL"
		11 |
		12 |     backup_configuration {
		13 |       binary_log_enabled             = "false"
		14 |       enabled                        = "true"
		15 |       location                       = "us"
		16 |       point_in_time_recovery_enabled = "false"
		17 |       start_time                     = "00:00"
		18 |     }
		19 |
		20 |     crash_safe_replication = "false"
		21 |
		22 |     database_flags = [{
		23 |       name  = "cross db ownership chaining"
		24 |       value = "on"
		25 |       }, {
		26 |       name  = "contained database authentication"
		27 |       value = "off"
		28 |     }]
		29 |
		30 |     disk_autoresize = "true"
		31 |     disk_size       = "20"
		32 |     disk_type       = "PD_SSD"
		33 |
		34 |     ip_configuration {
		35 |       ipv4_enabled    = "false"
		36 |       private_network = "projects/gcp-bridgecrew-deployment/global/networks/default"
		37 |       require_ssl     = "false"
		38 |     }
		39 |
		40 |     location_preference {
		41 |       zone = "us-central1-a"
		42 |     }
		43 |
		44 |     maintenance_window {
		45 |       day  = "0"
		46 |       hour = "0"
		47 |     }
		48 |
		49 |     pricing_plan     = "PER_USE"
		50 |     replication_type = "SYNCHRONOUS"
		51 |     tier             = "db-custom-1-4096"
		52 |   }
		53 | }


Check: CKV_GCP_58: "Ensure SQL database 'cross db ownership chaining' flag is set to 'off'"
	FAILED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerCrossDBOwnershipChaining.tf:2-53

		2  | resource "google_sql_database_instance" "fail" {
		3  |   database_version = "SQLSERVER_2017_STANDARD"
		4  |   name             = "general-sqlserver12"
		5  |   project          = "gcp-bridgecrew-deployment"
		6  |   region           = "us-central1"
		7  |
		8  |   settings {
		9  |     activation_policy = "ALWAYS"
		10 |     availability_type = "ZONAL"
		11 |
		12 |     backup_configuration {
		13 |       binary_log_enabled             = "false"
		14 |       enabled                        = "true"
		15 |       location                       = "us"
		16 |       point_in_time_recovery_enabled = "false"
		17 |       start_time                     = "00:00"
		18 |     }
		19 |
		20 |     crash_safe_replication = "false"
		21 |
		22 |     database_flags = [{
		23 |       name  = "cross db ownership chaining"
		24 |       value = "on"
		25 |       }, {
		26 |       name  = "contained database authentication"
		27 |       value = "off"
		28 |     }]
		29 |
		30 |     disk_autoresize = "true"
		31 |     disk_size       = "20"
		32 |     disk_type       = "PD_SSD"
		33 |
		34 |     ip_configuration {
		35 |       ipv4_enabled    = "false"
		36 |       private_network = "projects/gcp-bridgecrew-deployment/global/networks/default"
		37 |       require_ssl     = "false"
		38 |     }
		39 |
		40 |     location_preference {
		41 |       zone = "us-central1-a"
		42 |     }
		43 |
		44 |     maintenance_window {
		45 |       day  = "0"
		46 |       hour = "0"
		47 |     }
		48 |
		49 |     pricing_plan     = "PER_USE"
		50 |     replication_type = "SYNCHRONOUS"
		51 |     tier             = "db-custom-1-4096"
		52 |   }
		53 | }


Check: CKV_GCP_60: "Ensure SQL database do not have public IP"
	FAILED for resource: google_sql_database_instance.fail
	File: /terraform/google/sql/CloudSqlServerCrossDBOwnershipChaining.tf:2-53

		2  | resource "google_sql_database_instance" "fail" {
		3  |   database_version = "SQLSERVER_2017_STANDARD"
		4  |   name             = "general-sqlserver12"
		5  |   project          = "gcp-bridgecrew-deployment"
		6  |   region           = "us-central1"
		7  |
		8  |   settings {
		9  |     activation_policy = "ALWAYS"
		10 |     availability_type = "ZONAL"
		11 |
		12 |     backup_configuration {
		13 |       binary_log_enabled             = "false"
		14 |       enabled                        = "true"
		15 |       location                       = "us"
		16 |       point_in_time_recovery_enabled = "false"
		17 |       start_time                     = "00:00"
		18 |     }
		19 |
		20 |     crash_safe_replication = "false"
		21 |
		22 |     database_flags = [{
		23 |       name  = "cross db ownership chaining"
		24 |       value = "on"
		25 |       }, {
		26 |       name  = "contained database authentication"
		27 |       value = "off"
		28 |     }]
		29 |
		30 |     disk_autoresize = "true"
		31 |     disk_size       = "20"
		32 |     disk_type       = "PD_SSD"
		33 |
		34 |     ip_configuration {
		35 |       ipv4_enabled    = "false"
		36 |       private_network = "projects/gcp-bridgecrew-deployment/global/networks/default"
		37 |       require_ssl     = "false"
		38 |     }
		39 |
		40 |     location_preference {
		41 |       zone = "us-central1-a"
		42 |     }
		43 |
		44 |     maintenance_window {
		45 |       day  = "0"
		46 |       hour = "0"
		47 |     }
		48 |
		49 |     pricing_plan     = "PER_USE"
		50 |     replication_type = "SYNCHRONOUS"
		51 |     tier             = "db-custom-1-4096"
		52 |   }
		53 | }


Check: CKV_GCP_6: "Ensure all Cloud SQL database instance requires all incoming connections to use SSL"
	FAILED for resource: google_sql_database_instance.tfer--general-002D-sqlserver12
	File: /terraform/google/sql/CloudSqlServerNoPublicIP.tf:2-55

		2  | resource "google_sql_database_instance" "tfer--general-002D-sqlserver12" {
		3  |   database_version = "SQLSERVER_2017_STANDARD"
		4  |   name             = "general-sqlserver12"
		5  |   project          = "gcp-bridgecrew-deployment"
		6  |   region           = "us-central1"
		7  |
		8  |   settings {
		9  |     activation_policy = "ALWAYS"
		10 |     availability_type = "ZONAL"
		11 |
		12 |     backup_configuration {
		13 |       binary_log_enabled             = "false"
		14 |       enabled                        = "true"
		15 |       location                       = "us"
		16 |       point_in_time_recovery_enabled = "false"
		17 |       start_time                     = "00:00"
		18 |     }
		19 |
		20 |     crash_safe_replication = "false"
		21 |
		22 |     database_flags {
		23 |       name  = "cross db ownership chaining"
		24 |       value = "on"
		25 |     }
		26 |
		27 |     database_flags {
		28 |       name  = "contained database authentication"
		29 |       value = "on"
		30 |     }
		31 |
		32 |     disk_autoresize = "true"
		33 |     disk_size       = "20"
		34 |     disk_type       = "PD_SSD"
		35 |
		36 |     ip_configuration {
		37 |       ipv4_enabled    = ""
		38 |       private_network = "projects/gcp-bridgecrew-deployment/global/networks/default"
		39 |       require_ssl     = "false"
		40 |     }
		41 |
		42 |     location_preference {
		43 |       zone = "us-central1-a"
		44 |     }
		45 |
		46 |     maintenance_window {
		47 |       day  = "0"
		48 |       hour = "0"
		49 |     }
		50 |
		51 |     pricing_plan     = "PER_USE"
		52 |     replication_type = "SYNCHRONOUS"
		53 |     tier             = "db-custom-1-4096"
		54 |   }
		55 | }


Check: CKV_GCP_58: "Ensure SQL database 'cross db ownership chaining' flag is set to 'off'"
	FAILED for resource: google_sql_database_instance.tfer--general-002D-sqlserver12
	File: /terraform/google/sql/CloudSqlServerNoPublicIP.tf:2-55

		2  | resource "google_sql_database_instance" "tfer--general-002D-sqlserver12" {
		3  |   database_version = "SQLSERVER_2017_STANDARD"
		4  |   name             = "general-sqlserver12"
		5  |   project          = "gcp-bridgecrew-deployment"
		6  |   region           = "us-central1"
		7  |
		8  |   settings {
		9  |     activation_policy = "ALWAYS"
		10 |     availability_type = "ZONAL"
		11 |
		12 |     backup_configuration {
		13 |       binary_log_enabled             = "false"
		14 |       enabled                        = "true"
		15 |       location                       = "us"
		16 |       point_in_time_recovery_enabled = "false"
		17 |       start_time                     = "00:00"
		18 |     }
		19 |
		20 |     crash_safe_replication = "false"
		21 |
		22 |     database_flags {
		23 |       name  = "cross db ownership chaining"
		24 |       value = "on"
		25 |     }
		26 |
		27 |     database_flags {
		28 |       name  = "contained database authentication"
		29 |       value = "on"
		30 |     }
		31 |
		32 |     disk_autoresize = "true"
		33 |     disk_size       = "20"
		34 |     disk_type       = "PD_SSD"
		35 |
		36 |     ip_configuration {
		37 |       ipv4_enabled    = ""
		38 |       private_network = "projects/gcp-bridgecrew-deployment/global/networks/default"
		39 |       require_ssl     = "false"
		40 |     }
		41 |
		42 |     location_preference {
		43 |       zone = "us-central1-a"
		44 |     }
		45 |
		46 |     maintenance_window {
		47 |       day  = "0"
		48 |       hour = "0"
		49 |     }
		50 |
		51 |     pricing_plan     = "PER_USE"
		52 |     replication_type = "SYNCHRONOUS"
		53 |     tier             = "db-custom-1-4096"
		54 |   }
		55 | }


Check: CKV_GCP_60: "Ensure SQL database do not have public IP"
	FAILED for resource: google_sql_database_instance.tfer--general-002D-sqlserver12
	File: /terraform/google/sql/CloudSqlServerNoPublicIP.tf:2-55

		2  | resource "google_sql_database_instance" "tfer--general-002D-sqlserver12" {
		3  |   database_version = "SQLSERVER_2017_STANDARD"
		4  |   name             = "general-sqlserver12"
		5  |   project          = "gcp-bridgecrew-deployment"
		6  |   region           = "us-central1"
		7  |
		8  |   settings {
		9  |     activation_policy = "ALWAYS"
		10 |     availability_type = "ZONAL"
		11 |
		12 |     backup_configuration {
		13 |       binary_log_enabled             = "false"
		14 |       enabled                        = "true"
		15 |       location                       = "us"
		16 |       point_in_time_recovery_enabled = "false"
		17 |       start_time                     = "00:00"
		18 |     }
		19 |
		20 |     crash_safe_replication = "false"
		21 |
		22 |     database_flags {
		23 |       name  = "cross db ownership chaining"
		24 |       value = "on"
		25 |     }
		26 |
		27 |     database_flags {
		28 |       name  = "contained database authentication"
		29 |       value = "on"
		30 |     }
		31 |
		32 |     disk_autoresize = "true"
		33 |     disk_size       = "20"
		34 |     disk_type       = "PD_SSD"
		35 |
		36 |     ip_configuration {
		37 |       ipv4_enabled    = ""
		38 |       private_network = "projects/gcp-bridgecrew-deployment/global/networks/default"
		39 |       require_ssl     = "false"
		40 |     }
		41 |
		42 |     location_preference {
		43 |       zone = "us-central1-a"
		44 |     }
		45 |
		46 |     maintenance_window {
		47 |       day  = "0"
		48 |       hour = "0"
		49 |     }
		50 |
		51 |     pricing_plan     = "PER_USE"
		52 |     replication_type = "SYNCHRONOUS"
		53 |     tier             = "db-custom-1-4096"
		54 |   }
		55 | }


Check: CKV_GCP_59: "Ensure SQL database 'contained database authentication' flag is set to 'off'"
	FAILED for resource: google_sql_database_instance.tfer--general-002D-sqlserver12
	File: /terraform/google/sql/CloudSqlServerNoPublicIP.tf:2-55

		2  | resource "google_sql_database_instance" "tfer--general-002D-sqlserver12" {
		3  |   database_version = "SQLSERVER_2017_STANDARD"
		4  |   name             = "general-sqlserver12"
		5  |   project          = "gcp-bridgecrew-deployment"
		6  |   region           = "us-central1"
		7  |
		8  |   settings {
		9  |     activation_policy = "ALWAYS"
		10 |     availability_type = "ZONAL"
		11 |
		12 |     backup_configuration {
		13 |       binary_log_enabled             = "false"
		14 |       enabled                        = "true"
		15 |       location                       = "us"
		16 |       point_in_time_recovery_enabled = "false"
		17 |       start_time                     = "00:00"
		18 |     }
		19 |
		20 |     crash_safe_replication = "false"
		21 |
		22 |     database_flags {
		23 |       name  = "cross db ownership chaining"
		24 |       value = "on"
		25 |     }
		26 |
		27 |     database_flags {
		28 |       name  = "contained database authentication"
		29 |       value = "on"
		30 |     }
		31 |
		32 |     disk_autoresize = "true"
		33 |     disk_size       = "20"
		34 |     disk_type       = "PD_SSD"
		35 |
		36 |     ip_configuration {
		37 |       ipv4_enabled    = ""
		38 |       private_network = "projects/gcp-bridgecrew-deployment/global/networks/default"
		39 |       require_ssl     = "false"
		40 |     }
		41 |
		42 |     location_preference {
		43 |       zone = "us-central1-a"
		44 |     }
		45 |
		46 |     maintenance_window {
		47 |       day  = "0"
		48 |       hour = "0"
		49 |     }
		50 |
		51 |     pricing_plan     = "PER_USE"
		52 |     replication_type = "SYNCHRONOUS"
		53 |     tier             = "db-custom-1-4096"
		54 |   }
		55 | }


Check: CKV_GCP_6: "Ensure all Cloud SQL database instance requires all incoming connections to use SSL"
	FAILED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/SQL-no-cross-db-ownership-chaining.tf:2-6

		2 | resource "google_sql_database_instance" "db" {
		3 |   name             = "db"
		4 |   database_version = "SQLSERVER_2017_STANDARD"
		5 |   region           = "us-central1"
		6 | }


Check: CKV_GCP_14: "Ensure all Cloud SQL database instance have backup configuration enabled"
	FAILED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/SQL-no-cross-db-ownership-chaining.tf:2-6

		2 | resource "google_sql_database_instance" "db" {
		3 |   name             = "db"
		4 |   database_version = "SQLSERVER_2017_STANDARD"
		5 |   region           = "us-central1"
		6 | }


Check: CKV_GCP_6: "Ensure all Cloud SQL database instance requires all incoming connections to use SSL"
	FAILED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/mysql-no-local-infile.tf:3-13

		3  | resource "google_sql_database_instance" "db" {
		4  |   name             = "db"
		5  |   database_version = "MYSQL_5_6"
		6  |   region           = "us-central1"
		7  |   settings {
		8  |     database_flags {
		9  |       name  = "local_infile"
		10 |       value = "on"
		11 |     }
		12 |   }
		13 | }


Check: CKV_GCP_50: "Ensure MySQL database 'local_infile' flag is set to 'off'"
	FAILED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/mysql-no-local-infile.tf:3-13

		3  | resource "google_sql_database_instance" "db" {
		4  |   name             = "db"
		5  |   database_version = "MYSQL_5_6"
		6  |   region           = "us-central1"
		7  |   settings {
		8  |     database_flags {
		9  |       name  = "local_infile"
		10 |       value = "on"
		11 |     }
		12 |   }
		13 | }


Check: CKV_GCP_14: "Ensure all Cloud SQL database instance have backup configuration enabled"
	FAILED for resource: google_sql_database_instance.db
	File: /terraform/google/sql/mysql-no-local-infile.tf:3-13

		3  | resource "google_sql_database_instance" "db" {
		4  |   name             = "db"
		5  |   database_version = "MYSQL_5_6"
		6  |   region           = "us-central1"
		7  |   settings {
		8  |     database_flags {
		9  |       name  = "local_infile"
		10 |       value = "on"
		11 |     }
		12 |   }
		13 | }


Check: CKV_GCP_6: "Ensure all Cloud SQL database instance requires all incoming connections to use SSL"
	FAILED for resource: google_sql_database_instance.instance1-fail
	File: /terraform/google/sql/sql_database_instance.tf:1-24

		1  | resource "google_sql_database_instance" "instance1-fail" {
		2  |   name   = "instance"
		3  |   region = "us-central1"
		4  |   settings {
		5  |     tier = "db-f1-micro"
		6  |     ip_configuration {
		7  |       ipv4_enabled = true
		8  |       authorized_networks = [
		9  |         {
		10 |           name  = "XYZ"
		11 |           value = "1.2.3.4"
		12 |         },
		13 |         {
		14 |           name  = "Public"
		15 |           value = "0.0.0.0/0"
		16 |         },
		17 |         {
		18 |           name  = "ABC",
		19 |           value = "5.5.5.0/24"
		20 |         }
		21 |       ]
		22 |     }
		23 |   }
		24 | }


Check: CKV_GCP_14: "Ensure all Cloud SQL database instance have backup configuration enabled"
	FAILED for resource: google_sql_database_instance.instance1-fail
	File: /terraform/google/sql/sql_database_instance.tf:1-24

		1  | resource "google_sql_database_instance" "instance1-fail" {
		2  |   name   = "instance"
		3  |   region = "us-central1"
		4  |   settings {
		5  |     tier = "db-f1-micro"
		6  |     ip_configuration {
		7  |       ipv4_enabled = true
		8  |       authorized_networks = [
		9  |         {
		10 |           name  = "XYZ"
		11 |           value = "1.2.3.4"
		12 |         },
		13 |         {
		14 |           name  = "Public"
		15 |           value = "0.0.0.0/0"
		16 |         },
		17 |         {
		18 |           name  = "ABC",
		19 |           value = "5.5.5.0/24"
		20 |         }
		21 |       ]
		22 |     }
		23 |   }
		24 | }


Check: CKV_GCP_11: "Ensure that Cloud SQL database Instances are not open to the world"
	FAILED for resource: google_sql_database_instance.instance1-fail
	File: /terraform/google/sql/sql_database_instance.tf:1-24

		1  | resource "google_sql_database_instance" "instance1-fail" {
		2  |   name   = "instance"
		3  |   region = "us-central1"
		4  |   settings {
		5  |     tier = "db-f1-micro"
		6  |     ip_configuration {
		7  |       ipv4_enabled = true
		8  |       authorized_networks = [
		9  |         {
		10 |           name  = "XYZ"
		11 |           value = "1.2.3.4"
		12 |         },
		13 |         {
		14 |           name  = "Public"
		15 |           value = "0.0.0.0/0"
		16 |         },
		17 |         {
		18 |           name  = "ABC",
		19 |           value = "5.5.5.0/24"
		20 |         }
		21 |       ]
		22 |     }
		23 |   }
		24 | }


Check: CKV_GCP_29: "Ensure that Cloud Storage buckets have uniform bucket-level access enabled"
	FAILED for resource: google_storage_bucket.static-site
	File: /terraform/google/storage/CloudStorageSelfLogging.tf:2-9

		2 | resource "google_storage_bucket" "static-site" {
		3 |   name          = "image-store.com"
		4 |   location      = "EU"
		5 |   force_destroy = true
		6 |   logging {
		7 |     log_bucket = "image-store.com"
		8 |   }
		9 | }


Check: CKV_GCP_63: "Bucket should not log to itself"
	FAILED for resource: google_storage_bucket.static-site
	File: /terraform/google/storage/CloudStorageSelfLogging.tf:2-9

		2 | resource "google_storage_bucket" "static-site" {
		3 |   name          = "image-store.com"
		4 |   location      = "EU"
		5 |   force_destroy = true
		6 |   logging {
		7 |     log_bucket = "image-store.com"
		8 |   }
		9 | }


Check: CKV_GCP_62: "Bucket should log access"
	FAILED for resource: google_storage_bucket.static-site
	File: /terraform/google/storage/enable-ubla.tf:2-19

		2  | resource "google_storage_bucket" "static-site" {
		3  |   name          = "image-store.com"
		4  |   location      = "EU"
		5  |   force_destroy = true
		6  |
		7  |   uniform_bucket_level_access = false
		8  |
		9  |   website {
		10 |     main_page_suffix = "index.html"
		11 |     not_found_page   = "404.html"
		12 |   }
		13 |   cors {
		14 |     origin          = ["http://image-store.com"]
		15 |     method          = ["GET", "HEAD", "PUT", "POST", "DELETE"]
		16 |     response_header = ["*"]
		17 |     max_age_seconds = 3600
		18 |   }
		19 | }


Check: CKV_GCP_29: "Ensure that Cloud Storage buckets have uniform bucket-level access enabled"
	FAILED for resource: google_storage_bucket.static-site
	File: /terraform/google/storage/enable-ubla.tf:2-19

		2  | resource "google_storage_bucket" "static-site" {
		3  |   name          = "image-store.com"
		4  |   location      = "EU"
		5  |   force_destroy = true
		6  |
		7  |   uniform_bucket_level_access = false
		8  |
		9  |   website {
		10 |     main_page_suffix = "index.html"
		11 |     not_found_page   = "404.html"
		12 |   }
		13 |   cors {
		14 |     origin          = ["http://image-store.com"]
		15 |     method          = ["GET", "HEAD", "PUT", "POST", "DELETE"]
		16 |     response_header = ["*"]
		17 |     max_age_seconds = 3600
		18 |   }
		19 | }


Check: CKV_GCP_62: "Bucket should log access"
	FAILED for resource: google_storage_bucket.logging
	File: /terraform/google/storage/storage_bucket.tf:5-9

		5 | resource "google_storage_bucket" "logging" {
		6 |   name                        = "jgwloggingbucket"
		7 |   location                    = var.location
		8 |   uniform_bucket_level_access = false
		9 | }


Check: CKV_GCP_29: "Ensure that Cloud Storage buckets have uniform bucket-level access enabled"
	FAILED for resource: google_storage_bucket.logging
	File: /terraform/google/storage/storage_bucket.tf:5-9

		5 | resource "google_storage_bucket" "logging" {
		6 |   name                        = "jgwloggingbucket"
		7 |   location                    = var.location
		8 |   uniform_bucket_level_access = false
		9 | }


Check: CKV_GCP_28: "Ensure that Cloud Storage bucket is not anonymously or publicly accessible"
	FAILED for resource: google_storage_bucket_iam_binding.binding
	File: /terraform/google/storage/storage_bucket_iam_binding.tf:4-10

		4  | resource "google_storage_bucket_iam_binding" "binding" {
		5  |   bucket = google_storage_bucket.default.name
		6  |   role   = "roles/storage.admin"
		7  |   members = [
		8  |     "allAuthenticatedUsers",
		9  |   ]
		10 | }


Check: CKV_GCP_28: "Ensure that Cloud Storage bucket is not anonymously or publicly accessible"
	FAILED for resource: google_storage_bucket_iam_member.member
	File: /terraform/google/storage/storage_bucket_iam_member.tf:5-9

		5 | resource "google_storage_bucket_iam_member" "member" {
		6 |   bucket = google_storage_bucket.default.name
		7 |   role   = "roles/storage.admin"
		8 |   member = "allUsers"
		9 | }


Check: CKV_LIN_6: "Ensure Outbound Firewall Policy is not set to ACCEPT"
	FAILED for resource: linode_firewall.test
	File: /terraform/linode/firewall.tf:2-5

		2 | resource "linode_firewall" "test" {
		3 |   inbound_policy  = "ACCEPT"
		4 |   outbound_policy = "ACCEPT"
		5 | }


Check: CKV_LIN_5: "Ensure Inbound Firewall Policy is not set to ACCEPT"
	FAILED for resource: linode_firewall.test
	File: /terraform/linode/firewall.tf:2-5

		2 | resource "linode_firewall" "test" {
		3 |   inbound_policy  = "ACCEPT"
		4 |   outbound_policy = "ACCEPT"
		5 | }


Check: CKV_LIN_2: "Ensure SSH key set in authorized_keys"
	FAILED for resource: linode_instance.test
	File: /terraform/linode/instance.tf:1-2

		1 | resource "linode_instance" "test" {
		2 | }


Check: CKV_LIN_3: "Ensure email is set"
	FAILED for resource: linode_user.test
	File: /terraform/linode/user.tf:2-3

		2 | resource "linode_user" "test" {
		3 | }


Check: CKV_LIN_4: "Ensure email is set"
	FAILED for resource: linode_user.test
	File: /terraform/linode/user.tf:2-3

		2 | resource "linode_user" "test" {
		3 | }


Check: CKV_OPENSTACK_2: "Ensure no security groups allow ingress from 0.0.0.0:0 to port 22 (tcp / udp)"
	FAILED for resource: openstack_compute_secgroup_v2.fail
	File: /terraform/openstack/security_group/compute_secgroup_v2.tf:5-43

		5  | resource "openstack_compute_secgroup_v2" "fail" {
		6  |   name        = "my_secgroup"
		7  |   description = "my security group"
		8  |
		9  |   rule {
		10 |     from_port   = 80
		11 |     to_port     = 80
		12 |     ip_protocol = "tcp"
		13 |     cidr        = "0.0.0.0/0"
		14 |   }
		15 |
		16 |   rule {
		17 |     from_port   = 22
		18 |     to_port     = 22
		19 |     ip_protocol = "tcp"
		20 |     cidr        = "192.168.0.0/16"
		21 |   }
		22 |
		23 |   rule {
		24 |     from_port   = 22
		25 |     to_port     = 22
		26 |     ip_protocol = "tcp"
		27 |     cidr        = "0.0.0.0/0"
		28 |   }
		29 |
		30 |   rule {
		31 |     from_port   = 3389
		32 |     to_port     = 3389
		33 |     ip_protocol = "tcp"
		34 |     cidr        = "192.168.0.0/16"
		35 |   }
		36 |
		37 |   rule {
		38 |     from_port   = 3389
		39 |     to_port     = 3389
		40 |     ip_protocol = "tcp"
		41 |     cidr        = "0.0.0.0/0"
		42 |   }
		43 | }


Check: CKV_OPENSTACK_3: "Ensure no security groups allow ingress from 0.0.0.0:0 to port 3389 (tcp / udp)"
	FAILED for resource: openstack_compute_secgroup_v2.fail
	File: /terraform/openstack/security_group/compute_secgroup_v2.tf:5-43

		5  | resource "openstack_compute_secgroup_v2" "fail" {
		6  |   name        = "my_secgroup"
		7  |   description = "my security group"
		8  |
		9  |   rule {
		10 |     from_port   = 80
		11 |     to_port     = 80
		12 |     ip_protocol = "tcp"
		13 |     cidr        = "0.0.0.0/0"
		14 |   }
		15 |
		16 |   rule {
		17 |     from_port   = 22
		18 |     to_port     = 22
		19 |     ip_protocol = "tcp"
		20 |     cidr        = "192.168.0.0/16"
		21 |   }
		22 |
		23 |   rule {
		24 |     from_port   = 22
		25 |     to_port     = 22
		26 |     ip_protocol = "tcp"
		27 |     cidr        = "0.0.0.0/0"
		28 |   }
		29 |
		30 |   rule {
		31 |     from_port   = 3389
		32 |     to_port     = 3389
		33 |     ip_protocol = "tcp"
		34 |     cidr        = "192.168.0.0/16"
		35 |   }
		36 |
		37 |   rule {
		38 |     from_port   = 3389
		39 |     to_port     = 3389
		40 |     ip_protocol = "tcp"
		41 |     cidr        = "0.0.0.0/0"
		42 |   }
		43 | }


Check: CKV_OCI_13: "OCI IAM password policy - must contain Special characters"
	FAILED for resource: oci_identity_authentication_policy.fail
	File: /terraform/oracle/IAM/identity_authentication_policy.tf:8-20

		8  | resource "oci_identity_authentication_policy" "fail" {
		9  |
		10 |   compartment_id = var.tenancy_id
		11 |
		12 |   password_policy {
		13 |     is_lowercase_characters_required = false
		14 |     is_numeric_characters_required   = false
		15 |     is_special_characters_required   = false
		16 |     is_uppercase_characters_required = false
		17 |     is_username_containment_allowed  = false
		18 |     minimum_password_length          = 13
		19 |   }
		20 | }


Check: CKV_OCI_11: "OCI IAM password policy - must contain lower case"
	FAILED for resource: oci_identity_authentication_policy.fail
	File: /terraform/oracle/IAM/identity_authentication_policy.tf:8-20

		8  | resource "oci_identity_authentication_policy" "fail" {
		9  |
		10 |   compartment_id = var.tenancy_id
		11 |
		12 |   password_policy {
		13 |     is_lowercase_characters_required = false
		14 |     is_numeric_characters_required   = false
		15 |     is_special_characters_required   = false
		16 |     is_uppercase_characters_required = false
		17 |     is_username_containment_allowed  = false
		18 |     minimum_password_length          = 13
		19 |   }
		20 | }


Check: CKV_OCI_18: "OCI IAM password policy for local (non-federated) users has a minimum length of 14 characters"
	FAILED for resource: oci_identity_authentication_policy.fail
	File: /terraform/oracle/IAM/identity_authentication_policy.tf:8-20

		8  | resource "oci_identity_authentication_policy" "fail" {
		9  |
		10 |   compartment_id = var.tenancy_id
		11 |
		12 |   password_policy {
		13 |     is_lowercase_characters_required = false
		14 |     is_numeric_characters_required   = false
		15 |     is_special_characters_required   = false
		16 |     is_uppercase_characters_required = false
		17 |     is_username_containment_allowed  = false
		18 |     minimum_password_length          = 13
		19 |   }
		20 | }


Check: CKV_OCI_14: "OCI IAM password policy - must contain Uppercase characters"
	FAILED for resource: oci_identity_authentication_policy.fail
	File: /terraform/oracle/IAM/identity_authentication_policy.tf:8-20

		8  | resource "oci_identity_authentication_policy" "fail" {
		9  |
		10 |   compartment_id = var.tenancy_id
		11 |
		12 |   password_policy {
		13 |     is_lowercase_characters_required = false
		14 |     is_numeric_characters_required   = false
		15 |     is_special_characters_required   = false
		16 |     is_uppercase_characters_required = false
		17 |     is_username_containment_allowed  = false
		18 |     minimum_password_length          = 13
		19 |   }
		20 | }


Check: CKV_OCI_12: "OCI IAM password policy - must contain Numeric characters"
	FAILED for resource: oci_identity_authentication_policy.fail
	File: /terraform/oracle/IAM/identity_authentication_policy.tf:8-20

		8  | resource "oci_identity_authentication_policy" "fail" {
		9  |
		10 |   compartment_id = var.tenancy_id
		11 |
		12 |   password_policy {
		13 |     is_lowercase_characters_required = false
		14 |     is_numeric_characters_required   = false
		15 |     is_special_characters_required   = false
		16 |     is_uppercase_characters_required = false
		17 |     is_username_containment_allowed  = false
		18 |     minimum_password_length          = 13
		19 |   }
		20 | }


Check: CKV_OCI_4: "Ensure OCI Compute Instance boot volume has in-transit data encryption enabled"
	FAILED for resource: oci_core_instance.fail
	File: /terraform/oracle/core_instance/core_instance.tf:5-83

		5  | resource "oci_core_instance" "fail" {
		6  |   availability_domain = var.instance_availability_domain
		7  |   compartment_id      = var.compartment_id
		8  |   shape               = var.instance_shape
		9  |
		10 |   agent_config {
		11 |     is_monitoring_disabled = true
		12 |   }
		13 |
		14 |   create_vnic_details {
		15 |     assign_private_dns_record = var.instance_create_vnic_details_assign_private_dns_record
		16 |     assign_public_ip          = var.instance_create_vnic_details_assign_public_ip
		17 |     defined_tags              = { "Operations.CostCenter" = "42" }
		18 |     display_name              = var.instance_create_vnic_details_display_name
		19 |     freeform_tags             = { "Department" = "Finance" }
		20 |     hostname_label            = var.instance_create_vnic_details_hostname_label
		21 |     nsg_ids                   = var.instance_create_vnic_details_nsg_ids
		22 |     private_ip                = var.instance_create_vnic_details_private_ip
		23 |     skip_source_dest_check    = var.instance_create_vnic_details_skip_source_dest_check
		24 |     subnet_id                 = oci_core_subnet.test_subnet.id
		25 |     vlan_id                   = oci_core_vlan.test_vlan.id
		26 |   }
		27 |
		28 |   dedicated_vm_host_id = oci_core_dedicated_vm_host.test_dedicated_vm_host.id
		29 |   defined_tags         = { "Operations.CostCenter" = "42" }
		30 |   display_name         = var.instance_display_name
		31 |   extended_metadata = {
		32 |     some_string   = "stringA"
		33 |     nested_object = "{\"some_string\": \"stringB\", \"object\": {\"some_string\": \"stringC\"}}"
		34 |   }
		35 |
		36 |   fault_domain  = var.instance_fault_domain
		37 |   freeform_tags = { "Department" = "Finance" }
		38 |
		39 |   instance_options {
		40 |     are_legacy_imds_endpoints_disabled = false
		41 |   }
		42 |
		43 |   ipxe_script                         = var.instance_ipxe_script
		44 |   is_pv_encryption_in_transit_enabled = var.instance_is_pv_encryption_in_transit_enabled
		45 |
		46 |   launch_options {
		47 |     boot_volume_type                    = var.instance_launch_options_boot_volume_type
		48 |     firmware                            = var.instance_launch_options_firmware
		49 |     is_consistent_volume_naming_enabled = var.instance_launch_options_is_consistent_volume_naming_enabled
		50 |     network_type                        = var.instance_launch_options_network_type
		51 |     remote_data_volume_type             = var.instance_launch_options_remote_data_volume_type
		52 |   }
		53 |   metadata = var.instance_metadata
		54 |
		55 |   platform_config {
		56 |     type                               = var.instance_platform_config_type
		57 |     is_measured_boot_enabled           = var.instance_platform_config_is_measured_boot_enabled
		58 |     is_secure_boot_enabled             = var.instance_platform_config_is_secure_boot_enabled
		59 |     is_trusted_platform_module_enabled = var.instance_platform_config_is_trusted_platform_module_enabled
		60 |     numa_nodes_per_socket              = var.instance_platform_config_numa_nodes_per_socket
		61 |   }
		62 |
		63 |   preemptible_instance_config {
		64 |     preemption_action {
		65 |       type                 = var.instance_preemptible_instance_config_preemption_action_type
		66 |       preserve_boot_volume = var.instance_preemptible_instance_config_preemption_action_preserve_boot_volume
		67 |     }
		68 |   }
		69 |
		70 |   shape_config {
		71 |     baseline_ocpu_utilization = var.instance_shape_config_baseline_ocpu_utilization
		72 |     memory_in_gbs             = var.instance_shape_config_memory_in_gbs
		73 |     ocpus                     = var.instance_shape_config_ocpus
		74 |   }
		75 |
		76 |   source_details {
		77 |     source_id               = oci_core_image.test_image.id
		78 |     source_type             = "image"
		79 |     boot_volume_size_in_gbs = var.instance_source_details_boot_volume_size_in_gbs
		80 |     kms_key_id              = oci_kms_key.test_key.id
		81 |   }
		82 |   preserve_boot_volume = false
		83 | }


Check: CKV_OCI_5: "Ensure OCI Compute Instance has Legacy MetaData service endpoint disabled"
	FAILED for resource: oci_core_instance.fail
	File: /terraform/oracle/core_instance/core_instance.tf:5-83

		5  | resource "oci_core_instance" "fail" {
		6  |   availability_domain = var.instance_availability_domain
		7  |   compartment_id      = var.compartment_id
		8  |   shape               = var.instance_shape
		9  |
		10 |   agent_config {
		11 |     is_monitoring_disabled = true
		12 |   }
		13 |
		14 |   create_vnic_details {
		15 |     assign_private_dns_record = var.instance_create_vnic_details_assign_private_dns_record
		16 |     assign_public_ip          = var.instance_create_vnic_details_assign_public_ip
		17 |     defined_tags              = { "Operations.CostCenter" = "42" }
		18 |     display_name              = var.instance_create_vnic_details_display_name
		19 |     freeform_tags             = { "Department" = "Finance" }
		20 |     hostname_label            = var.instance_create_vnic_details_hostname_label
		21 |     nsg_ids                   = var.instance_create_vnic_details_nsg_ids
		22 |     private_ip                = var.instance_create_vnic_details_private_ip
		23 |     skip_source_dest_check    = var.instance_create_vnic_details_skip_source_dest_check
		24 |     subnet_id                 = oci_core_subnet.test_subnet.id
		25 |     vlan_id                   = oci_core_vlan.test_vlan.id
		26 |   }
		27 |
		28 |   dedicated_vm_host_id = oci_core_dedicated_vm_host.test_dedicated_vm_host.id
		29 |   defined_tags         = { "Operations.CostCenter" = "42" }
		30 |   display_name         = var.instance_display_name
		31 |   extended_metadata = {
		32 |     some_string   = "stringA"
		33 |     nested_object = "{\"some_string\": \"stringB\", \"object\": {\"some_string\": \"stringC\"}}"
		34 |   }
		35 |
		36 |   fault_domain  = var.instance_fault_domain
		37 |   freeform_tags = { "Department" = "Finance" }
		38 |
		39 |   instance_options {
		40 |     are_legacy_imds_endpoints_disabled = false
		41 |   }
		42 |
		43 |   ipxe_script                         = var.instance_ipxe_script
		44 |   is_pv_encryption_in_transit_enabled = var.instance_is_pv_encryption_in_transit_enabled
		45 |
		46 |   launch_options {
		47 |     boot_volume_type                    = var.instance_launch_options_boot_volume_type
		48 |     firmware                            = var.instance_launch_options_firmware
		49 |     is_consistent_volume_naming_enabled = var.instance_launch_options_is_consistent_volume_naming_enabled
		50 |     network_type                        = var.instance_launch_options_network_type
		51 |     remote_data_volume_type             = var.instance_launch_options_remote_data_volume_type
		52 |   }
		53 |   metadata = var.instance_metadata
		54 |
		55 |   platform_config {
		56 |     type                               = var.instance_platform_config_type
		57 |     is_measured_boot_enabled           = var.instance_platform_config_is_measured_boot_enabled
		58 |     is_secure_boot_enabled             = var.instance_platform_config_is_secure_boot_enabled
		59 |     is_trusted_platform_module_enabled = var.instance_platform_config_is_trusted_platform_module_enabled
		60 |     numa_nodes_per_socket              = var.instance_platform_config_numa_nodes_per_socket
		61 |   }
		62 |
		63 |   preemptible_instance_config {
		64 |     preemption_action {
		65 |       type                 = var.instance_preemptible_instance_config_preemption_action_type
		66 |       preserve_boot_volume = var.instance_preemptible_instance_config_preemption_action_preserve_boot_volume
		67 |     }
		68 |   }
		69 |
		70 |   shape_config {
		71 |     baseline_ocpu_utilization = var.instance_shape_config_baseline_ocpu_utilization
		72 |     memory_in_gbs             = var.instance_shape_config_memory_in_gbs
		73 |     ocpus                     = var.instance_shape_config_ocpus
		74 |   }
		75 |
		76 |   source_details {
		77 |     source_id               = oci_core_image.test_image.id
		78 |     source_type             = "image"
		79 |     boot_volume_size_in_gbs = var.instance_source_details_boot_volume_size_in_gbs
		80 |     kms_key_id              = oci_kms_key.test_key.id
		81 |   }
		82 |   preserve_boot_volume = false
		83 | }


Check: CKV_OCI_6: "Ensure OCI Compute Instance has monitoring enabled"
	FAILED for resource: oci_core_instance.fail
	File: /terraform/oracle/core_instance/core_instance.tf:5-83

		5  | resource "oci_core_instance" "fail" {
		6  |   availability_domain = var.instance_availability_domain
		7  |   compartment_id      = var.compartment_id
		8  |   shape               = var.instance_shape
		9  |
		10 |   agent_config {
		11 |     is_monitoring_disabled = true
		12 |   }
		13 |
		14 |   create_vnic_details {
		15 |     assign_private_dns_record = var.instance_create_vnic_details_assign_private_dns_record
		16 |     assign_public_ip          = var.instance_create_vnic_details_assign_public_ip
		17 |     defined_tags              = { "Operations.CostCenter" = "42" }
		18 |     display_name              = var.instance_create_vnic_details_display_name
		19 |     freeform_tags             = { "Department" = "Finance" }
		20 |     hostname_label            = var.instance_create_vnic_details_hostname_label
		21 |     nsg_ids                   = var.instance_create_vnic_details_nsg_ids
		22 |     private_ip                = var.instance_create_vnic_details_private_ip
		23 |     skip_source_dest_check    = var.instance_create_vnic_details_skip_source_dest_check
		24 |     subnet_id                 = oci_core_subnet.test_subnet.id
		25 |     vlan_id                   = oci_core_vlan.test_vlan.id
		26 |   }
		27 |
		28 |   dedicated_vm_host_id = oci_core_dedicated_vm_host.test_dedicated_vm_host.id
		29 |   defined_tags         = { "Operations.CostCenter" = "42" }
		30 |   display_name         = var.instance_display_name
		31 |   extended_metadata = {
		32 |     some_string   = "stringA"
		33 |     nested_object = "{\"some_string\": \"stringB\", \"object\": {\"some_string\": \"stringC\"}}"
		34 |   }
		35 |
		36 |   fault_domain  = var.instance_fault_domain
		37 |   freeform_tags = { "Department" = "Finance" }
		38 |
		39 |   instance_options {
		40 |     are_legacy_imds_endpoints_disabled = false
		41 |   }
		42 |
		43 |   ipxe_script                         = var.instance_ipxe_script
		44 |   is_pv_encryption_in_transit_enabled = var.instance_is_pv_encryption_in_transit_enabled
		45 |
		46 |   launch_options {
		47 |     boot_volume_type                    = var.instance_launch_options_boot_volume_type
		48 |     firmware                            = var.instance_launch_options_firmware
		49 |     is_consistent_volume_naming_enabled = var.instance_launch_options_is_consistent_volume_naming_enabled
		50 |     network_type                        = var.instance_launch_options_network_type
		51 |     remote_data_volume_type             = var.instance_launch_options_remote_data_volume_type
		52 |   }
		53 |   metadata = var.instance_metadata
		54 |
		55 |   platform_config {
		56 |     type                               = var.instance_platform_config_type
		57 |     is_measured_boot_enabled           = var.instance_platform_config_is_measured_boot_enabled
		58 |     is_secure_boot_enabled             = var.instance_platform_config_is_secure_boot_enabled
		59 |     is_trusted_platform_module_enabled = var.instance_platform_config_is_trusted_platform_module_enabled
		60 |     numa_nodes_per_socket              = var.instance_platform_config_numa_nodes_per_socket
		61 |   }
		62 |
		63 |   preemptible_instance_config {
		64 |     preemption_action {
		65 |       type                 = var.instance_preemptible_instance_config_preemption_action_type
		66 |       preserve_boot_volume = var.instance_preemptible_instance_config_preemption_action_preserve_boot_volume
		67 |     }
		68 |   }
		69 |
		70 |   shape_config {
		71 |     baseline_ocpu_utilization = var.instance_shape_config_baseline_ocpu_utilization
		72 |     memory_in_gbs             = var.instance_shape_config_memory_in_gbs
		73 |     ocpus                     = var.instance_shape_config_ocpus
		74 |   }
		75 |
		76 |   source_details {
		77 |     source_id               = oci_core_image.test_image.id
		78 |     source_type             = "image"
		79 |     boot_volume_size_in_gbs = var.instance_source_details_boot_volume_size_in_gbs
		80 |     kms_key_id              = oci_kms_key.test_key.id
		81 |   }
		82 |   preserve_boot_volume = false
		83 | }


Check: CKV_OCI_16: "Ensure VCN has an inbound security list"
	FAILED for resource: oci_core_security_list.fail
	File: /terraform/oracle/core_security_list/core_security_list.tf:1-4

		1 | resource "oci_core_security_list" "fail" {
		2 |   compartment_id = oci_identity_compartment.tf-compartment.id
		3 |   vcn_id         = oci_core_vcn.test_vcn.id
		4 | }


Check: CKV_OCI_17: "Ensure VCN inbound security lists are stateless"
	FAILED for resource: oci_core_security_list.fail
	File: /terraform/oracle/core_security_list/stateless.tf:2-10

		2  | resource "oci_core_security_list" "fail" {
		3  |   compartment_id = oci_identity_compartment.tf-compartment.id
		4  |   vcn_id         = oci_core_vcn.test_vcn.id
		5  |   ingress_security_rules {
		6  |     protocol  = "all"
		7  |     source    = "192.168.1.0/24"
		8  |     stateless = false
		9  |   }
		10 | }


Check: CKV_OCI_2: "Ensure OCI Block Storage Block Volume has backup enabled"
	FAILED for resource: oci_core_volume.fail
	File: /terraform/oracle/core_volume/core_volume.tf:1-22

		1  | resource "oci_core_volume" "fail" {
		2  |   compartment_id      = var.compartment_id
		3  |   availability_domain = var.volume_availability_domain
		4  |
		5  |   block_volume_replicas {
		6  |     availability_domain = var.volume_block_volume_replicas_availability_domain
		7  |     display_name        = var.volume_block_volume_replicas_display_name
		8  |   }
		9  |   defined_tags         = { "Operations.CostCenter" = "42" }
		10 |   display_name         = var.volume_display_name
		11 |   freeform_tags        = { "Department" = "Finance" }
		12 |   is_auto_tune_enabled = var.volume_is_auto_tune_enabled
		13 |   size_in_gbs          = var.volume_size_in_gbs
		14 |   size_in_mbs          = var.volume_size_in_mbs
		15 |
		16 |   source_details {
		17 |     id   = var.volume_source_details_id
		18 |     type = var.volume_source_details_type
		19 |   }
		20 |   vpus_per_gb                    = var.volume_vpus_per_gb
		21 |   block_volume_replicas_deletion = true
		22 | }


Check: CKV_OCI_3: "OCI Block Storage Block Volumes are not encrypted with a Customer Managed Key (CMK)"
	FAILED for resource: oci_core_volume.fail
	File: /terraform/oracle/core_volume/core_volume.tf:1-22

		1  | resource "oci_core_volume" "fail" {
		2  |   compartment_id      = var.compartment_id
		3  |   availability_domain = var.volume_availability_domain
		4  |
		5  |   block_volume_replicas {
		6  |     availability_domain = var.volume_block_volume_replicas_availability_domain
		7  |     display_name        = var.volume_block_volume_replicas_display_name
		8  |   }
		9  |   defined_tags         = { "Operations.CostCenter" = "42" }
		10 |   display_name         = var.volume_display_name
		11 |   freeform_tags        = { "Department" = "Finance" }
		12 |   is_auto_tune_enabled = var.volume_is_auto_tune_enabled
		13 |   size_in_gbs          = var.volume_size_in_gbs
		14 |   size_in_mbs          = var.volume_size_in_mbs
		15 |
		16 |   source_details {
		17 |     id   = var.volume_source_details_id
		18 |     type = var.volume_source_details_type
		19 |   }
		20 |   vpus_per_gb                    = var.volume_vpus_per_gb
		21 |   block_volume_replicas_deletion = true
		22 | }


Check: CKV_OCI_15: "Ensure OCI File System is Encrypted with a customer Managed Key"
	FAILED for resource: oci_file_storage_file_system.fail
	File: /terraform/oracle/file_storage_file_system/file_storage_file_system.tf:4-12

		4  | resource "oci_file_storage_file_system" "fail" {
		5  |   availability_domain = var.file_system_availability_domain
		6  |   compartment_id      = var.compartment_id
		7  |
		8  |   defined_tags       = { "Operations.CostCenter" = "42" }
		9  |   display_name       = var.file_system_display_name
		10 |   freeform_tags      = { "Department" = "Finance" }
		11 |   source_snapshot_id = oci_file_storage_snapshot.test_snapshot.id
		12 | }


Check: CKV_OCI_9: "Ensure OCI Object Storage is encrypted with Customer Managed Key"
	FAILED for resource: oci_objectstorage_bucket.fail
	File: /terraform/oracle/objectstorage_bucket/objectstorage_bucket.tf:7-30

		7  | resource "oci_objectstorage_bucket" "fail" {
		8  |   compartment_id = var.compartment_id
		9  |   name           = var.bucket_name
		10 |   namespace      = var.namespace
		11 |
		12 |   access_type           = "ObjectReadWithoutList"
		13 |   defined_tags          = var.defined_tags
		14 |   freeform_tags         = var.freeform_tags
		15 |   metadata              = var.metadata
		16 |   storage_tier          = var.bucket_storage_tier
		17 |   object_events_enabled = false
		18 |
		19 |   retention_rules {
		20 |     display_name = var.retention_rule_display_name
		21 |
		22 |     duration {
		23 |       time_amount = var.retention_rule_duration_time_amount
		24 |       time_unit   = var.retention_rule_duration_time_unit
		25 |     }
		26 |     time_rule_locked = var.retention_rule_time_rule_locked
		27 |   }
		28 |
		29 |   versioning = "Disabled"
		30 | }


Check: CKV_OCI_10: "Ensure OCI Object Storage is not Public"
	FAILED for resource: oci_objectstorage_bucket.fail
	File: /terraform/oracle/objectstorage_bucket/objectstorage_bucket.tf:7-30

		7  | resource "oci_objectstorage_bucket" "fail" {
		8  |   compartment_id = var.compartment_id
		9  |   name           = var.bucket_name
		10 |   namespace      = var.namespace
		11 |
		12 |   access_type           = "ObjectReadWithoutList"
		13 |   defined_tags          = var.defined_tags
		14 |   freeform_tags         = var.freeform_tags
		15 |   metadata              = var.metadata
		16 |   storage_tier          = var.bucket_storage_tier
		17 |   object_events_enabled = false
		18 |
		19 |   retention_rules {
		20 |     display_name = var.retention_rule_display_name
		21 |
		22 |     duration {
		23 |       time_amount = var.retention_rule_duration_time_amount
		24 |       time_unit   = var.retention_rule_duration_time_unit
		25 |     }
		26 |     time_rule_locked = var.retention_rule_time_rule_locked
		27 |   }
		28 |
		29 |   versioning = "Disabled"
		30 | }


Check: CKV_OCI_8: "Ensure OCI Object Storage has versioning enabled"
	FAILED for resource: oci_objectstorage_bucket.fail
	File: /terraform/oracle/objectstorage_bucket/objectstorage_bucket.tf:7-30

		7  | resource "oci_objectstorage_bucket" "fail" {
		8  |   compartment_id = var.compartment_id
		9  |   name           = var.bucket_name
		10 |   namespace      = var.namespace
		11 |
		12 |   access_type           = "ObjectReadWithoutList"
		13 |   defined_tags          = var.defined_tags
		14 |   freeform_tags         = var.freeform_tags
		15 |   metadata              = var.metadata
		16 |   storage_tier          = var.bucket_storage_tier
		17 |   object_events_enabled = false
		18 |
		19 |   retention_rules {
		20 |     display_name = var.retention_rule_display_name
		21 |
		22 |     duration {
		23 |       time_amount = var.retention_rule_duration_time_amount
		24 |       time_unit   = var.retention_rule_duration_time_unit
		25 |     }
		26 |     time_rule_locked = var.retention_rule_time_rule_locked
		27 |   }
		28 |
		29 |   versioning = "Disabled"
		30 | }


Check: CKV_OCI_7: "Ensure OCI Object Storage bucket can emit object events"
	FAILED for resource: oci_objectstorage_bucket.fail
	File: /terraform/oracle/objectstorage_bucket/objectstorage_bucket.tf:7-30

		7  | resource "oci_objectstorage_bucket" "fail" {
		8  |   compartment_id = var.compartment_id
		9  |   name           = var.bucket_name
		10 |   namespace      = var.namespace
		11 |
		12 |   access_type           = "ObjectReadWithoutList"
		13 |   defined_tags          = var.defined_tags
		14 |   freeform_tags         = var.freeform_tags
		15 |   metadata              = var.metadata
		16 |   storage_tier          = var.bucket_storage_tier
		17 |   object_events_enabled = false
		18 |
		19 |   retention_rules {
		20 |     display_name = var.retention_rule_display_name
		21 |
		22 |     duration {
		23 |       time_amount = var.retention_rule_duration_time_amount
		24 |       time_unit   = var.retention_rule_duration_time_unit
		25 |     }
		26 |     time_rule_locked = var.retention_rule_time_rule_locked
		27 |   }
		28 |
		29 |   versioning = "Disabled"
		30 | }


Check: CKV_AWS_41: "Ensure no hard coded AWS access key and secret key exists in provider"
	FAILED for resource: aws.default
	File: /terraform/secrets/BC_GIT_2.tf:1-4

		1 | provider "aws" {
		2 |   access_key = "AKIAIOSFODNN7EXAMPLE"
		3 |   secret_key = "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
		4 | }


Check: CKV2_AZURE_7: "Ensure that Azure Active Directory Admin is configured"
	FAILED for resource: azurerm_sql_server.fail
	File: /terraform/azurerm/database/enable-audit.tf:3-10

		3  | resource "azurerm_sql_server" "fail" {
		4  |   name                         = "mssqlserver"
		5  |   resource_group_name          = azurerm_resource_group.example.name
		6  |   location                     = azurerm_resource_group.example.location
		7  |   version                      = "12.0"
		8  |   administrator_login          = "mradministrator"
		9  |   administrator_login_password = "tfsecRocks"
		10 | }


Check: CKV2_AZURE_7: "Ensure that Azure Active Directory Admin is configured"
	FAILED for resource: azurerm_sql_server.example
	File: /terraform/azurerm/mssql/SQLServerAuditingRetention90Days.tf:2-15

		2  | resource "azurerm_sql_server" "example" {
		3  |   name                         = "mssqlserver"
		4  |   resource_group_name          = azurerm_resource_group.example.name
		5  |   location                     = azurerm_resource_group.example.location
		6  |   version                      = "12.0"
		7  |   administrator_login          = "mradministrator"
		8  |   administrator_login_password = "thisIsDog11"
		9  |   extended_auditing_policy {
		10 |     storage_endpoint                        = azurerm_storage_account.example.primary_blob_endpoint
		11 |     storage_account_access_key              = azurerm_storage_account.example.primary_access_key
		12 |     storage_account_access_key_is_secondary = true
		13 |     retention_in_days                       = 6
		14 |   }
		15 | }


Check: CKV2_AZURE_10: "Ensure that Microsoft Antimalware is configured to automatically updates for Virtual Machines"
	FAILED for resource: azurerm_virtual_machine.fail
	File: /terraform/azurerm/compute/ssh-authentication.tf:2-6

		2 | resource "azurerm_virtual_machine" "fail" {
		3 |   os_profile_linux_config {
		4 |     disable_password_authentication = false
		5 |   }
		6 | }


Check: CKV2_AZURE_10: "Ensure that Microsoft Antimalware is configured to automatically updates for Virtual Machines"
	FAILED for resource: azurerm_virtual_machine.secret
	File: /terraform/azurerm/vms/VMCredsInCustomData.tf:2-11

		2  | resource "azurerm_virtual_machine" "secret" {
		3  |   name = "${var.prefix}-vm"
		4  |
		5  |   os_profile {
		6  |     computer_name = "hostname"
		7  |     custom_data   = <<EOF
		8  | 0000-0000-0000-0000-000000000000
		9  | EOF
		10 |   }
		11 | }


Check: CKV2_AZURE_16: "Ensure that MySQL server enables customer-managed key for encryption"
	FAILED for resource: azurerm_mysql_server.fail
	File: /terraform/azurerm/database/mysql-threat-detection-enabled.tf:3-13

		3  | resource "azurerm_mysql_server" "fail" {
		4  |   name = "fail"
		5  |
		6  |   public_network_access_enabled    = true
		7  |   ssl_enforcement_enabled          = false
		8  |   ssl_minimal_tls_version_enforced = "TLS1_2"
		9  |
		10 |   threat_detection_policy {
		11 |     enabled = false
		12 |   }
		13 | }


Check: CKV2_AZURE_16: "Ensure that MySQL server enables customer-managed key for encryption"
	FAILED for resource: azurerm_mysql_server.example
	File: /terraform/azurerm/mysql/MySQLTreatDetectionEnabled.tf:2-25

		2  | resource "azurerm_mysql_server" "example" {
		3  |   name                = "example-mysqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "mysqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "B_Gen5_2"
		11 |   storage_mb = 5120
		12 |   version    = "5.7"
		13 |
		14 |   auto_grow_enabled                 = true
		15 |   backup_retention_days             = 7
		16 |   geo_redundant_backup_enabled      = true
		17 |   infrastructure_encryption_enabled = true
		18 |   public_network_access_enabled     = false
		19 |   ssl_enforcement_enabled           = false
		20 |   ssl_minimal_tls_version_enforced  = "TLS1_2"
		21 |
		22 |   threat_detection_policy {
		23 |     enabled = false
		24 |   }
		25 | }


Check: CKV2_AZURE_16: "Ensure that MySQL server enables customer-managed key for encryption"
	FAILED for resource: azurerm_mysql_server.examplea
	File: /terraform/azurerm/mysql/MySQLServerMinTLSVersion.tf:2-21

		2  | resource "azurerm_mysql_server" "examplea" {
		3  |   name                = "example-mysqlserver"
		4  |   location            = azurerm_resource_group.example.location
		5  |   resource_group_name = azurerm_resource_group.example.name
		6  |
		7  |   administrator_login          = "mysqladminun"
		8  |   administrator_login_password = "H@Sh1CoR3!"
		9  |
		10 |   sku_name   = "B_Gen5_2"
		11 |   storage_mb = 5120
		12 |   version    = "5.7"
		13 |
		14 |   auto_grow_enabled                 = true
		15 |   backup_retention_days             = 7
		16 |   geo_redundant_backup_enabled      = true
		17 |   infrastructure_encryption_enabled = true
		18 |   public_network_access_enabled     = false
		19 |   ssl_enforcement_enabled           = false
		20 |   ssl_minimal_tls_version_enforced  = "TLS1_1"
		21 | }


Check: CKV2_AZURE_1: "Ensure storage for critical data are encrypted with Customer Managed Key"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/storage.tf:1-15

		1  | resource "azurerm_storage_account" "example" {
		2  |   name                      = "stor"
		3  |   resource_group_name       = azurerm_resource_group.example.name
		4  |   location                  = azurerm_resource_group.example.location
		5  |   account_tier              = "Standard"
		6  |   account_replication_type  = "GRS"
		7  |   enable_https_traffic_only = false
		8  |   allow_blob_public_access  = true
		9  |
		10 |   //to fail CKV_AZURE_35 && CKV_AZURE_36
		11 |   network_rules {
		12 |     default_action = "Deny"
		13 |     bypass         = ["Metrics"]
		14 |   }
		15 | }


Check: CKV2_AZURE_1: "Ensure storage for critical data are encrypted with Customer Managed Key"
	FAILED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/use-secure-tls-policy.tf:3-7

		3 | resource "azurerm_storage_account" "fail" {
		4 |   name                = "storageaccountname"
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   location            = azurerm_resource_group.example.location
		7 | }


Check: CKV2_AZURE_18: "Ensure that Storage Accounts use customer-managed key for encryption"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/storage.tf:1-15

		1  | resource "azurerm_storage_account" "example" {
		2  |   name                      = "stor"
		3  |   resource_group_name       = azurerm_resource_group.example.name
		4  |   location                  = azurerm_resource_group.example.location
		5  |   account_tier              = "Standard"
		6  |   account_replication_type  = "GRS"
		7  |   enable_https_traffic_only = false
		8  |   allow_blob_public_access  = true
		9  |
		10 |   //to fail CKV_AZURE_35 && CKV_AZURE_36
		11 |   network_rules {
		12 |     default_action = "Deny"
		13 |     bypass         = ["Metrics"]
		14 |   }
		15 | }


Check: CKV2_AZURE_18: "Ensure that Storage Accounts use customer-managed key for encryption"
	FAILED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/use-secure-tls-policy.tf:3-7

		3 | resource "azurerm_storage_account" "fail" {
		4 |   name                = "storageaccountname"
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   location            = azurerm_resource_group.example.location
		7 | }


Check: CKV2_AZURE_12: "Ensure that virtual machines are backed up using Azure Backup"
	FAILED for resource: azurerm_virtual_machine.fail
	File: /terraform/azurerm/compute/ssh-authentication.tf:2-6

		2 | resource "azurerm_virtual_machine" "fail" {
		3 |   os_profile_linux_config {
		4 |     disable_password_authentication = false
		5 |   }
		6 | }


Check: CKV2_AZURE_12: "Ensure that virtual machines are backed up using Azure Backup"
	FAILED for resource: azurerm_virtual_machine.secret
	File: /terraform/azurerm/vms/VMCredsInCustomData.tf:2-11

		2  | resource "azurerm_virtual_machine" "secret" {
		3  |   name = "${var.prefix}-vm"
		4  |
		5  |   os_profile {
		6  |     computer_name = "hostname"
		7  |     custom_data   = <<EOF
		8  | 0000-0000-0000-0000-000000000000
		9  | EOF
		10 |   }
		11 | }


Check: CKV2_AZURE_9: "Ensure Virtual Machines are utilizing Managed Disks"
	FAILED for resource: azurerm_virtual_machine.fail
	File: /terraform/azurerm/compute/no-secrets-in-custom-data.tf:2-7

		2 | resource "azurerm_virtual_machine" "fail" {
		3 |   name        = "fail"
		4 |   custom_data = <<EOF
		5 | export DATABASE_PASSWORD=\"SomeSortOfPassword\"
		6 | EOF
		7 | }


Check: CKV2_AZURE_9: "Ensure Virtual Machines are utilizing Managed Disks"
	FAILED for resource: azurerm_virtual_machine.fail
	File: /terraform/azurerm/compute/ssh-authentication.tf:2-6

		2 | resource "azurerm_virtual_machine" "fail" {
		3 |   os_profile_linux_config {
		4 |     disable_password_authentication = false
		5 |   }
		6 | }


Check: CKV2_AZURE_9: "Ensure Virtual Machines are utilizing Managed Disks"
	FAILED for resource: azurerm_virtual_machine.secret
	File: /terraform/azurerm/vms/VMCredsInCustomData.tf:2-11

		2  | resource "azurerm_virtual_machine" "secret" {
		3  |   name = "${var.prefix}-vm"
		4  |
		5  |   os_profile {
		6  |     computer_name = "hostname"
		7  |     custom_data   = <<EOF
		8  | 0000-0000-0000-0000-000000000000
		9  | EOF
		10 |   }
		11 | }


Check: CKV2_AZURE_11: "Ensure that Azure Data Explorer encryption at rest uses a customer-managed key"
	FAILED for resource: azurerm_kusto_cluster.example
	File: /terraform/azurerm/kusto/DataExplorerUsesDiskEncryption.tf:2-15

		2  | resource "azurerm_kusto_cluster" "example" {
		3  |   name                = "kustocluster"
		4  |   location            = azurerm_resource_group.rg.location
		5  |   resource_group_name = azurerm_resource_group.rg.name
		6  |
		7  |   sku {
		8  |     name     = "Standard_D13_v2"
		9  |     capacity = 2
		10 |   }
		11 |
		12 |   tags = {
		13 |     Environment = "Production"
		14 |   }
		15 | }


Check: CKV_AZURE_23: "Ensure that 'Auditing' is set to 'On' for SQL servers"
	FAILED for resource: azurerm_sql_server.fail
	File: /terraform/azurerm/database/enable-audit.tf:3-10

		3  | resource "azurerm_sql_server" "fail" {
		4  |   name                         = "mssqlserver"
		5  |   resource_group_name          = azurerm_resource_group.example.name
		6  |   location                     = azurerm_resource_group.example.location
		7  |   version                      = "12.0"
		8  |   administrator_login          = "mradministrator"
		9  |   administrator_login_password = "tfsecRocks"
		10 | }


Check: CKV_AZURE_23: "Ensure that 'Auditing' is set to 'On' for SQL servers"
	FAILED for resource: azurerm_mssql_server.fail
	File: /terraform/azurerm/database/secure-tls-policy.tf:2-10

		2  | resource "azurerm_mssql_server" "fail" {
		3  |   name                         = "mssqlserver"
		4  |   resource_group_name          = azurerm_resource_group.example.name
		5  |   location                     = azurerm_resource_group.example.location
		6  |   version                      = "12.0"
		7  |   administrator_login          = "missadministrator"
		8  |   administrator_login_password = "thisIsKat11"
		9  |   minimum_tls_version          = "1.1"
		10 | }


Check: CKV_AZURE_23: "Ensure that 'Auditing' is set to 'On' for SQL servers"
	FAILED for resource: azurerm_mssql_server.examplea
	File: /terraform/azurerm/mssql/MSSQLServerMinTLSVersion.tf:2-15

		2  | resource "azurerm_mssql_server" "examplea" {
		3  |   name                          = var.server_name
		4  |   resource_group_name           = var.resource_group.name
		5  |   location                      = var.resource_group.location
		6  |   version                       = var.sql["version"]
		7  |   administrator_login           = var.sql["administrator_login"]
		8  |   administrator_login_password  = local.administrator_login_password
		9  |   minimum_tls_version           = "1.1"
		10 |   public_network_access_enabled = var.sql["public_network_access_enabled"]
		11 |   identity {
		12 |     type = "SystemAssigned"
		13 |   }
		14 |   tags = var.common_tags
		15 | }


Check: CKV_AZURE_23: "Ensure that 'Auditing' is set to 'On' for SQL servers"
	FAILED for resource: azurerm_mssql_server.example
	File: /terraform/azurerm/mssql/SQLServerPublicAccessDisabled.tf:2-15

		2  | resource "azurerm_mssql_server" "example" {
		3  |   name                          = "mssqlserver"
		4  |   resource_group_name           = azurerm_resource_group.example.name
		5  |   location                      = azurerm_resource_group.example.location
		6  |   version                       = "12.0"
		7  |   administrator_login           = "missadministrator"
		8  |   administrator_login_password  = "thisIsKat11"
		9  |   minimum_tls_version           = "1.2"
		10 |   public_network_access_enabled = true
		11 |   azuread_administrator {
		12 |     login_username = "AzureAD Admin"
		13 |     object_id      = "00000000-0000-0000-0000-000000000000"
		14 |   }
		15 | }


Check: CKV2_AZURE_8: "Ensure the storage container storing the activity logs is not publicly accessible"
	FAILED for resource: azurerm_storage_account.example
	File: /terraform/azurerm/storage/storage.tf:1-15

		1  | resource "azurerm_storage_account" "example" {
		2  |   name                      = "stor"
		3  |   resource_group_name       = azurerm_resource_group.example.name
		4  |   location                  = azurerm_resource_group.example.location
		5  |   account_tier              = "Standard"
		6  |   account_replication_type  = "GRS"
		7  |   enable_https_traffic_only = false
		8  |   allow_blob_public_access  = true
		9  |
		10 |   //to fail CKV_AZURE_35 && CKV_AZURE_36
		11 |   network_rules {
		12 |     default_action = "Deny"
		13 |     bypass         = ["Metrics"]
		14 |   }
		15 | }


Check: CKV2_AZURE_8: "Ensure the storage container storing the activity logs is not publicly accessible"
	FAILED for resource: azurerm_storage_account.fail
	File: /terraform/azurerm/storage/use-secure-tls-policy.tf:3-7

		3 | resource "azurerm_storage_account" "fail" {
		4 |   name                = "storageaccountname"
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 |   location            = azurerm_resource_group.example.location
		7 | }


Check: CKV2_AZURE_15: "Ensure that Azure data factories are encrypted with a customer-managed key"
	FAILED for resource: azurerm_data_factory.example
	File: /terraform/azurerm/datafactory/DataFactoryNoPublicNetworkAccess.tf:2-6

		2 | resource "azurerm_data_factory" "example" {
		3 |   name                = "example"
		4 |   location            = "azurerm_resource_group.example.location"
		5 |   resource_group_name = "azurerm_resource_group.example.name"
		6 | }


Check: CKV2_AZURE_15: "Ensure that Azure data factories are encrypted with a customer-managed key"
	FAILED for resource: azurerm_data_factory.fail
	File: /terraform/azurerm/datafactory/data_factory.tf:2-6

		2 | resource "azurerm_data_factory" "fail" {
		3 |   name                = "example"
		4 |   location            = azurerm_resource_group.example.location
		5 |   resource_group_name = azurerm_resource_group.example.name
		6 | }


Check: CKV2_AZURE_21: "Ensure Storage logging is enabled for Blob service for read requests"
	FAILED for resource: azurerm_storage_container.fail
	File: /terraform/azurerm/storage/container-activity-logs-not-public.tf:3-6

		3 | resource "azurerm_storage_container" "fail" {
		4 |   name                  = "terraform-container-storage"
		5 |   container_access_type = "public"
		6 | }


Check: CKV2_AZURE_21: "Ensure Storage logging is enabled for Blob service for read requests"
	FAILED for resource: azurerm_storage_container.example
	File: /terraform/azurerm/storage/StorageBlobServiceContainerPrivateAccess.tf:2-6

		2 | resource "azurerm_storage_container" "example" {
		3 |   name                  = "vhds"
		4 |   storage_account_name  = azurerm_storage_account.example.name
		5 |   container_access_type = "blob"
		6 | }


Check: CKV2_AZURE_2: "Ensure that Vulnerability Assessment (VA) is enabled on a SQL server by setting a Storage Account"
	FAILED for resource: azurerm_sql_server.fail
	File: /terraform/azurerm/database/enable-audit.tf:3-10

		3  | resource "azurerm_sql_server" "fail" {
		4  |   name                         = "mssqlserver"
		5  |   resource_group_name          = azurerm_resource_group.example.name
		6  |   location                     = azurerm_resource_group.example.location
		7  |   version                      = "12.0"
		8  |   administrator_login          = "mradministrator"
		9  |   administrator_login_password = "tfsecRocks"
		10 | }


Check: CKV2_GCP_6: "Ensure that Cloud KMS cryptokeys are not anonymously or publicly accessible"
	FAILED for resource: google_kms_crypto_key.fails
	File: /terraform/google/kms/google_kms_crypto_key.tf:10-18

		10 | resource "google_kms_crypto_key" "fails" {
		11 |   name            = "crypto-key-example"
		12 |   key_ring        = google_kms_key_ring.keyring.id
		13 |   rotation_period = "15552000s"
		14 |
		15 |   lifecycle {
		16 |     prevent_destroy = true
		17 |   }
		18 | }


Check: CKV2_GCP_5: "Ensure that Cloud Audit Logging is configured properly across all services and all users from a project"
	FAILED for resource: google_project.fail
	File: /terraform/google/project/project.tf:7-12

		7  | resource "google_project" "fail" {
		8  |   name                = "My Project"
		9  |   project_id          = "your-project-id"
		10 |   org_id              = "1234567"
		11 |   auto_create_network = true
		12 | }


Check: CKV2_GCP_2: "Ensure legacy networks do not exist for a project"
	FAILED for resource: google_project.fail
	File: /terraform/google/project/project.tf:7-12

		7  | resource "google_project" "fail" {
		8  |   name                = "My Project"
		9  |   project_id          = "your-project-id"
		10 |   org_id              = "1234567"
		11 |   auto_create_network = true
		12 | }


Check: CKV2_AWS_5: "Ensure that Security Groups are attached to another resource"
	FAILED for resource: aws_security_group.bad_example
	File: /terraform/aws/vpc/security_group.tf:16-39

		16 | resource "aws_security_group" "bad_example" {
		17 |   ingress {
		18 |     from_port = 22
		19 |     to_port = 22
		20 |     cidr_blocks = ["0.0.0.0/0"]
		21 |   }
		22 |
		23 |   ingress {
		24 |     from_port = 3389
		25 |     to_port = 3389
		26 |     cidr_blocks = ["0.0.0.0/0"]
		27 |   }
		28 |
		29 |   egress {
		30 |     from_port = 22
		31 |     to_port = 22
		32 |     cidr_blocks = ["0.0.0.0/0"]
		33 |   }
		34 |     egress {
		35 |     from_port = 3389
		36 |     to_port = 3389
		37 |     cidr_blocks = ["0.0.0.0/0"]
		38 |   }
		39 | }


Check: CKV2_AWS_19: "Ensure that all EIP addresses allocated to a VPC are attached to EC2 instances"
	FAILED for resource: aws_eip.solo
	File: /terraform/aws/eip/eip.tf:4-6

		4 | resource "aws_eip" "solo" {
		5 |   vpc = true
		6 | }


Check: CKV2_AWS_2: "Ensure that only encrypted EBS volumes are attached to EC2 instances"
	FAILED for resource: aws_ebs_volume.fail
	File: /terraform/aws/ebs/ebs_volume.tf:12-15

		12 | resource "aws_ebs_volume" "fail" {
		13 |   availability_zone = "eu-west-1a"
		14 |   size              = 1
		15 | }


Check: CKV2_AWS_10: "Ensure CloudTrail trails are integrated with CloudWatch Logs"
	FAILED for resource: aws_cloudtrail.fail
	File: /terraform/aws/cloudtrail/cloudtrail.tf:12-16

		12 | resource "aws_cloudtrail" "fail" {
		13 |   name                          = "TRAIL"
		14 |   s3_bucket_name                = aws_s3_bucket.test.id
		15 |   include_global_service_events = true
		16 | }


Check: CKV2_AWS_4: "Ensure API Gateway stage have logging level defined as appropriate"
	FAILED for resource: aws_api_gateway_stage.fail
	File: /terraform/aws/api-gateway/api_gateway_stage.tf:13-18

		13 | resource "aws_api_gateway_stage" "fail" {
		14 |   deployment_id        = aws_api_gateway_deployment.example.id
		15 |   rest_api_id          = aws_api_gateway_rest_api.example.id
		16 |   stage_name           = "example"
		17 |   xray_tracing_enabled = false
		18 | }


Check: CKV2_AWS_16: "Ensure that Auto Scaling is enabled on your DynamoDB tables"
	FAILED for resource: aws_dynamodb_table.default
	File: /terraform/aws/dynamodb/dynamodb_table.tf:10-35

		10 | resource "aws_dynamodb_table" "default" {
		11 |   name           = "GameScores"
		12 |   billing_mode   = "PROVISIONED"
		13 |   read_capacity  = 20
		14 |   write_capacity = 20
		15 |   hash_key       = "UserId"
		16 |   range_key      = "UserId"
		17 |
		18 |   attribute {
		19 |     name = "UserId"
		20 |     type = "S"
		21 |   }
		22 |
		23 |   replica {
		24 |     region_name = "us-east-2"
		25 |   }
		26 |
		27 |   replica {
		28 |     region_name = "us-west-2"
		29 |   }
		30 |
		31 |   # server_side_encryption {
		32 |   # 	enabled     = true
		33 |   # 	kms_key_arn = aws_kms_key.dynamo_db_kms.key_id
		34 |   # }
		35 | }


Check: CKV2_AWS_32: "Ensure CloudFront distribution has a strict security headers policy attached"
	FAILED for resource: aws_cloudfront_distribution.s3_distribution
	File: /terraform/aws/cloudfront/cloudfront.tf:12-87

		12 | resource "aws_cloudfront_distribution" "s3_distribution" {
		13 |   dynamic "origin" {
		14 |     for_each = local.origins
		15 |     content {
		16 |       domain_name = origin.value["domain_name"]
		17 |       origin_id   = origin.value["origin_id"]
		18 |
		19 |       s3_origin_config {
		20 |         origin_access_identity = origin.value["origin_access_identity"]
		21 |       }
		22 |     }
		23 |   }
		24 |
		25 |   enabled             = true
		26 |   is_ipv6_enabled     = true
		27 |   default_root_object = "index.html"
		28 |
		29 |   default_cache_behavior {
		30 |     allowed_methods  = var.default_behaviour.allowed_methods
		31 |     cached_methods   = var.default_behaviour.cached_methods
		32 |     target_origin_id = var.default_behaviour.origin_id
		33 |
		34 |     forwarded_values {
		35 |       query_string = var.default_behaviour.query_string
		36 |
		37 |       cookies {
		38 |         forward = var.default_behaviour.forward
		39 |       }
		40 |     }
		41 |
		42 |     viewer_protocol_policy = "allow-all"
		43 |     min_ttl                = var.default_behaviour.min_ttl
		44 |     default_ttl            = var.default_behaviour.default_ttl
		45 |     max_ttl                = var.default_behaviour.max_ttl
		46 |   }
		47 |
		48 |   dynamic "ordered_cache_behavior" {
		49 |     for_each = var.behaviours
		50 |     content {
		51 |       path_pattern     = ordered_cache_behavior.value["path_pattern"]
		52 |       allowed_methods  = ordered_cache_behavior.value["allowed_methods"]
		53 |       cached_methods   = ordered_cache_behavior.value["cached_methods"]
		54 |       target_origin_id = ordered_cache_behavior.value["origin_id"]
		55 |       forwarded_values {
		56 |         headers      = ordered_cache_behavior.value["headers"]
		57 |         query_string = ordered_cache_behavior.value["query_string"]
		58 |         cookies {
		59 |           forward = ordered_cache_behavior.value["forward"]
		60 |         }
		61 |       }
		62 |       min_ttl                = ordered_cache_behavior.value["min_ttl"]
		63 |       default_ttl            = ordered_cache_behavior.value["default_ttl"]
		64 |       max_ttl                = ordered_cache_behavior.value["max_ttl"]
		65 |       compress               = ordered_cache_behavior.value["compress"]
		66 |       viewer_protocol_policy = "allow-all"
		67 |     }
		68 |   }
		69 |
		70 |   price_class = "PriceClass_200"
		71 |
		72 |   restrictions {
		73 |     geo_restriction {
		74 |       restriction_type = var.geo_restrictions["restriction_type"]
		75 |       locations        = var.geo_restrictions["locations"]
		76 |     }
		77 |   }
		78 |
		79 |   viewer_certificate {
		80 |     cloudfront_default_certificate = var.viewer_certificate["cloudfront_default_certificate"]
		81 |     minimum_protocol_version       = var.viewer_certificate["minimum_protocol_version"]
		82 |   }
		83 |
		84 |   lifecycle {
		85 |     ignore_changes = [tags]
		86 |   }
		87 | }


Check: CKV2_AWS_12: "Ensure the default security group of every VPC restricts all traffic"
	FAILED for resource: aws_vpc.eks_vpc
	File: /terraform/aws/vpc/vpc.tf:5-9

		5 | resource "aws_vpc" "eks_vpc" {
		6 |   cidr_block           = "10.10.0.0/16"
		7 |   enable_dns_hostnames = true
		8 |   enable_dns_support   = true
		9 | }


Check: CKV2_AWS_11: "Ensure VPC flow logging is enabled in all VPCs"
	FAILED for resource: aws_vpc.eks_vpc
	File: /terraform/aws/vpc/vpc.tf:5-9

		5 | resource "aws_vpc" "eks_vpc" {
		6 |   cidr_block           = "10.10.0.0/16"
		7 |   enable_dns_hostnames = true
		8 |   enable_dns_support   = true
		9 | }


Check: CKV2_AWS_27: "Ensure Postgres RDS as aws_rds_cluster has Query Logging enabled"
	FAILED for resource: aws_rds_cluster.fail2
	File: /terraform/aws/rds/rds_cluster.tf:17-23

		17 | resource "aws_rds_cluster" "fail2" {
		18 |   engine                  = "aurora-postgresql"
		19 |   backup_retention_period = 0
		20 |   db_subnet_group_name    = aws_db_subnet_group.default.name
		21 |   master_username         = "james"
		22 |   master_password         = "password12345"
		23 | }


Check: CKV2_AWS_28: "Ensure public facing ALB are protected by WAF"
	FAILED for resource: aws_alb.fail
	File: /terraform/aws/elb/alb.tf:12-24

		12 | resource "aws_alb" "fail" {
		13 |   name               = "bad_alb"
		14 |   internal           = false
		15 |   load_balancer_type = "application"
		16 |
		17 |   # access_logs {
		18 |   #   bucket  = aws_s3_bucket.lb_logs.bucket
		19 |   #   prefix  = "test-lb"
		20 |   #   enabled = true
		21 |   # }
		22 |
		23 |   drop_invalid_header_fields = false
		24 | }


Check: CKV2_AWS_28: "Ensure public facing ALB are protected by WAF"
	FAILED for resource: aws_alb.disabled
	File: /terraform/aws/lb/lb.tf:12-17

		12 | resource "aws_alb" "disabled" {
		13 |   internal           = false
		14 |   load_balancer_type = "application"
		15 |   name               = "alb"
		16 |   subnets            = var.public_subnet_ids
		17 | }


Check: CKV2_AWS_6: "Ensure that S3 bucket has a Public Access block"
	FAILED for resource: aws_s3_bucket.fail
	File: /terraform/aws/s3/s3.tf:10-38

		10 | resource "aws_s3_bucket" "fail" {
		11 |   acl    = "public-read-write"
		12 |   bucket = "superfail"
		13 |
		14 |   versioning {
		15 |     enabled    = false
		16 |     mfa_delete = false
		17 |   }
		18 |
		19 |   policy = <<POLICY
		20 | {
		21 |   "Version": "2012-10-17",
		22 |   "Statement": [
		23 |     {
		24 |       "Principal": {
		25 |         "AWS": "*"
		26 |       },
		27 |       "Effect": "Deny",
		28 |       "Action": [
		29 |         "s3:*"
		30 |       ],
		31 |       "Resource": [
		32 |         "*"
		33 |       ]
		34 |     }
		35 |   ]
		36 | }
		37 | POLICY
		38 | }


Check: CKV2_AWS_8: "Ensure that RDS clusters has backup plan of AWS Backup"
	FAILED for resource: aws_rds_cluster.fail2
	File: /terraform/aws/rds/rds_cluster.tf:17-23

		17 | resource "aws_rds_cluster" "fail2" {
		18 |   engine                  = "aurora-postgresql"
		19 |   backup_retention_period = 0
		20 |   db_subnet_group_name    = aws_db_subnet_group.default.name
		21 |   master_username         = "james"
		22 |   master_password         = "password12345"
		23 | }


Check: CKV2_AWS_13: "Ensure that Redshift clusters has backup plan of AWS Backup"
	FAILED for resource: aws_redshift_cluster.fail
	File: /terraform/aws/redshift/redshift_cluster.tf:16-28

		16 | resource "aws_redshift_cluster" "fail" {
		17 |   cluster_identifier                  = "examplea"
		18 |   availability_zone                   = data.aws_availability_zones.available.names[0]
		19 |   database_name                       = "mydb"
		20 |   master_username                     = "foo_test"
		21 |   master_password                     = "Mustbe8characters"
		22 |   node_type                           = "dc2.large"
		23 |   automated_snapshot_retention_period = 0
		24 |   allow_version_upgrade               = false
		25 |   skip_final_snapshot                 = true
		26 |   kms_key_id                          = ""
		27 |   cluster_subnet_group_name           = ""
		28 | }


Check: CKV2_AWS_18: "Ensure that Elastic File System (Amazon EFS) file systems are added in the backup plans of AWS Backup"
	FAILED for resource: aws_efs_file_system.sharedstore
	File: /terraform/aws/efs/efs.tf:8-23

		8  | resource "aws_efs_file_system" "sharedstore" {
		9  |
		10 |   creation_token = var.efs["creation_token"]
		11 |
		12 |   lifecycle_policy {
		13 |     transition_to_ia = var.efs["transition_to_ia"]
		14 |   }
		15 |
		16 |   kms_key_id                      = ""
		17 |   encrypted                       = false
		18 |   performance_mode                = var.efs["performance_mode"]
		19 |   provisioned_throughput_in_mibps = var.efs["provisioned_throughput_in_mibps"]
		20 |   throughput_mode                 = var.efs["throughput_mode"]
		21 |   tags                            = var.common_tags
		22 |
		23 | }


Check: CKV2_AWS_9: "Ensure that EBS are added in the backup plans of AWS Backup"
	FAILED for resource: aws_ebs_volume.fail
	File: /terraform/aws/ebs/ebs_volume.tf:12-15

		12 | resource "aws_ebs_volume" "fail" {
		13 |   availability_zone = "eu-west-1a"
		14 |   size              = 1
		15 | }
